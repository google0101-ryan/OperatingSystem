
kernel.elf:     file format elf64-x86-64


Disassembly of section .text:

ffffffff80203000 <strncmp(char const*, char const*, int)>:
ffffffff80203000:	f3 0f 1e fa          	endbr64 
ffffffff80203004:	55                   	push   rbp
ffffffff80203005:	48 89 e5             	mov    rbp,rsp
ffffffff80203008:	48 83 ec 18          	sub    rsp,0x18
ffffffff8020300c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80203010:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff80203014:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffffffff80203017:	eb 1c                	jmp    ffffffff80203035 <strncmp(char const*, char const*, int)+0x35>
ffffffff80203019:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8020301d:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffffffff80203020:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80203024:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80203027:	38 c2                	cmp    dl,al
ffffffff80203029:	75 34                	jne    ffffffff8020305f <strncmp(char const*, char const*, int)+0x5f>
ffffffff8020302b:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
ffffffff80203030:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
ffffffff80203035:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203039:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff8020303c:	84 c0                	test   al,al
ffffffff8020303e:	74 14                	je     ffffffff80203054 <strncmp(char const*, char const*, int)+0x54>
ffffffff80203040:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff80203043:	8d 50 ff             	lea    edx,[rax-0x1]
ffffffff80203046:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
ffffffff80203049:	85 c0                	test   eax,eax
ffffffff8020304b:	74 07                	je     ffffffff80203054 <strncmp(char const*, char const*, int)+0x54>
ffffffff8020304d:	b8 01 00 00 00       	mov    eax,0x1
ffffffff80203052:	eb 05                	jmp    ffffffff80203059 <strncmp(char const*, char const*, int)+0x59>
ffffffff80203054:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80203059:	84 c0                	test   al,al
ffffffff8020305b:	75 bc                	jne    ffffffff80203019 <strncmp(char const*, char const*, int)+0x19>
ffffffff8020305d:	eb 01                	jmp    ffffffff80203060 <strncmp(char const*, char const*, int)+0x60>
ffffffff8020305f:	90                   	nop
ffffffff80203060:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203064:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80203067:	0f b6 d0             	movzx  edx,al
ffffffff8020306a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8020306e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80203071:	0f b6 c8             	movzx  ecx,al
ffffffff80203074:	89 d0                	mov    eax,edx
ffffffff80203076:	29 c8                	sub    eax,ecx
ffffffff80203078:	c9                   	leave  
ffffffff80203079:	c3                   	ret    

ffffffff8020307a <ValidateChecksum(RSDPDescriptor*)>:
ffffffff8020307a:	f3 0f 1e fa          	endbr64 
ffffffff8020307e:	55                   	push   rbp
ffffffff8020307f:	48 89 e5             	mov    rbp,rsp
ffffffff80203082:	48 83 ec 28          	sub    rsp,0x28
ffffffff80203086:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff8020308a:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff80203091:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80203095:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80203099:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff802030a0:	00 
ffffffff802030a1:	eb 19                	jmp    ffffffff802030bc <ValidateChecksum(RSDPDescriptor*)+0x42>
ffffffff802030a3:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff802030a7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff802030ab:	48 01 d0             	add    rax,rdx
ffffffff802030ae:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff802030b1:	0f b6 c0             	movzx  eax,al
ffffffff802030b4:	01 45 fc             	add    DWORD PTR [rbp-0x4],eax
ffffffff802030b7:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
ffffffff802030bc:	48 83 7d f0 13       	cmp    QWORD PTR [rbp-0x10],0x13
ffffffff802030c1:	76 e0                	jbe    ffffffff802030a3 <ValidateChecksum(RSDPDescriptor*)+0x29>
ffffffff802030c3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff802030c6:	0f b6 c0             	movzx  eax,al
ffffffff802030c9:	85 c0                	test   eax,eax
ffffffff802030cb:	0f 94 c0             	sete   al
ffffffff802030ce:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
ffffffff802030d1:	0f b6 45 e7          	movzx  eax,BYTE PTR [rbp-0x19]
ffffffff802030d5:	c9                   	leave  
ffffffff802030d6:	c3                   	ret    

ffffffff802030d7 <ParseAPIC(unsigned long)>:
ffffffff802030d7:	f3 0f 1e fa          	endbr64 
ffffffff802030db:	55                   	push   rbp
ffffffff802030dc:	48 89 e5             	mov    rbp,rsp
ffffffff802030df:	48 83 ec 60          	sub    rsp,0x60
ffffffff802030e3:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
ffffffff802030e7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff802030eb:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff802030ef:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff802030f3:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff802030f7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff802030fb:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffffffff802030fe:	89 c2                	mov    edx,eax
ffffffff80203100:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80203104:	48 01 d0             	add    rax,rdx
ffffffff80203107:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff8020310b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff8020310f:	48 2b 45 f0          	sub    rax,QWORD PTR [rbp-0x10]
ffffffff80203113:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff80203117:	48 c7 45 f8 2c 00 00 	mov    QWORD PTR [rbp-0x8],0x2c
ffffffff8020311e:	00 
ffffffff8020311f:	e9 12 02 00 00       	jmp    ffffffff80203336 <ParseAPIC(unsigned long)+0x25f>
ffffffff80203124:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffffffff80203128:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8020312c:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff80203130:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff80203134:	48 01 c8             	add    rax,rcx
ffffffff80203137:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff8020313a:	88 45 d7             	mov    BYTE PTR [rbp-0x29],al
ffffffff8020313d:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffffffff80203141:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203145:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff80203149:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff8020314d:	48 01 c8             	add    rax,rcx
ffffffff80203150:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80203153:	88 45 d6             	mov    BYTE PTR [rbp-0x2a],al
ffffffff80203156:	0f b6 45 d7          	movzx  eax,BYTE PTR [rbp-0x29]
ffffffff8020315a:	83 f8 04             	cmp    eax,0x4
ffffffff8020315d:	0f 84 6e 01 00 00    	je     ffffffff802032d1 <ParseAPIC(unsigned long)+0x1fa>
ffffffff80203163:	83 f8 04             	cmp    eax,0x4
ffffffff80203166:	0f 8f b0 01 00 00    	jg     ffffffff8020331c <ParseAPIC(unsigned long)+0x245>
ffffffff8020316c:	83 f8 02             	cmp    eax,0x2
ffffffff8020316f:	0f 84 ce 00 00 00    	je     ffffffff80203243 <ParseAPIC(unsigned long)+0x16c>
ffffffff80203175:	83 f8 02             	cmp    eax,0x2
ffffffff80203178:	0f 8f 9e 01 00 00    	jg     ffffffff8020331c <ParseAPIC(unsigned long)+0x245>
ffffffff8020317e:	85 c0                	test   eax,eax
ffffffff80203180:	74 0a                	je     ffffffff8020318c <ParseAPIC(unsigned long)+0xb5>
ffffffff80203182:	83 f8 01             	cmp    eax,0x1
ffffffff80203185:	74 65                	je     ffffffff802031ec <ParseAPIC(unsigned long)+0x115>
ffffffff80203187:	e9 90 01 00 00       	jmp    ffffffff8020331c <ParseAPIC(unsigned long)+0x245>
ffffffff8020318c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffffffff80203190:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203194:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff80203198:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff8020319c:	48 01 c8             	add    rax,rcx
ffffffff8020319f:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffffffff802031a2:	8b 05 58 5e 00 00    	mov    eax,DWORD PTR [rip+0x5e58]        # ffffffff80209000 <cur_id>
ffffffff802031a8:	8d 48 01             	lea    ecx,[rax+0x1]
ffffffff802031ab:	89 0d 4f 5e 00 00    	mov    DWORD PTR [rip+0x5e4f],ecx        # ffffffff80209000 <cur_id>
ffffffff802031b1:	48 98                	cdqe   
ffffffff802031b3:	88 90 40 91 20 80    	mov    BYTE PTR [rax-0x7fdf6ec0],dl
ffffffff802031b9:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffffffff802031bd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff802031c1:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff802031c5:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff802031c9:	48 01 c8             	add    rax,rcx
ffffffff802031cc:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff802031cf:	88 45 be             	mov    BYTE PTR [rbp-0x42],al
ffffffff802031d2:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff802031d6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff802031da:	48 01 d0             	add    rax,rdx
ffffffff802031dd:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff802031df:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
ffffffff802031e2:	48 83 45 f8 04       	add    QWORD PTR [rbp-0x8],0x4
ffffffff802031e7:	e9 4a 01 00 00       	jmp    ffffffff80203336 <ParseAPIC(unsigned long)+0x25f>
ffffffff802031ec:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffffffff802031f0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff802031f4:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff802031f8:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff802031fc:	48 01 c8             	add    rax,rcx
ffffffff802031ff:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80203202:	88 45 c5             	mov    BYTE PTR [rbp-0x3b],al
ffffffff80203205:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
ffffffff8020320a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff8020320e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203212:	48 01 d0             	add    rax,rdx
ffffffff80203215:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80203217:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
ffffffff8020321a:	48 83 45 f8 04       	add    QWORD PTR [rbp-0x8],0x4
ffffffff8020321f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80203223:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203227:	48 01 d0             	add    rax,rdx
ffffffff8020322a:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff8020322c:	88 45 bf             	mov    BYTE PTR [rbp-0x41],al
ffffffff8020322f:	48 83 45 f8 04       	add    QWORD PTR [rbp-0x8],0x4
ffffffff80203234:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
ffffffff80203237:	48 89 05 ca 5d 00 00 	mov    QWORD PTR [rip+0x5dca],rax        # ffffffff80209008 <apic_base>
ffffffff8020323e:	e9 f3 00 00 00       	jmp    ffffffff80203336 <ParseAPIC(unsigned long)+0x25f>
ffffffff80203243:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffffffff80203247:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8020324b:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff8020324f:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff80203253:	48 01 c8             	add    rax,rcx
ffffffff80203256:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80203259:	88 45 d0             	mov    BYTE PTR [rbp-0x30],al
ffffffff8020325c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffffffff80203260:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203264:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff80203268:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff8020326c:	48 01 c8             	add    rax,rcx
ffffffff8020326f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80203272:	88 45 cf             	mov    BYTE PTR [rbp-0x31],al
ffffffff80203275:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80203279:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8020327d:	48 01 d0             	add    rax,rdx
ffffffff80203280:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80203282:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
ffffffff80203285:	48 83 45 f8 04       	add    QWORD PTR [rbp-0x8],0x4
ffffffff8020328a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff8020328e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203292:	48 01 d0             	add    rax,rdx
ffffffff80203295:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffffffff80203298:	66 89 45 c6          	mov    WORD PTR [rbp-0x3a],ax
ffffffff8020329c:	48 83 45 f8 02       	add    QWORD PTR [rbp-0x8],0x2
ffffffff802032a1:	8b 05 79 5e 00 00    	mov    eax,DWORD PTR [rip+0x5e79]        # ffffffff80209120 <cur_redirect>
ffffffff802032a7:	48 98                	cdqe   
ffffffff802032a9:	0f b6 55 cf          	movzx  edx,BYTE PTR [rbp-0x31]
ffffffff802032ad:	88 14 c5 20 90 20 80 	mov    BYTE PTR [rax*8-0x7fdf6fe0],dl
ffffffff802032b4:	8b 55 c8             	mov    edx,DWORD PTR [rbp-0x38]
ffffffff802032b7:	8b 05 63 5e 00 00    	mov    eax,DWORD PTR [rip+0x5e63]        # ffffffff80209120 <cur_redirect>
ffffffff802032bd:	8d 48 01             	lea    ecx,[rax+0x1]
ffffffff802032c0:	89 0d 5a 5e 00 00    	mov    DWORD PTR [rip+0x5e5a],ecx        # ffffffff80209120 <cur_redirect>
ffffffff802032c6:	48 98                	cdqe   
ffffffff802032c8:	89 14 c5 24 90 20 80 	mov    DWORD PTR [rax*8-0x7fdf6fdc],edx
ffffffff802032cf:	eb 65                	jmp    ffffffff80203336 <ParseAPIC(unsigned long)+0x25f>
ffffffff802032d1:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffffffff802032d5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff802032d9:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff802032dd:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff802032e1:	48 01 c8             	add    rax,rcx
ffffffff802032e4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff802032e7:	88 45 d5             	mov    BYTE PTR [rbp-0x2b],al
ffffffff802032ea:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff802032ee:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff802032f2:	48 01 d0             	add    rax,rdx
ffffffff802032f5:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffffffff802032f8:	66 89 45 d2          	mov    WORD PTR [rbp-0x2e],ax
ffffffff802032fc:	48 83 45 f8 02       	add    QWORD PTR [rbp-0x8],0x2
ffffffff80203301:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffffffff80203305:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203309:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff8020330d:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff80203311:	48 01 c8             	add    rax,rcx
ffffffff80203314:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80203317:	88 45 d1             	mov    BYTE PTR [rbp-0x2f],al
ffffffff8020331a:	eb 1a                	jmp    ffffffff80203336 <ParseAPIC(unsigned long)+0x25f>
ffffffff8020331c:	0f b6 45 d7          	movzx  eax,BYTE PTR [rbp-0x29]
ffffffff80203320:	89 c6                	mov    esi,eax
ffffffff80203322:	48 c7 c7 00 10 20 80 	mov    rdi,0xffffffff80201000
ffffffff80203329:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8020332e:	e8 00 42 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff80203333:	f4                   	hlt    
ffffffff80203334:	eb fd                	jmp    ffffffff80203333 <ParseAPIC(unsigned long)+0x25c>
ffffffff80203336:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8020333a:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
ffffffff8020333e:	0f 82 e0 fd ff ff    	jb     ffffffff80203124 <ParseAPIC(unsigned long)+0x4d>
ffffffff80203344:	90                   	nop
ffffffff80203345:	90                   	nop
ffffffff80203346:	c9                   	leave  
ffffffff80203347:	c3                   	ret    

ffffffff80203348 <ACPI::FindTables(stivale2_struct*)>:
ffffffff80203348:	f3 0f 1e fa          	endbr64 
ffffffff8020334c:	55                   	push   rbp
ffffffff8020334d:	48 89 e5             	mov    rbp,rsp
ffffffff80203350:	48 83 ec 50          	sub    rsp,0x50
ffffffff80203354:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffffffff80203358:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff8020335c:	48 ba 78 5e 37 0a 93 	movabs rdx,0x9e1786930a375e78
ffffffff80203363:	86 17 9e 
ffffffff80203366:	48 89 d6             	mov    rsi,rdx
ffffffff80203369:	48 89 c7             	mov    rdi,rax
ffffffff8020336c:	e8 5d 28 00 00       	call   ffffffff80205bce <get_tag(stivale2_struct*, unsigned long)>
ffffffff80203371:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80203375:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffffffff8020337a:	75 11                	jne    ffffffff8020338d <ACPI::FindTables(stivale2_struct*)+0x45>
ffffffff8020337c:	48 c7 c7 1c 10 20 80 	mov    rdi,0xffffffff8020101c
ffffffff80203383:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80203388:	e8 a6 41 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff8020338d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80203391:	48 89 c6             	mov    rsi,rax
ffffffff80203394:	48 c7 c7 2f 10 20 80 	mov    rdi,0xffffffff8020102f
ffffffff8020339b:	b8 00 00 00 00       	mov    eax,0x0
ffffffff802033a0:	e8 8e 41 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff802033a5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff802033a9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff802033ad:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff802033b1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff802033b5:	48 89 c7             	mov    rdi,rax
ffffffff802033b8:	e8 bd fc ff ff       	call   ffffffff8020307a <ValidateChecksum(RSDPDescriptor*)>
ffffffff802033bd:	83 f0 01             	xor    eax,0x1
ffffffff802033c0:	84 c0                	test   al,al
ffffffff802033c2:	74 11                	je     ffffffff802033d5 <ACPI::FindTables(stivale2_struct*)+0x8d>
ffffffff802033c4:	48 c7 c7 40 10 20 80 	mov    rdi,0xffffffff80201040
ffffffff802033cb:	b8 00 00 00 00       	mov    eax,0x0
ffffffff802033d0:	e8 5e 41 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff802033d5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff802033d9:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffffffff802033dc:	89 c6                	mov    esi,eax
ffffffff802033de:	48 c7 c7 58 10 20 80 	mov    rdi,0xffffffff80201058
ffffffff802033e5:	b8 00 00 00 00       	mov    eax,0x0
ffffffff802033ea:	e8 44 41 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff802033ef:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff802033f3:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffffffff802033f6:	89 c0                	mov    eax,eax
ffffffff802033f8:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff802033fc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80203400:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffffffff80203403:	89 c0                	mov    eax,eax
ffffffff80203405:	48 83 e8 08          	sub    rax,0x8
ffffffff80203409:	48 c1 e8 02          	shr    rax,0x2
ffffffff8020340d:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffffffff80203410:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80203414:	48 83 c0 08          	add    rax,0x8
ffffffff80203418:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff8020341c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff80203423:	e9 a4 00 00 00       	jmp    ffffffff802034cc <ACPI::FindTables(stivale2_struct*)+0x184>
ffffffff80203428:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8020342b:	48 98                	cdqe   
ffffffff8020342d:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffffffff80203434:	00 
ffffffff80203435:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80203439:	48 01 d0             	add    rax,rdx
ffffffff8020343c:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff8020343e:	89 c0                	mov    eax,eax
ffffffff80203440:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffffffff80203444:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80203448:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff8020344b:	88 45 c3             	mov    BYTE PTR [rbp-0x3d],al
ffffffff8020344e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80203452:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
ffffffff80203456:	88 45 c4             	mov    BYTE PTR [rbp-0x3c],al
ffffffff80203459:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff8020345d:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
ffffffff80203461:	88 45 c5             	mov    BYTE PTR [rbp-0x3b],al
ffffffff80203464:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80203468:	0f b6 40 03          	movzx  eax,BYTE PTR [rax+0x3]
ffffffff8020346c:	88 45 c6             	mov    BYTE PTR [rbp-0x3a],al
ffffffff8020346f:	c6 45 c7 00          	mov    BYTE PTR [rbp-0x39],0x0
ffffffff80203473:	0f b6 45 c3          	movzx  eax,BYTE PTR [rbp-0x3d]
ffffffff80203477:	3c 41                	cmp    al,0x41
ffffffff80203479:	75 4d                	jne    ffffffff802034c8 <ACPI::FindTables(stivale2_struct*)+0x180>
ffffffff8020347b:	0f b6 45 c4          	movzx  eax,BYTE PTR [rbp-0x3c]
ffffffff8020347f:	3c 50                	cmp    al,0x50
ffffffff80203481:	75 45                	jne    ffffffff802034c8 <ACPI::FindTables(stivale2_struct*)+0x180>
ffffffff80203483:	0f b6 45 c5          	movzx  eax,BYTE PTR [rbp-0x3b]
ffffffff80203487:	3c 49                	cmp    al,0x49
ffffffff80203489:	75 3d                	jne    ffffffff802034c8 <ACPI::FindTables(stivale2_struct*)+0x180>
ffffffff8020348b:	0f b6 45 c6          	movzx  eax,BYTE PTR [rbp-0x3a]
ffffffff8020348f:	3c 43                	cmp    al,0x43
ffffffff80203491:	75 35                	jne    ffffffff802034c8 <ACPI::FindTables(stivale2_struct*)+0x180>
ffffffff80203493:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80203496:	48 98                	cdqe   
ffffffff80203498:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffffffff8020349f:	00 
ffffffff802034a0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff802034a4:	48 01 d0             	add    rax,rdx
ffffffff802034a7:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff802034a9:	89 c6                	mov    esi,eax
ffffffff802034ab:	48 c7 c7 66 10 20 80 	mov    rdi,0xffffffff80201066
ffffffff802034b2:	b8 00 00 00 00       	mov    eax,0x0
ffffffff802034b7:	e8 77 40 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff802034bc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff802034c0:	48 89 c7             	mov    rdi,rax
ffffffff802034c3:	e8 0f fc ff ff       	call   ffffffff802030d7 <ParseAPIC(unsigned long)>
ffffffff802034c8:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff802034cc:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff802034cf:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
ffffffff802034d2:	0f 8c 50 ff ff ff    	jl     ffffffff80203428 <ACPI::FindTables(stivale2_struct*)+0xe0>
ffffffff802034d8:	90                   	nop
ffffffff802034d9:	90                   	nop
ffffffff802034da:	c9                   	leave  
ffffffff802034db:	c3                   	ret    

ffffffff802034dc <ACPI::SetupAPIC()>:
ffffffff802034dc:	f3 0f 1e fa          	endbr64 
ffffffff802034e0:	55                   	push   rbp
ffffffff802034e1:	48 89 e5             	mov    rbp,rsp
ffffffff802034e4:	53                   	push   rbx
ffffffff802034e5:	48 83 ec 18          	sub    rsp,0x18
ffffffff802034e9:	bf 08 00 00 00       	mov    edi,0x8
ffffffff802034ee:	e8 71 17 00 00       	call   ffffffff80204c64 <operator new(unsigned long)>
ffffffff802034f3:	48 89 c3             	mov    rbx,rax
ffffffff802034f6:	48 8b 05 0b 5b 00 00 	mov    rax,QWORD PTR [rip+0x5b0b]        # ffffffff80209008 <apic_base>
ffffffff802034fd:	48 89 c6             	mov    rsi,rax
ffffffff80203500:	48 89 df             	mov    rdi,rbx
ffffffff80203503:	e8 54 1b 00 00       	call   ffffffff8020505c <IOAPIC::IOAPIC(unsigned long)>
ffffffff80203508:	48 89 1d 59 36 01 00 	mov    QWORD PTR [rip+0x13659],rbx        # ffffffff80216b68 <ioapic>
ffffffff8020350f:	8b 05 0b 5c 00 00    	mov    eax,DWORD PTR [rip+0x5c0b]        # ffffffff80209120 <cur_redirect>
ffffffff80203515:	89 c6                	mov    esi,eax
ffffffff80203517:	48 c7 c7 80 10 20 80 	mov    rdi,0xffffffff80201080
ffffffff8020351e:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80203523:	e8 0b 40 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff80203528:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
ffffffff8020352f:	eb 3c                	jmp    ffffffff8020356d <ACPI::SetupAPIC()+0x91>
ffffffff80203531:	48 8b 05 30 36 01 00 	mov    rax,QWORD PTR [rip+0x13630]        # ffffffff80216b68 <ioapic>
ffffffff80203538:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffffffff8020353b:	48 63 d2             	movsxd rdx,edx
ffffffff8020353e:	0f b6 14 d5 20 90 20 	movzx  edx,BYTE PTR [rdx*8-0x7fdf6fe0]
ffffffff80203545:	80 
ffffffff80203546:	83 c2 20             	add    edx,0x20
ffffffff80203549:	0f b6 d2             	movzx  edx,dl
ffffffff8020354c:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
ffffffff8020354f:	48 63 c9             	movsxd rcx,ecx
ffffffff80203552:	8b 0c cd 24 90 20 80 	mov    ecx,DWORD PTR [rcx*8-0x7fdf6fdc]
ffffffff80203559:	0f b6 f1             	movzx  esi,cl
ffffffff8020355c:	b9 00 00 00 00       	mov    ecx,0x0
ffffffff80203561:	48 89 c7             	mov    rdi,rax
ffffffff80203564:	e8 7b 1b 00 00       	call   ffffffff802050e4 <IOAPIC::Redirect(unsigned char, unsigned char, unsigned int)>
ffffffff80203569:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
ffffffff8020356d:	8b 05 ad 5b 00 00    	mov    eax,DWORD PTR [rip+0x5bad]        # ffffffff80209120 <cur_redirect>
ffffffff80203573:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
ffffffff80203576:	7c b9                	jl     ffffffff80203531 <ACPI::SetupAPIC()+0x55>
ffffffff80203578:	90                   	nop
ffffffff80203579:	90                   	nop
ffffffff8020357a:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffffffff8020357e:	c9                   	leave  
ffffffff8020357f:	c3                   	ret    

ffffffff80203580 <ReadBase()>:
ffffffff80203580:	f3 0f 1e fa          	endbr64 
ffffffff80203584:	55                   	push   rbp
ffffffff80203585:	48 89 e5             	mov    rbp,rsp
ffffffff80203588:	48 83 ec 10          	sub    rsp,0x10
ffffffff8020358c:	b8 1b 00 00 00       	mov    eax,0x1b
ffffffff80203591:	89 c1                	mov    ecx,eax
ffffffff80203593:	0f 32                	rdmsr  
ffffffff80203595:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80203599:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffffffff8020359d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff802035a1:	48 c1 e0 20          	shl    rax,0x20
ffffffff802035a5:	48 0b 45 f8          	or     rax,QWORD PTR [rbp-0x8]
ffffffff802035a9:	c9                   	leave  
ffffffff802035aa:	c3                   	ret    

ffffffff802035ab <WriteBase(unsigned long)>:
ffffffff802035ab:	f3 0f 1e fa          	endbr64 
ffffffff802035af:	55                   	push   rbp
ffffffff802035b0:	48 89 e5             	mov    rbp,rsp
ffffffff802035b3:	48 83 ec 18          	sub    rsp,0x18
ffffffff802035b7:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff802035bb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff802035bf:	89 c0                	mov    eax,eax
ffffffff802035c1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff802035c5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff802035c9:	48 c1 e8 20          	shr    rax,0x20
ffffffff802035cd:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff802035d1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff802035d5:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff802035d9:	b9 1b 00 00 00       	mov    ecx,0x1b
ffffffff802035de:	0f 30                	wrmsr  
ffffffff802035e0:	90                   	nop
ffffffff802035e1:	c9                   	leave  
ffffffff802035e2:	c3                   	ret    
ffffffff802035e3:	90                   	nop

ffffffff802035e4 <LAPIC::WriteReg(unsigned int, unsigned int)>:
ffffffff802035e4:	f3 0f 1e fa          	endbr64 
ffffffff802035e8:	55                   	push   rbp
ffffffff802035e9:	48 89 e5             	mov    rbp,rsp
ffffffff802035ec:	48 83 ec 10          	sub    rsp,0x10
ffffffff802035f0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff802035f4:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
ffffffff802035f7:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
ffffffff802035fa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff802035fe:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff80203601:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffffffff80203604:	48 01 c2             	add    rdx,rax
ffffffff80203607:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
ffffffff8020360a:	89 02                	mov    DWORD PTR [rdx],eax
ffffffff8020360c:	90                   	nop
ffffffff8020360d:	c9                   	leave  
ffffffff8020360e:	c3                   	ret    
ffffffff8020360f:	90                   	nop

ffffffff80203610 <LAPIC::ReadReg(unsigned int)>:
ffffffff80203610:	f3 0f 1e fa          	endbr64 
ffffffff80203614:	55                   	push   rbp
ffffffff80203615:	48 89 e5             	mov    rbp,rsp
ffffffff80203618:	48 83 ec 10          	sub    rsp,0x10
ffffffff8020361c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80203620:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
ffffffff80203623:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203627:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff8020362a:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffffffff8020362d:	48 01 d0             	add    rax,rdx
ffffffff80203630:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80203632:	c9                   	leave  
ffffffff80203633:	c3                   	ret    

ffffffff80203634 <SpuriousInterruptHandler(IDT::registers_t*)>:
ffffffff80203634:	f3 0f 1e fa          	endbr64 
ffffffff80203638:	55                   	push   rbp
ffffffff80203639:	48 89 e5             	mov    rbp,rsp
ffffffff8020363c:	48 83 ec 10          	sub    rsp,0x10
ffffffff80203640:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80203644:	48 c7 c7 a3 10 20 80 	mov    rdi,0xffffffff802010a3
ffffffff8020364b:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80203650:	e8 de 3e 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff80203655:	90                   	nop
ffffffff80203656:	c9                   	leave  
ffffffff80203657:	c3                   	ret    

ffffffff80203658 <LAPIC::LAPIC()>:
ffffffff80203658:	f3 0f 1e fa          	endbr64 
ffffffff8020365c:	55                   	push   rbp
ffffffff8020365d:	48 89 e5             	mov    rbp,rsp
ffffffff80203660:	48 83 ec 20          	sub    rsp,0x20
ffffffff80203664:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80203668:	e8 13 ff ff ff       	call   ffffffff80203580 <ReadBase()>
ffffffff8020366d:	48 ba 00 f0 ff ff ff 	movabs rdx,0xffffffffff000
ffffffff80203674:	ff 0f 00 
ffffffff80203677:	48 21 d0             	and    rax,rdx
ffffffff8020367a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff8020367e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80203682:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80203686:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff80203689:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff8020368d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203691:	b9 13 00 00 00       	mov    ecx,0x13
ffffffff80203696:	48 89 c6             	mov    rsi,rax
ffffffff80203699:	bf 00 00 00 00       	mov    edi,0x0
ffffffff8020369e:	e8 97 3f 00 00       	call   ffffffff8020763a <VirtualMemory::MapPage(VirtualMemory::PageMapLevel4*, unsigned long, unsigned long, int)>
ffffffff802036a3:	48 c7 c6 34 36 20 80 	mov    rsi,0xffffffff80203634
ffffffff802036aa:	bf ff 00 00 00       	mov    edi,0xff
ffffffff802036af:	e8 cb 18 00 00       	call   ffffffff80204f7f <IDT::RegisterEntry(int, void (*)(IDT::registers_t*))>
ffffffff802036b4:	e8 c7 fe ff ff       	call   ffffffff80203580 <ReadBase()>
ffffffff802036b9:	80 cc 08             	or     ah,0x8
ffffffff802036bc:	48 89 c7             	mov    rdi,rax
ffffffff802036bf:	e8 e7 fe ff ff       	call   ffffffff802035ab <WriteBase(unsigned long)>
ffffffff802036c4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff802036c8:	be f0 00 00 00       	mov    esi,0xf0
ffffffff802036cd:	48 89 c7             	mov    rdi,rax
ffffffff802036d0:	e8 3b ff ff ff       	call   ffffffff80203610 <LAPIC::ReadReg(unsigned int)>
ffffffff802036d5:	0d ff 01 00 00       	or     eax,0x1ff
ffffffff802036da:	89 c2                	mov    edx,eax
ffffffff802036dc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff802036e0:	be f0 00 00 00       	mov    esi,0xf0
ffffffff802036e5:	48 89 c7             	mov    rdi,rax
ffffffff802036e8:	e8 f7 fe ff ff       	call   ffffffff802035e4 <LAPIC::WriteReg(unsigned int, unsigned int)>
ffffffff802036ed:	90                   	nop
ffffffff802036ee:	c9                   	leave  
ffffffff802036ef:	c3                   	ret    

ffffffff802036f0 <LAPIC::EOI()>:
ffffffff802036f0:	f3 0f 1e fa          	endbr64 
ffffffff802036f4:	55                   	push   rbp
ffffffff802036f5:	48 89 e5             	mov    rbp,rsp
ffffffff802036f8:	48 83 ec 08          	sub    rsp,0x8
ffffffff802036fc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80203700:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203704:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80203709:	be b0 00 00 00       	mov    esi,0xb0
ffffffff8020370e:	48 89 c7             	mov    rdi,rax
ffffffff80203711:	e8 ce fe ff ff       	call   ffffffff802035e4 <LAPIC::WriteReg(unsigned int, unsigned int)>
ffffffff80203716:	90                   	nop
ffffffff80203717:	c9                   	leave  
ffffffff80203718:	c3                   	ret    
ffffffff80203719:	90                   	nop

ffffffff8020371a <Bitmap::operator[](unsigned long)>:
ffffffff8020371a:	f3 0f 1e fa          	endbr64 
ffffffff8020371e:	55                   	push   rbp
ffffffff8020371f:	48 89 e5             	mov    rbp,rsp
ffffffff80203722:	48 83 ec 10          	sub    rsp,0x10
ffffffff80203726:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff8020372a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff8020372e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80203732:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203736:	48 89 d6             	mov    rsi,rdx
ffffffff80203739:	48 89 c7             	mov    rdi,rax
ffffffff8020373c:	e8 a5 00 00 00       	call   ffffffff802037e6 <Bitmap::Get(unsigned long)>
ffffffff80203741:	c9                   	leave  
ffffffff80203742:	c3                   	ret    
ffffffff80203743:	90                   	nop

ffffffff80203744 <Bitmap::Set(unsigned long, bool)>:
ffffffff80203744:	f3 0f 1e fa          	endbr64 
ffffffff80203748:	55                   	push   rbp
ffffffff80203749:	48 89 e5             	mov    rbp,rsp
ffffffff8020374c:	48 83 ec 28          	sub    rsp,0x28
ffffffff80203750:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80203754:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff80203758:	89 d0                	mov    eax,edx
ffffffff8020375a:	88 45 dc             	mov    BYTE PTR [rbp-0x24],al
ffffffff8020375d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80203761:	48 c1 e8 03          	shr    rax,0x3
ffffffff80203765:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80203769:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff8020376d:	83 e0 07             	and    eax,0x7
ffffffff80203770:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
ffffffff80203773:	0f b6 45 f7          	movzx  eax,BYTE PTR [rbp-0x9]
ffffffff80203777:	ba 80 00 00 00       	mov    edx,0x80
ffffffff8020377c:	89 c1                	mov    ecx,eax
ffffffff8020377e:	d3 fa                	sar    edx,cl
ffffffff80203780:	89 d0                	mov    eax,edx
ffffffff80203782:	88 45 f6             	mov    BYTE PTR [rbp-0xa],al
ffffffff80203785:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80203789:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff8020378c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203790:	48 01 d0             	add    rax,rdx
ffffffff80203793:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80203796:	89 c2                	mov    edx,eax
ffffffff80203798:	0f b6 45 f6          	movzx  eax,BYTE PTR [rbp-0xa]
ffffffff8020379c:	f7 d0                	not    eax
ffffffff8020379e:	89 d1                	mov    ecx,edx
ffffffff802037a0:	21 c1                	and    ecx,eax
ffffffff802037a2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff802037a6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff802037a9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff802037ad:	48 01 d0             	add    rax,rdx
ffffffff802037b0:	89 ca                	mov    edx,ecx
ffffffff802037b2:	88 10                	mov    BYTE PTR [rax],dl
ffffffff802037b4:	80 7d dc 00          	cmp    BYTE PTR [rbp-0x24],0x0
ffffffff802037b8:	74 24                	je     ffffffff802037de <Bitmap::Set(unsigned long, bool)+0x9a>
ffffffff802037ba:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff802037be:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff802037c1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff802037c5:	48 01 d0             	add    rax,rdx
ffffffff802037c8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff802037cb:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff802037cf:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffffffff802037d2:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff802037d6:	48 01 ca             	add    rdx,rcx
ffffffff802037d9:	0a 45 f6             	or     al,BYTE PTR [rbp-0xa]
ffffffff802037dc:	88 02                	mov    BYTE PTR [rdx],al
ffffffff802037de:	b8 01 00 00 00       	mov    eax,0x1
ffffffff802037e3:	c9                   	leave  
ffffffff802037e4:	c3                   	ret    
ffffffff802037e5:	90                   	nop

ffffffff802037e6 <Bitmap::Get(unsigned long)>:
ffffffff802037e6:	f3 0f 1e fa          	endbr64 
ffffffff802037ea:	55                   	push   rbp
ffffffff802037eb:	48 89 e5             	mov    rbp,rsp
ffffffff802037ee:	48 83 ec 20          	sub    rsp,0x20
ffffffff802037f2:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff802037f6:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff802037fa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff802037fe:	48 c1 e8 03          	shr    rax,0x3
ffffffff80203802:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80203806:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff8020380a:	83 e0 07             	and    eax,0x7
ffffffff8020380d:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
ffffffff80203810:	0f b6 45 f7          	movzx  eax,BYTE PTR [rbp-0x9]
ffffffff80203814:	ba 80 00 00 00       	mov    edx,0x80
ffffffff80203819:	89 c1                	mov    ecx,eax
ffffffff8020381b:	d3 fa                	sar    edx,cl
ffffffff8020381d:	89 d0                	mov    eax,edx
ffffffff8020381f:	88 45 f6             	mov    BYTE PTR [rbp-0xa],al
ffffffff80203822:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80203826:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff80203829:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8020382d:	48 01 d0             	add    rax,rdx
ffffffff80203830:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80203833:	22 45 f6             	and    al,BYTE PTR [rbp-0xa]
ffffffff80203836:	84 c0                	test   al,al
ffffffff80203838:	74 07                	je     ffffffff80203841 <Bitmap::Get(unsigned long)+0x5b>
ffffffff8020383a:	b8 01 00 00 00       	mov    eax,0x1
ffffffff8020383f:	eb 05                	jmp    ffffffff80203846 <Bitmap::Get(unsigned long)+0x60>
ffffffff80203841:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80203846:	c9                   	leave  
ffffffff80203847:	c3                   	ret    

ffffffff80203848 <memset(void*, int, unsigned long)>:
ffffffff80203848:	f3 0f 1e fa          	endbr64 
ffffffff8020384c:	55                   	push   rbp
ffffffff8020384d:	48 89 e5             	mov    rbp,rsp
ffffffff80203850:	48 83 ec 28          	sub    rsp,0x28
ffffffff80203854:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80203858:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff8020385b:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff8020385f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80203863:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80203867:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffffffff8020386e:	00 
ffffffff8020386f:	eb 15                	jmp    ffffffff80203886 <memset(void*, int, unsigned long)+0x3e>
ffffffff80203871:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80203875:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203879:	48 01 d0             	add    rax,rdx
ffffffff8020387c:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffffffff8020387f:	88 10                	mov    BYTE PTR [rax],dl
ffffffff80203881:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
ffffffff80203886:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8020388a:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
ffffffff8020388e:	72 e1                	jb     ffffffff80203871 <memset(void*, int, unsigned long)+0x29>
ffffffff80203890:	90                   	nop
ffffffff80203891:	90                   	nop
ffffffff80203892:	c9                   	leave  
ffffffff80203893:	c3                   	ret    

ffffffff80203894 <setup_gdt_descriptors(gdt_descriptor_array<7>*, unsigned long, unsigned long)>:
ffffffff80203894:	f3 0f 1e fa          	endbr64 
ffffffff80203898:	55                   	push   rbp
ffffffff80203899:	48 89 e5             	mov    rbp,rsp
ffffffff8020389c:	53                   	push   rbx
ffffffff8020389d:	48 83 ec 58          	sub    rsp,0x58
ffffffff802038a1:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffffffff802038a5:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffffffff802038a9:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
ffffffff802038ad:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff802038b1:	48 89 c7             	mov    rdi,rax
ffffffff802038b4:	e8 cb 03 00 00       	call   ffffffff80203c84 <gdt_descriptor_array<7>::zero()>
ffffffff802038b9:	48 8b 5d b8          	mov    rbx,QWORD PTR [rbp-0x48]
ffffffff802038bd:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffffffff802038c1:	ba 20 00 00 00       	mov    edx,0x20
ffffffff802038c6:	be 1a 00 00 00       	mov    esi,0x1a
ffffffff802038cb:	48 89 c7             	mov    rdi,rax
ffffffff802038ce:	e8 67 02 00 00       	call   ffffffff80203b3a <gdt_descriptor::gdt_descriptor(unsigned char, unsigned char)>
ffffffff802038d3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff802038d7:	48 89 c2             	mov    rdx,rax
ffffffff802038da:	be 08 00 00 00       	mov    esi,0x8
ffffffff802038df:	48 89 df             	mov    rdi,rbx
ffffffff802038e2:	e8 c7 03 00 00       	call   ffffffff80203cae <gdt_descriptor_array<7>::set(gdt_selector, gdt_descriptor)>
ffffffff802038e7:	48 8b 5d b8          	mov    rbx,QWORD PTR [rbp-0x48]
ffffffff802038eb:	48 8d 45 c8          	lea    rax,[rbp-0x38]
ffffffff802038ef:	ba 00 00 00 00       	mov    edx,0x0
ffffffff802038f4:	be 12 00 00 00       	mov    esi,0x12
ffffffff802038f9:	48 89 c7             	mov    rdi,rax
ffffffff802038fc:	e8 39 02 00 00       	call   ffffffff80203b3a <gdt_descriptor::gdt_descriptor(unsigned char, unsigned char)>
ffffffff80203901:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80203905:	48 89 c2             	mov    rdx,rax
ffffffff80203908:	be 10 00 00 00       	mov    esi,0x10
ffffffff8020390d:	48 89 df             	mov    rdi,rbx
ffffffff80203910:	e8 99 03 00 00       	call   ffffffff80203cae <gdt_descriptor_array<7>::set(gdt_selector, gdt_descriptor)>
ffffffff80203915:	48 8b 5d b8          	mov    rbx,QWORD PTR [rbp-0x48]
ffffffff80203919:	48 8d 45 d0          	lea    rax,[rbp-0x30]
ffffffff8020391d:	ba 20 00 00 00       	mov    edx,0x20
ffffffff80203922:	be 7a 00 00 00       	mov    esi,0x7a
ffffffff80203927:	48 89 c7             	mov    rdi,rax
ffffffff8020392a:	e8 0b 02 00 00       	call   ffffffff80203b3a <gdt_descriptor::gdt_descriptor(unsigned char, unsigned char)>
ffffffff8020392f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80203933:	48 89 c2             	mov    rdx,rax
ffffffff80203936:	be 23 00 00 00       	mov    esi,0x23
ffffffff8020393b:	48 89 df             	mov    rdi,rbx
ffffffff8020393e:	e8 6b 03 00 00       	call   ffffffff80203cae <gdt_descriptor_array<7>::set(gdt_selector, gdt_descriptor)>
ffffffff80203943:	48 8b 5d b8          	mov    rbx,QWORD PTR [rbp-0x48]
ffffffff80203947:	48 8d 45 d8          	lea    rax,[rbp-0x28]
ffffffff8020394b:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80203950:	be 7a 00 00 00       	mov    esi,0x7a
ffffffff80203955:	48 89 c7             	mov    rdi,rax
ffffffff80203958:	e8 dd 01 00 00       	call   ffffffff80203b3a <gdt_descriptor::gdt_descriptor(unsigned char, unsigned char)>
ffffffff8020395d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80203961:	48 89 c2             	mov    rdx,rax
ffffffff80203964:	be 23 00 00 00       	mov    esi,0x23
ffffffff80203969:	48 89 df             	mov    rdi,rbx
ffffffff8020396c:	e8 3d 03 00 00       	call   ffffffff80203cae <gdt_descriptor_array<7>::set(gdt_selector, gdt_descriptor)>
ffffffff80203971:	48 8b 5d b8          	mov    rbx,QWORD PTR [rbp-0x48]
ffffffff80203975:	48 8b 4d a8          	mov    rcx,QWORD PTR [rbp-0x58]
ffffffff80203979:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffffffff8020397d:	48 8d 45 e0          	lea    rax,[rbp-0x20]
ffffffff80203981:	be 09 00 00 00       	mov    esi,0x9
ffffffff80203986:	48 89 c7             	mov    rdi,rax
ffffffff80203989:	e8 0a 02 00 00       	call   ffffffff80203b98 <gdt_xdescriptor::gdt_xdescriptor(unsigned char, unsigned long, unsigned long)>
ffffffff8020398e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80203992:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80203996:	48 89 d1             	mov    rcx,rdx
ffffffff80203999:	48 89 c2             	mov    rdx,rax
ffffffff8020399c:	be 28 00 00 00       	mov    esi,0x28
ffffffff802039a1:	48 89 df             	mov    rdi,rbx
ffffffff802039a4:	e8 3b 03 00 00       	call   ffffffff80203ce4 <gdt_descriptor_array<7>::xset(gdt_selector, gdt_xdescriptor)>
ffffffff802039a9:	48 c7 c6 f0 52 21 80 	mov    rsi,0xffffffff802152f0
ffffffff802039b0:	48 c7 c7 40 92 20 80 	mov    rdi,0xffffffff80209240
ffffffff802039b7:	e8 86 03 00 00       	call   ffffffff80203d42 <gdt_descriptor_array<7>::fill_gdt_register(gdtr*)>
ffffffff802039bc:	90                   	nop
ffffffff802039bd:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffffffff802039c1:	c9                   	leave  
ffffffff802039c2:	c3                   	ret    

ffffffff802039c3 <GDT::Init()>:
ffffffff802039c3:	f3 0f 1e fa          	endbr64 
ffffffff802039c7:	55                   	push   rbp
ffffffff802039c8:	48 89 e5             	mov    rbp,rsp
ffffffff802039cb:	48 83 ec 10          	sub    rsp,0x10
ffffffff802039cf:	48 c7 45 f8 80 52 21 	mov    QWORD PTR [rbp-0x8],0xffffffff80215280
ffffffff802039d6:	80 
ffffffff802039d7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff802039db:	48 83 c0 70          	add    rax,0x70
ffffffff802039df:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff802039e3:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff802039e7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff802039eb:	48 89 c6             	mov    rsi,rax
ffffffff802039ee:	48 c7 c7 40 92 20 80 	mov    rdi,0xffffffff80209240
ffffffff802039f5:	e8 9a fe ff ff       	call   ffffffff80203894 <setup_gdt_descriptors(gdt_descriptor_array<7>*, unsigned long, unsigned long)>
ffffffff802039fa:	48 c7 c0 f0 52 21 80 	mov    rax,0xffffffff802152f0
ffffffff80203a01:	48 89 c7             	mov    rdi,rax
ffffffff80203a04:	e8 07 04 00 00       	call   ffffffff80203e10 <loadGdt>
ffffffff80203a09:	90                   	nop
ffffffff80203a0a:	c9                   	leave  
ffffffff80203a0b:	c3                   	ret    

ffffffff80203a0c <GDT::InitTSS(unsigned long)>:
ffffffff80203a0c:	f3 0f 1e fa          	endbr64 
ffffffff80203a10:	55                   	push   rbp
ffffffff80203a11:	48 89 e5             	mov    rbp,rsp
ffffffff80203a14:	48 83 ec 10          	sub    rsp,0x10
ffffffff80203a18:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80203a1c:	ba 70 00 00 00       	mov    edx,0x70
ffffffff80203a21:	be 00 00 00 00       	mov    esi,0x0
ffffffff80203a26:	48 c7 c7 80 52 21 80 	mov    rdi,0xffffffff80215280
ffffffff80203a2d:	e8 16 fe ff ff       	call   ffffffff80203848 <memset(void*, int, unsigned long)>
ffffffff80203a32:	66 c7 05 ab 18 01 00 	mov    WORD PTR [rip+0x118ab],0x70        # ffffffff802152e6 <ctss+0x66>
ffffffff80203a39:	70 00 
ffffffff80203a3b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203a3f:	48 89 05 3e 18 01 00 	mov    QWORD PTR [rip+0x1183e],rax        # ffffffff80215284 <ctss+0x4>
ffffffff80203a46:	bf 08 00 00 00       	mov    edi,0x8
ffffffff80203a4b:	e8 7a 26 00 00       	call   ffffffff802060ca <PhysicalMemory::AllocPages(unsigned long)>
ffffffff80203a50:	48 89 05 4d 18 01 00 	mov    QWORD PTR [rip+0x1184d],rax        # ffffffff802152a4 <ctss+0x24>
ffffffff80203a57:	bf 08 00 00 00       	mov    edi,0x8
ffffffff80203a5c:	e8 69 26 00 00       	call   ffffffff802060ca <PhysicalMemory::AllocPages(unsigned long)>
ffffffff80203a61:	48 89 05 44 18 01 00 	mov    QWORD PTR [rip+0x11844],rax        # ffffffff802152ac <ctss+0x2c>
ffffffff80203a68:	bf 08 00 00 00       	mov    edi,0x8
ffffffff80203a6d:	e8 58 26 00 00       	call   ffffffff802060ca <PhysicalMemory::AllocPages(unsigned long)>
ffffffff80203a72:	48 89 05 3b 18 01 00 	mov    QWORD PTR [rip+0x1183b],rax        # ffffffff802152b4 <ctss+0x34>
ffffffff80203a79:	48 8b 05 24 18 01 00 	mov    rax,QWORD PTR [rip+0x11824]        # ffffffff802152a4 <ctss+0x24>
ffffffff80203a80:	48 05 00 80 00 00    	add    rax,0x8000
ffffffff80203a86:	48 89 05 17 18 01 00 	mov    QWORD PTR [rip+0x11817],rax        # ffffffff802152a4 <ctss+0x24>
ffffffff80203a8d:	48 8b 05 18 18 01 00 	mov    rax,QWORD PTR [rip+0x11818]        # ffffffff802152ac <ctss+0x2c>
ffffffff80203a94:	48 05 00 80 00 00    	add    rax,0x8000
ffffffff80203a9a:	48 89 05 0b 18 01 00 	mov    QWORD PTR [rip+0x1180b],rax        # ffffffff802152ac <ctss+0x2c>
ffffffff80203aa1:	48 8b 05 0c 18 01 00 	mov    rax,QWORD PTR [rip+0x1180c]        # ffffffff802152b4 <ctss+0x34>
ffffffff80203aa8:	48 05 00 80 00 00    	add    rax,0x8000
ffffffff80203aae:	48 89 05 ff 17 01 00 	mov    QWORD PTR [rip+0x117ff],rax        # ffffffff802152b4 <ctss+0x34>
ffffffff80203ab5:	66 b8 28 00          	mov    ax,0x28
ffffffff80203ab9:	0f 00 d8             	ltr    ax
ffffffff80203abc:	90                   	nop
ffffffff80203abd:	c9                   	leave  
ffffffff80203abe:	c3                   	ret    

ffffffff80203abf <GDT::SetKernelStack(unsigned long)>:
ffffffff80203abf:	f3 0f 1e fa          	endbr64 
ffffffff80203ac3:	55                   	push   rbp
ffffffff80203ac4:	48 89 e5             	mov    rbp,rsp
ffffffff80203ac7:	48 83 ec 08          	sub    rsp,0x8
ffffffff80203acb:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80203acf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203ad3:	48 89 05 aa 17 01 00 	mov    QWORD PTR [rip+0x117aa],rax        # ffffffff80215284 <ctss+0x4>
ffffffff80203ada:	90                   	nop
ffffffff80203adb:	c9                   	leave  
ffffffff80203adc:	c3                   	ret    

ffffffff80203add <__static_initialization_and_destruction_0(int, int)>:
ffffffff80203add:	f3 0f 1e fa          	endbr64 
ffffffff80203ae1:	55                   	push   rbp
ffffffff80203ae2:	48 89 e5             	mov    rbp,rsp
ffffffff80203ae5:	48 83 ec 10          	sub    rsp,0x10
ffffffff80203ae9:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80203aec:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff80203aef:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
ffffffff80203af3:	75 15                	jne    ffffffff80203b0a <__static_initialization_and_destruction_0(int, int)+0x2d>
ffffffff80203af5:	81 7d f8 ff ff 00 00 	cmp    DWORD PTR [rbp-0x8],0xffff
ffffffff80203afc:	75 0c                	jne    ffffffff80203b0a <__static_initialization_and_destruction_0(int, int)+0x2d>
ffffffff80203afe:	48 c7 c7 40 92 20 80 	mov    rdi,0xffffffff80209240
ffffffff80203b05:	e8 38 01 00 00       	call   ffffffff80203c42 <gdt_descriptor_array<7>::gdt_descriptor_array()>
ffffffff80203b0a:	90                   	nop
ffffffff80203b0b:	c9                   	leave  
ffffffff80203b0c:	c3                   	ret    

ffffffff80203b0d <_GLOBAL__sub_I__Z6memsetPvim>:
ffffffff80203b0d:	f3 0f 1e fa          	endbr64 
ffffffff80203b11:	55                   	push   rbp
ffffffff80203b12:	48 89 e5             	mov    rbp,rsp
ffffffff80203b15:	be ff ff 00 00       	mov    esi,0xffff
ffffffff80203b1a:	bf 01 00 00 00       	mov    edi,0x1
ffffffff80203b1f:	e8 b9 ff ff ff       	call   ffffffff80203add <__static_initialization_and_destruction_0(int, int)>
ffffffff80203b24:	5d                   	pop    rbp
ffffffff80203b25:	c3                   	ret    

ffffffff80203b26 <gdt_descriptor::gdt_descriptor()>:
ffffffff80203b26:	f3 0f 1e fa          	endbr64 
ffffffff80203b2a:	55                   	push   rbp
ffffffff80203b2b:	48 89 e5             	mov    rbp,rsp
ffffffff80203b2e:	48 83 ec 08          	sub    rsp,0x8
ffffffff80203b32:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80203b36:	90                   	nop
ffffffff80203b37:	c9                   	leave  
ffffffff80203b38:	c3                   	ret    
ffffffff80203b39:	90                   	nop

ffffffff80203b3a <gdt_descriptor::gdt_descriptor(unsigned char, unsigned char)>:
ffffffff80203b3a:	f3 0f 1e fa          	endbr64 
ffffffff80203b3e:	55                   	push   rbp
ffffffff80203b3f:	48 89 e5             	mov    rbp,rsp
ffffffff80203b42:	48 83 ec 10          	sub    rsp,0x10
ffffffff80203b46:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80203b4a:	89 f1                	mov    ecx,esi
ffffffff80203b4c:	89 d0                	mov    eax,edx
ffffffff80203b4e:	89 ca                	mov    edx,ecx
ffffffff80203b50:	88 55 f4             	mov    BYTE PTR [rbp-0xc],dl
ffffffff80203b53:	88 45 f0             	mov    BYTE PTR [rbp-0x10],al
ffffffff80203b56:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203b5a:	c6 40 07 00          	mov    BYTE PTR [rax+0x7],0x0
ffffffff80203b5e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203b62:	c6 40 04 00          	mov    BYTE PTR [rax+0x4],0x0
ffffffff80203b66:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203b6a:	66 c7 40 02 00 00    	mov    WORD PTR [rax+0x2],0x0
ffffffff80203b70:	0f b6 45 f4          	movzx  eax,BYTE PTR [rbp-0xc]
ffffffff80203b74:	83 c8 80             	or     eax,0xffffff80
ffffffff80203b77:	89 c2                	mov    edx,eax
ffffffff80203b79:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203b7d:	88 50 05             	mov    BYTE PTR [rax+0x5],dl
ffffffff80203b80:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203b84:	0f b6 55 f0          	movzx  edx,BYTE PTR [rbp-0x10]
ffffffff80203b88:	88 50 06             	mov    BYTE PTR [rax+0x6],dl
ffffffff80203b8b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203b8f:	66 c7 00 00 00       	mov    WORD PTR [rax],0x0
ffffffff80203b94:	90                   	nop
ffffffff80203b95:	c9                   	leave  
ffffffff80203b96:	c3                   	ret    
ffffffff80203b97:	90                   	nop

ffffffff80203b98 <gdt_xdescriptor::gdt_xdescriptor(unsigned char, unsigned long, unsigned long)>:
ffffffff80203b98:	f3 0f 1e fa          	endbr64 
ffffffff80203b9c:	55                   	push   rbp
ffffffff80203b9d:	48 89 e5             	mov    rbp,rsp
ffffffff80203ba0:	48 83 ec 20          	sub    rsp,0x20
ffffffff80203ba4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80203ba8:	89 f0                	mov    eax,esi
ffffffff80203baa:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffffffff80203bae:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
ffffffff80203bb2:	88 45 f4             	mov    BYTE PTR [rbp-0xc],al
ffffffff80203bb5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203bb9:	48 89 c7             	mov    rdi,rax
ffffffff80203bbc:	e8 65 ff ff ff       	call   ffffffff80203b26 <gdt_descriptor::gdt_descriptor()>
ffffffff80203bc1:	0f b6 45 f4          	movzx  eax,BYTE PTR [rbp-0xc]
ffffffff80203bc5:	83 c8 80             	or     eax,0xffffff80
ffffffff80203bc8:	89 c2                	mov    edx,eax
ffffffff80203bca:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203bce:	88 50 05             	mov    BYTE PTR [rax+0x5],dl
ffffffff80203bd1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80203bd5:	48 c1 e8 10          	shr    rax,0x10
ffffffff80203bd9:	83 e0 0f             	and    eax,0xf
ffffffff80203bdc:	89 c2                	mov    edx,eax
ffffffff80203bde:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203be2:	88 50 06             	mov    BYTE PTR [rax+0x6],dl
ffffffff80203be5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80203be9:	89 c2                	mov    edx,eax
ffffffff80203beb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203bef:	66 89 10             	mov    WORD PTR [rax],dx
ffffffff80203bf2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80203bf6:	89 c2                	mov    edx,eax
ffffffff80203bf8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203bfc:	66 89 50 02          	mov    WORD PTR [rax+0x2],dx
ffffffff80203c00:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80203c04:	48 c1 e8 10          	shr    rax,0x10
ffffffff80203c08:	89 c2                	mov    edx,eax
ffffffff80203c0a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203c0e:	88 50 04             	mov    BYTE PTR [rax+0x4],dl
ffffffff80203c11:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80203c15:	48 c1 e8 18          	shr    rax,0x18
ffffffff80203c19:	89 c2                	mov    edx,eax
ffffffff80203c1b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203c1f:	88 50 07             	mov    BYTE PTR [rax+0x7],dl
ffffffff80203c22:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80203c26:	48 c1 e8 20          	shr    rax,0x20
ffffffff80203c2a:	89 c2                	mov    edx,eax
ffffffff80203c2c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203c30:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
ffffffff80203c33:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203c37:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
ffffffff80203c3e:	90                   	nop
ffffffff80203c3f:	c9                   	leave  
ffffffff80203c40:	c3                   	ret    
ffffffff80203c41:	90                   	nop

ffffffff80203c42 <gdt_descriptor_array<7>::gdt_descriptor_array()>:
ffffffff80203c42:	f3 0f 1e fa          	endbr64 
ffffffff80203c46:	55                   	push   rbp
ffffffff80203c47:	48 89 e5             	mov    rbp,rsp
ffffffff80203c4a:	41 54                	push   r12
ffffffff80203c4c:	53                   	push   rbx
ffffffff80203c4d:	48 83 ec 10          	sub    rsp,0x10
ffffffff80203c51:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80203c55:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80203c59:	bb 06 00 00 00       	mov    ebx,0x6
ffffffff80203c5e:	49 89 c4             	mov    r12,rax
ffffffff80203c61:	eb 10                	jmp    ffffffff80203c73 <gdt_descriptor_array<7>::gdt_descriptor_array()+0x31>
ffffffff80203c63:	4c 89 e7             	mov    rdi,r12
ffffffff80203c66:	e8 bb fe ff ff       	call   ffffffff80203b26 <gdt_descriptor::gdt_descriptor()>
ffffffff80203c6b:	49 83 c4 08          	add    r12,0x8
ffffffff80203c6f:	48 83 eb 01          	sub    rbx,0x1
ffffffff80203c73:	48 85 db             	test   rbx,rbx
ffffffff80203c76:	79 eb                	jns    ffffffff80203c63 <gdt_descriptor_array<7>::gdt_descriptor_array()+0x21>
ffffffff80203c78:	90                   	nop
ffffffff80203c79:	90                   	nop
ffffffff80203c7a:	48 83 c4 10          	add    rsp,0x10
ffffffff80203c7e:	5b                   	pop    rbx
ffffffff80203c7f:	41 5c                	pop    r12
ffffffff80203c81:	5d                   	pop    rbp
ffffffff80203c82:	c3                   	ret    
ffffffff80203c83:	90                   	nop

ffffffff80203c84 <gdt_descriptor_array<7>::zero()>:
ffffffff80203c84:	f3 0f 1e fa          	endbr64 
ffffffff80203c88:	55                   	push   rbp
ffffffff80203c89:	48 89 e5             	mov    rbp,rsp
ffffffff80203c8c:	48 83 ec 08          	sub    rsp,0x8
ffffffff80203c90:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80203c94:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203c98:	ba 38 00 00 00       	mov    edx,0x38
ffffffff80203c9d:	be 00 00 00 00       	mov    esi,0x0
ffffffff80203ca2:	48 89 c7             	mov    rdi,rax
ffffffff80203ca5:	e8 9e fb ff ff       	call   ffffffff80203848 <memset(void*, int, unsigned long)>
ffffffff80203caa:	90                   	nop
ffffffff80203cab:	c9                   	leave  
ffffffff80203cac:	c3                   	ret    
ffffffff80203cad:	90                   	nop

ffffffff80203cae <gdt_descriptor_array<7>::set(gdt_selector, gdt_descriptor)>:
ffffffff80203cae:	f3 0f 1e fa          	endbr64 
ffffffff80203cb2:	55                   	push   rbp
ffffffff80203cb3:	48 89 e5             	mov    rbp,rsp
ffffffff80203cb6:	48 83 ec 20          	sub    rsp,0x20
ffffffff80203cba:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80203cbe:	89 f0                	mov    eax,esi
ffffffff80203cc0:	48 89 55 ec          	mov    QWORD PTR [rbp-0x14],rdx
ffffffff80203cc4:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
ffffffff80203cc8:	0f b7 55 f4          	movzx  edx,WORD PTR [rbp-0xc]
ffffffff80203ccc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203cd0:	89 d6                	mov    esi,edx
ffffffff80203cd2:	48 89 c7             	mov    rdi,rax
ffffffff80203cd5:	e8 ac 00 00 00       	call   ffffffff80203d86 <gdt_descriptor_array<7>::get_entry(gdt_selector)>
ffffffff80203cda:	48 8b 55 ec          	mov    rdx,QWORD PTR [rbp-0x14]
ffffffff80203cde:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff80203ce1:	90                   	nop
ffffffff80203ce2:	c9                   	leave  
ffffffff80203ce3:	c3                   	ret    

ffffffff80203ce4 <gdt_descriptor_array<7>::xset(gdt_selector, gdt_xdescriptor)>:
ffffffff80203ce4:	f3 0f 1e fa          	endbr64 
ffffffff80203ce8:	55                   	push   rbp
ffffffff80203ce9:	48 89 e5             	mov    rbp,rsp
ffffffff80203cec:	48 83 ec 20          	sub    rsp,0x20
ffffffff80203cf0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80203cf4:	89 f0                	mov    eax,esi
ffffffff80203cf6:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
ffffffff80203cfa:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffffffff80203cfe:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
ffffffff80203d02:	0f b7 55 f4          	movzx  edx,WORD PTR [rbp-0xc]
ffffffff80203d06:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203d0a:	89 d6                	mov    esi,edx
ffffffff80203d0c:	48 89 c7             	mov    rdi,rax
ffffffff80203d0f:	e8 a6 00 00 00       	call   ffffffff80203dba <gdt_descriptor_array<7>::get_entry_x(gdt_selector)>
ffffffff80203d14:	48 89 c1             	mov    rcx,rax
ffffffff80203d17:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80203d1b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80203d1f:	48 89 01             	mov    QWORD PTR [rcx],rax
ffffffff80203d22:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
ffffffff80203d26:	90                   	nop
ffffffff80203d27:	c9                   	leave  
ffffffff80203d28:	c3                   	ret    
ffffffff80203d29:	90                   	nop

ffffffff80203d2a <gdt_descriptor_array<7>::size() const>:
ffffffff80203d2a:	f3 0f 1e fa          	endbr64 
ffffffff80203d2e:	55                   	push   rbp
ffffffff80203d2f:	48 89 e5             	mov    rbp,rsp
ffffffff80203d32:	48 83 ec 08          	sub    rsp,0x8
ffffffff80203d36:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80203d3a:	b8 38 00 00 00       	mov    eax,0x38
ffffffff80203d3f:	c9                   	leave  
ffffffff80203d40:	c3                   	ret    
ffffffff80203d41:	90                   	nop

ffffffff80203d42 <gdt_descriptor_array<7>::fill_gdt_register(gdtr*)>:
ffffffff80203d42:	f3 0f 1e fa          	endbr64 
ffffffff80203d46:	55                   	push   rbp
ffffffff80203d47:	48 89 e5             	mov    rbp,rsp
ffffffff80203d4a:	48 83 ec 10          	sub    rsp,0x10
ffffffff80203d4e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80203d52:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff80203d56:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203d5a:	48 89 c7             	mov    rdi,rax
ffffffff80203d5d:	e8 c8 ff ff ff       	call   ffffffff80203d2a <gdt_descriptor_array<7>::size() const>
ffffffff80203d62:	8d 50 ff             	lea    edx,[rax-0x1]
ffffffff80203d65:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80203d69:	66 89 10             	mov    WORD PTR [rax],dx
ffffffff80203d6c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203d70:	48 89 c7             	mov    rdi,rax
ffffffff80203d73:	e8 76 00 00 00       	call   ffffffff80203dee <gdt_descriptor_array<7>::raw()>
ffffffff80203d78:	48 89 c2             	mov    rdx,rax
ffffffff80203d7b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80203d7f:	48 89 50 02          	mov    QWORD PTR [rax+0x2],rdx
ffffffff80203d83:	90                   	nop
ffffffff80203d84:	c9                   	leave  
ffffffff80203d85:	c3                   	ret    

ffffffff80203d86 <gdt_descriptor_array<7>::get_entry(gdt_selector)>:
ffffffff80203d86:	f3 0f 1e fa          	endbr64 
ffffffff80203d8a:	55                   	push   rbp
ffffffff80203d8b:	48 89 e5             	mov    rbp,rsp
ffffffff80203d8e:	48 83 ec 10          	sub    rsp,0x10
ffffffff80203d92:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80203d96:	89 f0                	mov    eax,esi
ffffffff80203d98:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
ffffffff80203d9c:	0f b7 45 f4          	movzx  eax,WORD PTR [rbp-0xc]
ffffffff80203da0:	66 c1 e8 03          	shr    ax,0x3
ffffffff80203da4:	0f b7 c0             	movzx  eax,ax
ffffffff80203da7:	48 98                	cdqe   
ffffffff80203da9:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80203db0:	00 
ffffffff80203db1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203db5:	48 01 d0             	add    rax,rdx
ffffffff80203db8:	c9                   	leave  
ffffffff80203db9:	c3                   	ret    

ffffffff80203dba <gdt_descriptor_array<7>::get_entry_x(gdt_selector)>:
ffffffff80203dba:	f3 0f 1e fa          	endbr64 
ffffffff80203dbe:	55                   	push   rbp
ffffffff80203dbf:	48 89 e5             	mov    rbp,rsp
ffffffff80203dc2:	48 83 ec 10          	sub    rsp,0x10
ffffffff80203dc6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80203dca:	89 f0                	mov    eax,esi
ffffffff80203dcc:	66 89 45 f4          	mov    WORD PTR [rbp-0xc],ax
ffffffff80203dd0:	0f b7 45 f4          	movzx  eax,WORD PTR [rbp-0xc]
ffffffff80203dd4:	66 c1 e8 03          	shr    ax,0x3
ffffffff80203dd8:	0f b7 c0             	movzx  eax,ax
ffffffff80203ddb:	48 98                	cdqe   
ffffffff80203ddd:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80203de4:	00 
ffffffff80203de5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203de9:	48 01 d0             	add    rax,rdx
ffffffff80203dec:	c9                   	leave  
ffffffff80203ded:	c3                   	ret    

ffffffff80203dee <gdt_descriptor_array<7>::raw()>:
ffffffff80203dee:	f3 0f 1e fa          	endbr64 
ffffffff80203df2:	55                   	push   rbp
ffffffff80203df3:	48 89 e5             	mov    rbp,rsp
ffffffff80203df6:	48 83 ec 08          	sub    rsp,0x8
ffffffff80203dfa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80203dfe:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203e02:	c9                   	leave  
ffffffff80203e03:	c3                   	ret    
ffffffff80203e04:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80203e0b:	00 00 00 
ffffffff80203e0e:	66 90                	xchg   ax,ax

ffffffff80203e10 <loadGdt>:
ffffffff80203e10:	0f 01 17             	lgdt   [rdi]
ffffffff80203e13:	66 b8 10 00          	mov    ax,0x10
ffffffff80203e17:	8e d8                	mov    ds,eax
ffffffff80203e19:	8e d0                	mov    ss,eax
ffffffff80203e1b:	8e e0                	mov    fs,eax
ffffffff80203e1d:	8e e8                	mov    gs,eax
ffffffff80203e1f:	8e c0                	mov    es,eax
ffffffff80203e21:	5f                   	pop    rdi
ffffffff80203e22:	6a 08                	push   0x8
ffffffff80203e24:	57                   	push   rdi
ffffffff80203e25:	48 cb                	retfq  

ffffffff80203e27 <liballoc_memset(void*, int, unsigned long)>:
ffffffff80203e27:	f3 0f 1e fa          	endbr64 
ffffffff80203e2b:	55                   	push   rbp
ffffffff80203e2c:	48 89 e5             	mov    rbp,rsp
ffffffff80203e2f:	48 83 ec 28          	sub    rsp,0x28
ffffffff80203e33:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80203e37:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff80203e3a:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff80203e3e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff80203e45:	eb 13                	jmp    ffffffff80203e5a <liballoc_memset(void*, int, unsigned long)+0x33>
ffffffff80203e47:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffffffff80203e4a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80203e4e:	48 01 d0             	add    rax,rdx
ffffffff80203e51:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffffffff80203e54:	88 10                	mov    BYTE PTR [rax],dl
ffffffff80203e56:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff80203e5a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80203e5d:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffffffff80203e61:	77 e4                	ja     ffffffff80203e47 <liballoc_memset(void*, int, unsigned long)+0x20>
ffffffff80203e63:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80203e67:	c9                   	leave  
ffffffff80203e68:	c3                   	ret    

ffffffff80203e69 <liballoc_memcpy(void*, void const*, unsigned long)>:
ffffffff80203e69:	f3 0f 1e fa          	endbr64 
ffffffff80203e6d:	55                   	push   rbp
ffffffff80203e6e:	48 89 e5             	mov    rbp,rsp
ffffffff80203e71:	48 83 ec 38          	sub    rsp,0x38
ffffffff80203e75:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff80203e79:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffffffff80203e7d:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffffffff80203e81:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80203e85:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80203e89:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80203e8d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80203e91:	eb 21                	jmp    ffffffff80203eb4 <liballoc_memcpy(void*, void const*, unsigned long)+0x4b>
ffffffff80203e93:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80203e97:	48 8d 50 04          	lea    rdx,[rax+0x4]
ffffffff80203e9b:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
ffffffff80203e9f:	8b 10                	mov    edx,DWORD PTR [rax]
ffffffff80203ea1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80203ea5:	48 8d 48 04          	lea    rcx,[rax+0x4]
ffffffff80203ea9:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffffffff80203ead:	89 10                	mov    DWORD PTR [rax],edx
ffffffff80203eaf:	48 83 6d c8 04       	sub    QWORD PTR [rbp-0x38],0x4
ffffffff80203eb4:	48 83 7d c8 03       	cmp    QWORD PTR [rbp-0x38],0x3
ffffffff80203eb9:	77 d8                	ja     ffffffff80203e93 <liballoc_memcpy(void*, void const*, unsigned long)+0x2a>
ffffffff80203ebb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80203ebf:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80203ec3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80203ec7:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80203ecb:	eb 22                	jmp    ffffffff80203eef <liballoc_memcpy(void*, void const*, unsigned long)+0x86>
ffffffff80203ecd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80203ed1:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff80203ed5:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffffffff80203ed9:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffffffff80203edc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80203ee0:	48 8d 48 01          	lea    rcx,[rax+0x1]
ffffffff80203ee4:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
ffffffff80203ee8:	88 10                	mov    BYTE PTR [rax],dl
ffffffff80203eea:	48 83 6d c8 01       	sub    QWORD PTR [rbp-0x38],0x1
ffffffff80203eef:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffffffff80203ef4:	75 d7                	jne    ffffffff80203ecd <liballoc_memcpy(void*, void const*, unsigned long)+0x64>
ffffffff80203ef6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80203efa:	c9                   	leave  
ffffffff80203efb:	c3                   	ret    

ffffffff80203efc <allocate_new_page(unsigned int)>:
ffffffff80203efc:	f3 0f 1e fa          	endbr64 
ffffffff80203f00:	55                   	push   rbp
ffffffff80203f01:	48 89 e5             	mov    rbp,rsp
ffffffff80203f04:	48 83 ec 20          	sub    rsp,0x20
ffffffff80203f08:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffffffff80203f0b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff80203f0e:	83 c0 28             	add    eax,0x28
ffffffff80203f11:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80203f14:	83 45 fc 28          	add    DWORD PTR [rbp-0x4],0x28
ffffffff80203f18:	8b 0d e2 40 00 00    	mov    ecx,DWORD PTR [rip+0x40e2]        # ffffffff80208000 <l_pageSize>
ffffffff80203f1e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80203f21:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80203f26:	f7 f1                	div    ecx
ffffffff80203f28:	89 d0                	mov    eax,edx
ffffffff80203f2a:	85 c0                	test   eax,eax
ffffffff80203f2c:	75 15                	jne    ffffffff80203f43 <allocate_new_page(unsigned int)+0x47>
ffffffff80203f2e:	8b 35 cc 40 00 00    	mov    esi,DWORD PTR [rip+0x40cc]        # ffffffff80208000 <l_pageSize>
ffffffff80203f34:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80203f37:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80203f3c:	f7 f6                	div    esi
ffffffff80203f3e:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80203f41:	eb 16                	jmp    ffffffff80203f59 <allocate_new_page(unsigned int)+0x5d>
ffffffff80203f43:	8b 0d b7 40 00 00    	mov    ecx,DWORD PTR [rip+0x40b7]        # ffffffff80208000 <l_pageSize>
ffffffff80203f49:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80203f4c:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80203f51:	f7 f1                	div    ecx
ffffffff80203f53:	83 c0 01             	add    eax,0x1
ffffffff80203f56:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80203f59:	8b 05 a5 40 00 00    	mov    eax,DWORD PTR [rip+0x40a5]        # ffffffff80208004 <l_pageCount>
ffffffff80203f5f:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
ffffffff80203f62:	73 09                	jae    ffffffff80203f6d <allocate_new_page(unsigned int)+0x71>
ffffffff80203f64:	8b 05 9a 40 00 00    	mov    eax,DWORD PTR [rip+0x409a]        # ffffffff80208004 <l_pageCount>
ffffffff80203f6a:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80203f6d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80203f70:	48 89 c7             	mov    rdi,rax
ffffffff80203f73:	e8 c5 00 00 00       	call   ffffffff8020403d <liballoc_alloc>
ffffffff80203f78:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80203f7c:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffffffff80203f81:	75 19                	jne    ffffffff80203f9c <allocate_new_page(unsigned int)+0xa0>
ffffffff80203f83:	48 8b 05 9e 13 01 00 	mov    rax,QWORD PTR [rip+0x1139e]        # ffffffff80215328 <l_warningCount>
ffffffff80203f8a:	48 83 c0 01          	add    rax,0x1
ffffffff80203f8e:	48 89 05 93 13 01 00 	mov    QWORD PTR [rip+0x11393],rax        # ffffffff80215328 <l_warningCount>
ffffffff80203f95:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80203f9a:	eb 69                	jmp    ffffffff80204005 <allocate_new_page(unsigned int)+0x109>
ffffffff80203f9c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80203fa0:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
ffffffff80203fa7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80203fab:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffffffff80203fb2:	00 
ffffffff80203fb3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80203fb7:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffffffff80203fba:	89 50 10             	mov    DWORD PTR [rax+0x10],edx
ffffffff80203fbd:	8b 05 3d 40 00 00    	mov    eax,DWORD PTR [rip+0x403d]        # ffffffff80208000 <l_pageSize>
ffffffff80203fc3:	0f af 45 fc          	imul   eax,DWORD PTR [rbp-0x4]
ffffffff80203fc7:	89 c2                	mov    edx,eax
ffffffff80203fc9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80203fcd:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
ffffffff80203fd0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80203fd4:	c7 40 18 28 00 00 00 	mov    DWORD PTR [rax+0x18],0x28
ffffffff80203fdb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80203fdf:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
ffffffff80203fe6:	00 
ffffffff80203fe7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80203feb:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffffffff80203fee:	89 c2                	mov    edx,eax
ffffffff80203ff0:	48 8b 05 21 13 01 00 	mov    rax,QWORD PTR [rip+0x11321]        # ffffffff80215318 <l_allocated>
ffffffff80203ff7:	48 01 d0             	add    rax,rdx
ffffffff80203ffa:	48 89 05 17 13 01 00 	mov    QWORD PTR [rip+0x11317],rax        # ffffffff80215318 <l_allocated>
ffffffff80204001:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80204005:	c9                   	leave  
ffffffff80204006:	c3                   	ret    

ffffffff80204007 <liballoc_lock>:
ffffffff80204007:	f3 0f 1e fa          	endbr64 
ffffffff8020400b:	55                   	push   rbp
ffffffff8020400c:	48 89 e5             	mov    rbp,rsp
ffffffff8020400f:	48 c7 c7 00 53 21 80 	mov    rdi,0xffffffff80215300
ffffffff80204016:	e8 fb 2a 00 00       	call   ffffffff80206b16 <Spinlock::Lock()>
ffffffff8020401b:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80204020:	5d                   	pop    rbp
ffffffff80204021:	c3                   	ret    

ffffffff80204022 <liballoc_unlock>:
ffffffff80204022:	f3 0f 1e fa          	endbr64 
ffffffff80204026:	55                   	push   rbp
ffffffff80204027:	48 89 e5             	mov    rbp,rsp
ffffffff8020402a:	48 c7 c7 00 53 21 80 	mov    rdi,0xffffffff80215300
ffffffff80204031:	e8 04 2b 00 00       	call   ffffffff80206b3a <Spinlock::Release()>
ffffffff80204036:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8020403b:	5d                   	pop    rbp
ffffffff8020403c:	c3                   	ret    

ffffffff8020403d <liballoc_alloc>:
ffffffff8020403d:	f3 0f 1e fa          	endbr64 
ffffffff80204041:	55                   	push   rbp
ffffffff80204042:	48 89 e5             	mov    rbp,rsp
ffffffff80204045:	48 83 ec 10          	sub    rsp,0x10
ffffffff80204049:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff8020404d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80204051:	48 89 c7             	mov    rdi,rax
ffffffff80204054:	e8 71 20 00 00       	call   ffffffff802060ca <PhysicalMemory::AllocPages(unsigned long)>
ffffffff80204059:	c9                   	leave  
ffffffff8020405a:	c3                   	ret    

ffffffff8020405b <liballoc_free>:
ffffffff8020405b:	f3 0f 1e fa          	endbr64 
ffffffff8020405f:	55                   	push   rbp
ffffffff80204060:	48 89 e5             	mov    rbp,rsp
ffffffff80204063:	48 83 ec 10          	sub    rsp,0x10
ffffffff80204067:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff8020406b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff8020406f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80204073:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80204077:	48 89 d6             	mov    rsi,rdx
ffffffff8020407a:	48 89 c7             	mov    rdi,rax
ffffffff8020407d:	e8 37 21 00 00       	call   ffffffff802061b9 <PhysicalMemory::FreePages(void*, unsigned long)>
ffffffff80204082:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80204087:	c9                   	leave  
ffffffff80204088:	c3                   	ret    

ffffffff80204089 <kmalloc>:
ffffffff80204089:	f3 0f 1e fa          	endbr64 
ffffffff8020408d:	55                   	push   rbp
ffffffff8020408e:	48 89 e5             	mov    rbp,rsp
ffffffff80204091:	48 83 ec 70          	sub    rsp,0x70
ffffffff80204095:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
ffffffff80204099:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff802040a0:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff802040a7:	00 
ffffffff802040a8:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffffffff802040af:	00 
ffffffff802040b0:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffffffff802040b4:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff802040b8:	48 83 45 b0 20       	add    QWORD PTR [rbp-0x50],0x20
ffffffff802040bd:	e8 45 ff ff ff       	call   ffffffff80204007 <liballoc_lock>
ffffffff802040c2:	48 83 7d b0 00       	cmp    QWORD PTR [rbp-0x50],0x0
ffffffff802040c7:	75 26                	jne    ffffffff802040ef <kmalloc+0x66>
ffffffff802040c9:	48 8b 05 58 12 01 00 	mov    rax,QWORD PTR [rip+0x11258]        # ffffffff80215328 <l_warningCount>
ffffffff802040d0:	48 83 c0 01          	add    rax,0x1
ffffffff802040d4:	48 89 05 4d 12 01 00 	mov    QWORD PTR [rip+0x1124d],rax        # ffffffff80215328 <l_warningCount>
ffffffff802040db:	e8 42 ff ff ff       	call   ffffffff80204022 <liballoc_unlock>
ffffffff802040e0:	bf 01 00 00 00       	mov    edi,0x1
ffffffff802040e5:	e8 9f ff ff ff       	call   ffffffff80204089 <kmalloc>
ffffffff802040ea:	e9 10 07 00 00       	jmp    ffffffff802047ff <kmalloc+0x776>
ffffffff802040ef:	48 8b 05 12 12 01 00 	mov    rax,QWORD PTR [rip+0x11212]        # ffffffff80215308 <l_memRoot>
ffffffff802040f6:	48 85 c0             	test   rax,rax
ffffffff802040f9:	75 2d                	jne    ffffffff80204128 <kmalloc+0x9f>
ffffffff802040fb:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff802040ff:	89 c7                	mov    edi,eax
ffffffff80204101:	e8 f6 fd ff ff       	call   ffffffff80203efc <allocate_new_page(unsigned int)>
ffffffff80204106:	48 89 05 fb 11 01 00 	mov    QWORD PTR [rip+0x111fb],rax        # ffffffff80215308 <l_memRoot>
ffffffff8020410d:	48 8b 05 f4 11 01 00 	mov    rax,QWORD PTR [rip+0x111f4]        # ffffffff80215308 <l_memRoot>
ffffffff80204114:	48 85 c0             	test   rax,rax
ffffffff80204117:	75 0f                	jne    ffffffff80204128 <kmalloc+0x9f>
ffffffff80204119:	e8 04 ff ff ff       	call   ffffffff80204022 <liballoc_unlock>
ffffffff8020411e:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80204123:	e9 d7 06 00 00       	jmp    ffffffff802047ff <kmalloc+0x776>
ffffffff80204128:	48 8b 05 d9 11 01 00 	mov    rax,QWORD PTR [rip+0x111d9]        # ffffffff80215308 <l_memRoot>
ffffffff8020412f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80204133:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff8020413a:	48 8b 05 cf 11 01 00 	mov    rax,QWORD PTR [rip+0x111cf]        # ffffffff80215310 <l_bestBet>
ffffffff80204141:	48 85 c0             	test   rax,rax
ffffffff80204144:	0f 84 9a 06 00 00    	je     ffffffff802047e4 <kmalloc+0x75b>
ffffffff8020414a:	48 8b 05 bf 11 01 00 	mov    rax,QWORD PTR [rip+0x111bf]        # ffffffff80215310 <l_bestBet>
ffffffff80204151:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
ffffffff80204154:	48 8b 05 b5 11 01 00 	mov    rax,QWORD PTR [rip+0x111b5]        # ffffffff80215310 <l_bestBet>
ffffffff8020415b:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffffffff8020415e:	29 c2                	sub    edx,eax
ffffffff80204160:	89 d0                	mov    eax,edx
ffffffff80204162:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80204166:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff8020416a:	48 83 c0 28          	add    rax,0x28
ffffffff8020416e:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
ffffffff80204172:	0f 86 6c 06 00 00    	jbe    ffffffff802047e4 <kmalloc+0x75b>
ffffffff80204178:	48 8b 05 91 11 01 00 	mov    rax,QWORD PTR [rip+0x11191]        # ffffffff80215310 <l_bestBet>
ffffffff8020417f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80204183:	c7 45 fc 01 00 00 00 	mov    DWORD PTR [rbp-0x4],0x1
ffffffff8020418a:	e9 55 06 00 00       	jmp    ffffffff802047e4 <kmalloc+0x75b>
ffffffff8020418f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80204193:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
ffffffff80204196:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff8020419a:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffffffff8020419d:	29 c2                	sub    edx,eax
ffffffff8020419f:	89 d0                	mov    eax,edx
ffffffff802041a1:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffffffff802041a5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff802041a9:	48 3b 45 a8          	cmp    rax,QWORD PTR [rbp-0x58]
ffffffff802041ad:	73 13                	jae    ffffffff802041c2 <kmalloc+0x139>
ffffffff802041af:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff802041b3:	48 89 05 56 11 01 00 	mov    QWORD PTR [rip+0x11156],rax        # ffffffff80215310 <l_bestBet>
ffffffff802041ba:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff802041be:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff802041c2:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff802041c6:	48 83 c0 28          	add    rax,0x28
ffffffff802041ca:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffffffff802041ce:	73 7a                	jae    ffffffff8020424a <kmalloc+0x1c1>
ffffffff802041d0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff802041d4:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff802041d8:	48 85 c0             	test   rax,rax
ffffffff802041db:	74 11                	je     ffffffff802041ee <kmalloc+0x165>
ffffffff802041dd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff802041e1:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff802041e5:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff802041e9:	e9 f6 05 00 00       	jmp    ffffffff802047e4 <kmalloc+0x75b>
ffffffff802041ee:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
ffffffff802041f2:	75 17                	jne    ffffffff8020420b <kmalloc+0x182>
ffffffff802041f4:	48 8b 05 0d 11 01 00 	mov    rax,QWORD PTR [rip+0x1110d]        # ffffffff80215308 <l_memRoot>
ffffffff802041fb:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff802041ff:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff80204206:	e9 d9 05 00 00       	jmp    ffffffff802047e4 <kmalloc+0x75b>
ffffffff8020420b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff8020420f:	89 c7                	mov    edi,eax
ffffffff80204211:	e8 e6 fc ff ff       	call   ffffffff80203efc <allocate_new_page(unsigned int)>
ffffffff80204216:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff8020421a:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
ffffffff8020421e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80204222:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80204226:	48 85 c0             	test   rax,rax
ffffffff80204229:	0f 84 c2 05 00 00    	je     ffffffff802047f1 <kmalloc+0x768>
ffffffff8020422f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80204233:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80204237:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff8020423b:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff8020423e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80204242:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80204246:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff8020424a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff8020424e:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff80204252:	48 85 c0             	test   rax,rax
ffffffff80204255:	0f 85 04 01 00 00    	jne    ffffffff8020435f <kmalloc+0x2d6>
ffffffff8020425b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff8020425f:	48 83 c0 28          	add    rax,0x28
ffffffff80204263:	48 89 c2             	mov    rdx,rax
ffffffff80204266:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff8020426a:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
ffffffff8020426e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80204272:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff80204276:	c7 40 18 de c0 01 c0 	mov    DWORD PTR [rax+0x18],0xc001c0de
ffffffff8020427d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80204281:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff80204285:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
ffffffff8020428c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80204290:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff80204294:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffffffff8020429b:	00 
ffffffff8020429c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff802042a0:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff802042a4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff802042a8:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
ffffffff802042ac:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff802042b0:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff802042b4:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffffffff802042b8:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
ffffffff802042bb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff802042bf:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff802042c3:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffffffff802042c7:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
ffffffff802042ca:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff802042ce:	8b 50 18             	mov    edx,DWORD PTR [rax+0x18]
ffffffff802042d1:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff802042d5:	01 d0                	add    eax,edx
ffffffff802042d7:	8d 50 28             	lea    edx,[rax+0x28]
ffffffff802042da:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff802042de:	89 50 18             	mov    DWORD PTR [rax+0x18],edx
ffffffff802042e1:	48 8b 15 38 10 01 00 	mov    rdx,QWORD PTR [rip+0x11038]        # ffffffff80215320 <l_inuse>
ffffffff802042e8:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff802042ec:	48 01 d0             	add    rax,rdx
ffffffff802042ef:	48 89 05 2a 10 01 00 	mov    QWORD PTR [rip+0x1102a],rax        # ffffffff80215320 <l_inuse>
ffffffff802042f6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff802042fa:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff802042fe:	48 83 c0 28          	add    rax,0x28
ffffffff80204302:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80204306:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8020430a:	48 83 c0 10          	add    rax,0x10
ffffffff8020430e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80204312:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204316:	83 e0 0f             	and    eax,0xf
ffffffff80204319:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff8020431d:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
ffffffff80204322:	74 1c                	je     ffffffff80204340 <kmalloc+0x2b7>
ffffffff80204324:	b8 10 00 00 00       	mov    eax,0x10
ffffffff80204329:	48 2b 45 d0          	sub    rax,QWORD PTR [rbp-0x30]
ffffffff8020432d:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff80204331:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80204335:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80204339:	48 01 d0             	add    rax,rdx
ffffffff8020433c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80204340:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80204344:	8d 50 10             	lea    edx,[rax+0x10]
ffffffff80204347:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8020434b:	48 83 e8 10          	sub    rax,0x10
ffffffff8020434f:	88 10                	mov    BYTE PTR [rax],dl
ffffffff80204351:	e8 cc fc ff ff       	call   ffffffff80204022 <liballoc_unlock>
ffffffff80204356:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8020435a:	e9 a0 04 00 00       	jmp    ffffffff802047ff <kmalloc+0x776>
ffffffff8020435f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80204363:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff80204367:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffffffff8020436b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff8020436f:	48 29 45 a8          	sub    QWORD PTR [rbp-0x58],rax
ffffffff80204373:	48 83 6d a8 28       	sub    QWORD PTR [rbp-0x58],0x28
ffffffff80204378:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff8020437c:	48 83 c0 28          	add    rax,0x28
ffffffff80204380:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffffffff80204384:	0f 82 1e 01 00 00    	jb     ffffffff802044a8 <kmalloc+0x41f>
ffffffff8020438a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff8020438e:	48 8d 50 28          	lea    rdx,[rax+0x28]
ffffffff80204392:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80204396:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff8020439a:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff8020439d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff802043a1:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff802043a5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff802043a8:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff802043ac:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffffffff802043b0:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
ffffffff802043b4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff802043b8:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff802043bc:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff802043bf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff802043c3:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
ffffffff802043c7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff802043cb:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff802043cf:	c7 40 18 de c0 01 c0 	mov    DWORD PTR [rax+0x18],0xc001c0de
ffffffff802043d6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff802043da:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff802043de:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
ffffffff802043e5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff802043e9:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff802043ed:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff802043f1:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
ffffffff802043f5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff802043f9:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff802043fd:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffffffff80204401:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
ffffffff80204404:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80204408:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff8020440c:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
ffffffff80204410:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
ffffffff80204413:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80204417:	8b 50 18             	mov    edx,DWORD PTR [rax+0x18]
ffffffff8020441a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff8020441e:	01 d0                	add    eax,edx
ffffffff80204420:	8d 50 28             	lea    edx,[rax+0x28]
ffffffff80204423:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80204427:	89 50 18             	mov    DWORD PTR [rax+0x18],edx
ffffffff8020442a:	48 8b 15 ef 0e 01 00 	mov    rdx,QWORD PTR [rip+0x10eef]        # ffffffff80215320 <l_inuse>
ffffffff80204431:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff80204435:	48 01 d0             	add    rax,rdx
ffffffff80204438:	48 89 05 e1 0e 01 00 	mov    QWORD PTR [rip+0x10ee1],rax        # ffffffff80215320 <l_inuse>
ffffffff8020443f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80204443:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff80204447:	48 83 c0 28          	add    rax,0x28
ffffffff8020444b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff8020444f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204453:	48 83 c0 10          	add    rax,0x10
ffffffff80204457:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff8020445b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8020445f:	83 e0 0f             	and    eax,0xf
ffffffff80204462:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffffffff80204466:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffffffff8020446b:	74 1c                	je     ffffffff80204489 <kmalloc+0x400>
ffffffff8020446d:	b8 10 00 00 00       	mov    eax,0x10
ffffffff80204472:	48 2b 45 c8          	sub    rax,QWORD PTR [rbp-0x38]
ffffffff80204476:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffffffff8020447a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff8020447e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80204482:	48 01 d0             	add    rax,rdx
ffffffff80204485:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80204489:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff8020448d:	8d 50 10             	lea    edx,[rax+0x10]
ffffffff80204490:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204494:	48 83 e8 10          	sub    rax,0x10
ffffffff80204498:	88 10                	mov    BYTE PTR [rax],dl
ffffffff8020449a:	e8 83 fb ff ff       	call   ffffffff80204022 <liballoc_unlock>
ffffffff8020449f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff802044a3:	e9 57 03 00 00       	jmp    ffffffff802047ff <kmalloc+0x776>
ffffffff802044a8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff802044ac:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff802044b0:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff802044b4:	e9 be 02 00 00       	jmp    ffffffff80204777 <kmalloc+0x6ee>
ffffffff802044b9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff802044bd:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff802044c1:	48 85 c0             	test   rax,rax
ffffffff802044c4:	0f 85 48 01 00 00    	jne    ffffffff80204612 <kmalloc+0x589>
ffffffff802044ca:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff802044ce:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffffffff802044d1:	89 c2                	mov    edx,eax
ffffffff802044d3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff802044d7:	48 01 d0             	add    rax,rdx
ffffffff802044da:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffffffff802044de:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff802044e2:	48 29 45 a8          	sub    QWORD PTR [rbp-0x58],rax
ffffffff802044e6:	48 83 6d a8 28       	sub    QWORD PTR [rbp-0x58],0x28
ffffffff802044eb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff802044ef:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffffffff802044f2:	89 c0                	mov    eax,eax
ffffffff802044f4:	48 29 45 a8          	sub    QWORD PTR [rbp-0x58],rax
ffffffff802044f8:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff802044fc:	48 83 c0 28          	add    rax,0x28
ffffffff80204500:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffffffff80204504:	0f 82 08 01 00 00    	jb     ffffffff80204612 <kmalloc+0x589>
ffffffff8020450a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff8020450e:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffffffff80204511:	89 c2                	mov    edx,eax
ffffffff80204513:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80204517:	48 01 d0             	add    rax,rdx
ffffffff8020451a:	48 83 c0 28          	add    rax,0x28
ffffffff8020451e:	48 89 c2             	mov    rdx,rax
ffffffff80204521:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80204525:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
ffffffff80204529:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff8020452d:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80204531:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff80204535:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff80204538:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff8020453c:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80204540:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff80204544:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80204548:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffffffff8020454f:	00 
ffffffff80204550:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80204554:	c7 40 18 de c0 01 c0 	mov    DWORD PTR [rax+0x18],0xc001c0de
ffffffff8020455b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff8020455f:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff80204563:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
ffffffff80204567:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff8020456b:	89 c2                	mov    edx,eax
ffffffff8020456d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80204571:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
ffffffff80204574:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffffffff80204578:	89 c2                	mov    edx,eax
ffffffff8020457a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff8020457e:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
ffffffff80204581:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80204585:	8b 50 18             	mov    edx,DWORD PTR [rax+0x18]
ffffffff80204588:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff8020458c:	01 d0                	add    eax,edx
ffffffff8020458e:	8d 50 28             	lea    edx,[rax+0x28]
ffffffff80204591:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80204595:	89 50 18             	mov    DWORD PTR [rax+0x18],edx
ffffffff80204598:	48 8b 15 81 0d 01 00 	mov    rdx,QWORD PTR [rip+0x10d81]        # ffffffff80215320 <l_inuse>
ffffffff8020459f:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff802045a3:	48 01 d0             	add    rax,rdx
ffffffff802045a6:	48 89 05 73 0d 01 00 	mov    QWORD PTR [rip+0x10d73],rax        # ffffffff80215320 <l_inuse>
ffffffff802045ad:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff802045b1:	48 83 c0 28          	add    rax,0x28
ffffffff802045b5:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff802045b9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff802045bd:	48 83 c0 10          	add    rax,0x10
ffffffff802045c1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff802045c5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff802045c9:	83 e0 0f             	and    eax,0xf
ffffffff802045cc:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff802045d0:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
ffffffff802045d5:	74 1c                	je     ffffffff802045f3 <kmalloc+0x56a>
ffffffff802045d7:	b8 10 00 00 00       	mov    eax,0x10
ffffffff802045dc:	48 2b 45 c0          	sub    rax,QWORD PTR [rbp-0x40]
ffffffff802045e0:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff802045e4:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff802045e8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff802045ec:	48 01 d0             	add    rax,rdx
ffffffff802045ef:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff802045f3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff802045f7:	8d 50 10             	lea    edx,[rax+0x10]
ffffffff802045fa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff802045fe:	48 83 e8 10          	sub    rax,0x10
ffffffff80204602:	88 10                	mov    BYTE PTR [rax],dl
ffffffff80204604:	e8 19 fa ff ff       	call   ffffffff80204022 <liballoc_unlock>
ffffffff80204609:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8020460d:	e9 ed 01 00 00       	jmp    ffffffff802047ff <kmalloc+0x776>
ffffffff80204612:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80204616:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff8020461a:	48 85 c0             	test   rax,rax
ffffffff8020461d:	0f 84 48 01 00 00    	je     ffffffff8020476b <kmalloc+0x6e2>
ffffffff80204623:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80204627:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff8020462b:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffffffff8020462f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80204633:	48 29 45 a8          	sub    QWORD PTR [rbp-0x58],rax
ffffffff80204637:	48 83 6d a8 28       	sub    QWORD PTR [rbp-0x58],0x28
ffffffff8020463c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80204640:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffffffff80204643:	89 c0                	mov    eax,eax
ffffffff80204645:	48 29 45 a8          	sub    QWORD PTR [rbp-0x58],rax
ffffffff80204649:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff8020464d:	48 83 c0 28          	add    rax,0x28
ffffffff80204651:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffffffff80204655:	0f 82 10 01 00 00    	jb     ffffffff8020476b <kmalloc+0x6e2>
ffffffff8020465b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff8020465f:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffffffff80204662:	89 c2                	mov    edx,eax
ffffffff80204664:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80204668:	48 01 d0             	add    rax,rdx
ffffffff8020466b:	48 83 c0 28          	add    rax,0x28
ffffffff8020466f:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
ffffffff80204673:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff80204677:	c7 40 18 de c0 01 c0 	mov    DWORD PTR [rax+0x18],0xc001c0de
ffffffff8020467e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80204682:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80204686:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff8020468a:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
ffffffff8020468e:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff80204692:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff80204696:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff80204699:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff8020469d:	89 c2                	mov    edx,eax
ffffffff8020469f:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff802046a3:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
ffffffff802046a6:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffffffff802046aa:	89 c2                	mov    edx,eax
ffffffff802046ac:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff802046b0:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
ffffffff802046b3:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff802046b7:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff802046bb:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
ffffffff802046bf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff802046c3:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff802046c7:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffffffff802046cb:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff802046ce:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff802046d2:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
ffffffff802046d6:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
ffffffff802046da:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff802046de:	8b 50 18             	mov    edx,DWORD PTR [rax+0x18]
ffffffff802046e1:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff802046e5:	01 d0                	add    eax,edx
ffffffff802046e7:	8d 50 28             	lea    edx,[rax+0x28]
ffffffff802046ea:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff802046ee:	89 50 18             	mov    DWORD PTR [rax+0x18],edx
ffffffff802046f1:	48 8b 15 28 0c 01 00 	mov    rdx,QWORD PTR [rip+0x10c28]        # ffffffff80215320 <l_inuse>
ffffffff802046f8:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff802046fc:	48 01 d0             	add    rax,rdx
ffffffff802046ff:	48 89 05 1a 0c 01 00 	mov    QWORD PTR [rip+0x10c1a],rax        # ffffffff80215320 <l_inuse>
ffffffff80204706:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff8020470a:	48 83 c0 28          	add    rax,0x28
ffffffff8020470e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80204712:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204716:	48 83 c0 10          	add    rax,0x10
ffffffff8020471a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff8020471e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204722:	83 e0 0f             	and    eax,0xf
ffffffff80204725:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff80204729:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
ffffffff8020472e:	74 1c                	je     ffffffff8020474c <kmalloc+0x6c3>
ffffffff80204730:	b8 10 00 00 00       	mov    eax,0x10
ffffffff80204735:	48 2b 45 b8          	sub    rax,QWORD PTR [rbp-0x48]
ffffffff80204739:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff8020473d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80204741:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff80204745:	48 01 d0             	add    rax,rdx
ffffffff80204748:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff8020474c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff80204750:	8d 50 10             	lea    edx,[rax+0x10]
ffffffff80204753:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204757:	48 83 e8 10          	sub    rax,0x10
ffffffff8020475b:	88 10                	mov    BYTE PTR [rax],dl
ffffffff8020475d:	e8 c0 f8 ff ff       	call   ffffffff80204022 <liballoc_unlock>
ffffffff80204762:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204766:	e9 94 00 00 00       	jmp    ffffffff802047ff <kmalloc+0x776>
ffffffff8020476b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff8020476f:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80204773:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff80204777:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffffffff8020477c:	0f 85 37 fd ff ff    	jne    ffffffff802044b9 <kmalloc+0x430>
ffffffff80204782:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80204786:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff8020478a:	48 85 c0             	test   rax,rax
ffffffff8020478d:	75 49                	jne    ffffffff802047d8 <kmalloc+0x74f>
ffffffff8020478f:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
ffffffff80204793:	75 14                	jne    ffffffff802047a9 <kmalloc+0x720>
ffffffff80204795:	48 8b 05 6c 0b 01 00 	mov    rax,QWORD PTR [rip+0x10b6c]        # ffffffff80215308 <l_memRoot>
ffffffff8020479c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff802047a0:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff802047a7:	eb 3b                	jmp    ffffffff802047e4 <kmalloc+0x75b>
ffffffff802047a9:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff802047ad:	89 c7                	mov    edi,eax
ffffffff802047af:	e8 48 f7 ff ff       	call   ffffffff80203efc <allocate_new_page(unsigned int)>
ffffffff802047b4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff802047b8:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
ffffffff802047bc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff802047c0:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff802047c4:	48 85 c0             	test   rax,rax
ffffffff802047c7:	74 2b                	je     ffffffff802047f4 <kmalloc+0x76b>
ffffffff802047c9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff802047cd:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff802047d1:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff802047d5:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff802047d8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff802047dc:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff802047e0:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff802047e4:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffffffff802047e9:	0f 85 a0 f9 ff ff    	jne    ffffffff8020418f <kmalloc+0x106>
ffffffff802047ef:	eb 04                	jmp    ffffffff802047f5 <kmalloc+0x76c>
ffffffff802047f1:	90                   	nop
ffffffff802047f2:	eb 01                	jmp    ffffffff802047f5 <kmalloc+0x76c>
ffffffff802047f4:	90                   	nop
ffffffff802047f5:	e8 28 f8 ff ff       	call   ffffffff80204022 <liballoc_unlock>
ffffffff802047fa:	b8 00 00 00 00       	mov    eax,0x0
ffffffff802047ff:	c9                   	leave  
ffffffff80204800:	c3                   	ret    

ffffffff80204801 <kfree>:
ffffffff80204801:	f3 0f 1e fa          	endbr64 
ffffffff80204805:	55                   	push   rbp
ffffffff80204806:	48 89 e5             	mov    rbp,rsp
ffffffff80204809:	48 83 ec 30          	sub    rsp,0x30
ffffffff8020480d:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff80204811:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffffffff80204816:	75 17                	jne    ffffffff8020482f <kfree+0x2e>
ffffffff80204818:	48 8b 05 09 0b 01 00 	mov    rax,QWORD PTR [rip+0x10b09]        # ffffffff80215328 <l_warningCount>
ffffffff8020481f:	48 83 c0 01          	add    rax,0x1
ffffffff80204823:	48 89 05 fe 0a 01 00 	mov    QWORD PTR [rip+0x10afe],rax        # ffffffff80215328 <l_warningCount>
ffffffff8020482a:	e9 60 02 00 00       	jmp    ffffffff80204a8f <kfree+0x28e>
ffffffff8020482f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80204833:	48 83 e8 10          	sub    rax,0x10
ffffffff80204837:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff8020483a:	48 0f be c0          	movsx  rax,al
ffffffff8020483e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80204842:	48 83 7d f8 1f       	cmp    QWORD PTR [rbp-0x8],0x1f
ffffffff80204847:	77 0c                	ja     ffffffff80204855 <kfree+0x54>
ffffffff80204849:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff8020484d:	48 2b 45 f8          	sub    rax,QWORD PTR [rbp-0x8]
ffffffff80204851:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff80204855:	e8 ad f7 ff ff       	call   ffffffff80204007 <liballoc_lock>
ffffffff8020485a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff8020485e:	48 83 e8 28          	sub    rax,0x28
ffffffff80204862:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80204866:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8020486a:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffffffff8020486d:	3d de c0 01 c0       	cmp    eax,0xc001c0de
ffffffff80204872:	74 63                	je     ffffffff802048d7 <kfree+0xd6>
ffffffff80204874:	48 8b 05 b5 0a 01 00 	mov    rax,QWORD PTR [rip+0x10ab5]        # ffffffff80215330 <l_errorCount>
ffffffff8020487b:	48 83 c0 01          	add    rax,0x1
ffffffff8020487f:	48 89 05 aa 0a 01 00 	mov    QWORD PTR [rip+0x10aaa],rax        # ffffffff80215330 <l_errorCount>
ffffffff80204886:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8020488a:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffffffff8020488d:	25 ff ff ff 00       	and    eax,0xffffff
ffffffff80204892:	3d de c0 01 00       	cmp    eax,0x1c0de
ffffffff80204897:	74 22                	je     ffffffff802048bb <kfree+0xba>
ffffffff80204899:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8020489d:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffffffff802048a0:	0f b7 c0             	movzx  eax,ax
ffffffff802048a3:	3d de c0 00 00       	cmp    eax,0xc0de
ffffffff802048a8:	74 11                	je     ffffffff802048bb <kfree+0xba>
ffffffff802048aa:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff802048ae:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffffffff802048b1:	0f b6 c0             	movzx  eax,al
ffffffff802048b4:	3d de 00 00 00       	cmp    eax,0xde
ffffffff802048b9:	75 12                	jne    ffffffff802048cd <kfree+0xcc>
ffffffff802048bb:	48 8b 05 76 0a 01 00 	mov    rax,QWORD PTR [rip+0x10a76]        # ffffffff80215338 <l_possibleOverruns>
ffffffff802048c2:	48 83 c0 01          	add    rax,0x1
ffffffff802048c6:	48 89 05 6b 0a 01 00 	mov    QWORD PTR [rip+0x10a6b],rax        # ffffffff80215338 <l_possibleOverruns>
ffffffff802048cd:	e8 50 f7 ff ff       	call   ffffffff80204022 <liballoc_unlock>
ffffffff802048d2:	e9 b8 01 00 00       	jmp    ffffffff80204a8f <kfree+0x28e>
ffffffff802048d7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff802048db:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff802048df:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff802048e3:	48 8b 15 36 0a 01 00 	mov    rdx,QWORD PTR [rip+0x10a36]        # ffffffff80215320 <l_inuse>
ffffffff802048ea:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff802048ee:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
ffffffff802048f1:	89 c1                	mov    ecx,eax
ffffffff802048f3:	48 89 d0             	mov    rax,rdx
ffffffff802048f6:	48 29 c8             	sub    rax,rcx
ffffffff802048f9:	48 89 05 20 0a 01 00 	mov    QWORD PTR [rip+0x10a20],rax        # ffffffff80215320 <l_inuse>
ffffffff80204900:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204904:	8b 50 18             	mov    edx,DWORD PTR [rax+0x18]
ffffffff80204907:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8020490b:	8b 48 1c             	mov    ecx,DWORD PTR [rax+0x1c]
ffffffff8020490e:	89 d0                	mov    eax,edx
ffffffff80204910:	29 c8                	sub    eax,ecx
ffffffff80204912:	8d 50 d8             	lea    edx,[rax-0x28]
ffffffff80204915:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204919:	89 50 18             	mov    DWORD PTR [rax+0x18],edx
ffffffff8020491c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80204920:	c7 40 18 ad de ad de 	mov    DWORD PTR [rax+0x18],0xdeaddead
ffffffff80204927:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8020492b:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff8020492f:	48 85 c0             	test   rax,rax
ffffffff80204932:	74 12                	je     ffffffff80204946 <kfree+0x145>
ffffffff80204934:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80204938:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff8020493c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80204940:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffffffff80204943:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff80204946:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8020494a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8020494d:	48 85 c0             	test   rax,rax
ffffffff80204950:	74 13                	je     ffffffff80204965 <kfree+0x164>
ffffffff80204952:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80204956:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80204959:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff8020495d:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffffffff80204961:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
ffffffff80204965:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80204969:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8020496c:	48 85 c0             	test   rax,rax
ffffffff8020496f:	75 10                	jne    ffffffff80204981 <kfree+0x180>
ffffffff80204971:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80204975:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80204979:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8020497d:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
ffffffff80204981:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204985:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff80204989:	48 85 c0             	test   rax,rax
ffffffff8020498c:	0f 85 a9 00 00 00    	jne    ffffffff80204a3b <kfree+0x23a>
ffffffff80204992:	48 8b 05 6f 09 01 00 	mov    rax,QWORD PTR [rip+0x1096f]        # ffffffff80215308 <l_memRoot>
ffffffff80204999:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffffffff8020499d:	75 0f                	jne    ffffffff802049ae <kfree+0x1ad>
ffffffff8020499f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff802049a3:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff802049a7:	48 89 05 5a 09 01 00 	mov    QWORD PTR [rip+0x1095a],rax        # ffffffff80215308 <l_memRoot>
ffffffff802049ae:	48 8b 05 5b 09 01 00 	mov    rax,QWORD PTR [rip+0x1095b]        # ffffffff80215310 <l_bestBet>
ffffffff802049b5:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffffffff802049b9:	75 0b                	jne    ffffffff802049c6 <kfree+0x1c5>
ffffffff802049bb:	48 c7 05 4a 09 01 00 	mov    QWORD PTR [rip+0x1094a],0x0        # ffffffff80215310 <l_bestBet>
ffffffff802049c2:	00 00 00 00 
ffffffff802049c6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff802049ca:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff802049cd:	48 85 c0             	test   rax,rax
ffffffff802049d0:	74 13                	je     ffffffff802049e5 <kfree+0x1e4>
ffffffff802049d2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff802049d6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff802049d9:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff802049dd:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffffffff802049e1:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
ffffffff802049e5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff802049e9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff802049ed:	48 85 c0             	test   rax,rax
ffffffff802049f0:	74 12                	je     ffffffff80204a04 <kfree+0x203>
ffffffff802049f2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff802049f6:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff802049fa:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff802049fe:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffffffff80204a01:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff80204a04:	48 8b 15 0d 09 01 00 	mov    rdx,QWORD PTR [rip+0x1090d]        # ffffffff80215318 <l_allocated>
ffffffff80204a0b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204a0f:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffffffff80204a12:	89 c1                	mov    ecx,eax
ffffffff80204a14:	48 89 d0             	mov    rax,rdx
ffffffff80204a17:	48 29 c8             	sub    rax,rcx
ffffffff80204a1a:	48 89 05 f7 08 01 00 	mov    QWORD PTR [rip+0x108f7],rax        # ffffffff80215318 <l_allocated>
ffffffff80204a21:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204a25:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffffffff80204a28:	89 c2                	mov    edx,eax
ffffffff80204a2a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204a2e:	48 89 d6             	mov    rsi,rdx
ffffffff80204a31:	48 89 c7             	mov    rdi,rax
ffffffff80204a34:	e8 22 f6 ff ff       	call   ffffffff8020405b <liballoc_free>
ffffffff80204a39:	eb 4f                	jmp    ffffffff80204a8a <kfree+0x289>
ffffffff80204a3b:	48 8b 05 ce 08 01 00 	mov    rax,QWORD PTR [rip+0x108ce]        # ffffffff80215310 <l_bestBet>
ffffffff80204a42:	48 85 c0             	test   rax,rax
ffffffff80204a45:	74 43                	je     ffffffff80204a8a <kfree+0x289>
ffffffff80204a47:	48 8b 05 c2 08 01 00 	mov    rax,QWORD PTR [rip+0x108c2]        # ffffffff80215310 <l_bestBet>
ffffffff80204a4e:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
ffffffff80204a51:	48 8b 05 b8 08 01 00 	mov    rax,QWORD PTR [rip+0x108b8]        # ffffffff80215310 <l_bestBet>
ffffffff80204a58:	8b 48 18             	mov    ecx,DWORD PTR [rax+0x18]
ffffffff80204a5b:	89 d0                	mov    eax,edx
ffffffff80204a5d:	29 c8                	sub    eax,ecx
ffffffff80204a5f:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
ffffffff80204a62:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204a66:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
ffffffff80204a69:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204a6d:	8b 48 18             	mov    ecx,DWORD PTR [rax+0x18]
ffffffff80204a70:	89 d0                	mov    eax,edx
ffffffff80204a72:	29 c8                	sub    eax,ecx
ffffffff80204a74:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffffffff80204a77:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffffffff80204a7a:	3b 45 e4             	cmp    eax,DWORD PTR [rbp-0x1c]
ffffffff80204a7d:	7e 0b                	jle    ffffffff80204a8a <kfree+0x289>
ffffffff80204a7f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204a83:	48 89 05 86 08 01 00 	mov    QWORD PTR [rip+0x10886],rax        # ffffffff80215310 <l_bestBet>
ffffffff80204a8a:	e8 93 f5 ff ff       	call   ffffffff80204022 <liballoc_unlock>
ffffffff80204a8f:	c9                   	leave  
ffffffff80204a90:	c3                   	ret    

ffffffff80204a91 <kcalloc>:
ffffffff80204a91:	f3 0f 1e fa          	endbr64 
ffffffff80204a95:	55                   	push   rbp
ffffffff80204a96:	48 89 e5             	mov    rbp,rsp
ffffffff80204a99:	48 83 ec 20          	sub    rsp,0x20
ffffffff80204a9d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80204aa1:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff80204aa5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204aa9:	89 c2                	mov    edx,eax
ffffffff80204aab:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80204aaf:	0f af c2             	imul   eax,edx
ffffffff80204ab2:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80204ab5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80204ab8:	48 98                	cdqe   
ffffffff80204aba:	48 89 c7             	mov    rdi,rax
ffffffff80204abd:	e8 c7 f5 ff ff       	call   ffffffff80204089 <kmalloc>
ffffffff80204ac2:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80204ac6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80204ac9:	48 63 d0             	movsxd rdx,eax
ffffffff80204acc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80204ad0:	be 00 00 00 00       	mov    esi,0x0
ffffffff80204ad5:	48 89 c7             	mov    rdi,rax
ffffffff80204ad8:	e8 4a f3 ff ff       	call   ffffffff80203e27 <liballoc_memset(void*, int, unsigned long)>
ffffffff80204add:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80204ae1:	c9                   	leave  
ffffffff80204ae2:	c3                   	ret    

ffffffff80204ae3 <krealloc>:
ffffffff80204ae3:	f3 0f 1e fa          	endbr64 
ffffffff80204ae7:	55                   	push   rbp
ffffffff80204ae8:	48 89 e5             	mov    rbp,rsp
ffffffff80204aeb:	48 83 ec 30          	sub    rsp,0x30
ffffffff80204aef:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff80204af3:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffffffff80204af7:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
ffffffff80204afc:	75 16                	jne    ffffffff80204b14 <krealloc+0x31>
ffffffff80204afe:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80204b02:	48 89 c7             	mov    rdi,rax
ffffffff80204b05:	e8 f7 fc ff ff       	call   ffffffff80204801 <kfree>
ffffffff80204b0a:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80204b0f:	e9 30 01 00 00       	jmp    ffffffff80204c44 <krealloc+0x161>
ffffffff80204b14:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffffffff80204b19:	75 11                	jne    ffffffff80204b2c <krealloc+0x49>
ffffffff80204b1b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80204b1f:	48 89 c7             	mov    rdi,rax
ffffffff80204b22:	e8 62 f5 ff ff       	call   ffffffff80204089 <kmalloc>
ffffffff80204b27:	e9 18 01 00 00       	jmp    ffffffff80204c44 <krealloc+0x161>
ffffffff80204b2c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80204b30:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80204b34:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80204b38:	48 83 e8 10          	sub    rax,0x10
ffffffff80204b3c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80204b3f:	48 0f be c0          	movsx  rax,al
ffffffff80204b43:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80204b47:	48 83 7d f0 1f       	cmp    QWORD PTR [rbp-0x10],0x1f
ffffffff80204b4c:	77 0c                	ja     ffffffff80204b5a <krealloc+0x77>
ffffffff80204b4e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80204b52:	48 2b 45 f0          	sub    rax,QWORD PTR [rbp-0x10]
ffffffff80204b56:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80204b5a:	e8 a8 f4 ff ff       	call   ffffffff80204007 <liballoc_lock>
ffffffff80204b5f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80204b63:	48 83 e8 28          	sub    rax,0x28
ffffffff80204b67:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80204b6b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204b6f:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffffffff80204b72:	3d de c0 01 c0       	cmp    eax,0xc001c0de
ffffffff80204b77:	74 65                	je     ffffffff80204bde <krealloc+0xfb>
ffffffff80204b79:	48 8b 05 b0 07 01 00 	mov    rax,QWORD PTR [rip+0x107b0]        # ffffffff80215330 <l_errorCount>
ffffffff80204b80:	48 83 c0 01          	add    rax,0x1
ffffffff80204b84:	48 89 05 a5 07 01 00 	mov    QWORD PTR [rip+0x107a5],rax        # ffffffff80215330 <l_errorCount>
ffffffff80204b8b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204b8f:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffffffff80204b92:	25 ff ff ff 00       	and    eax,0xffffff
ffffffff80204b97:	3d de c0 01 00       	cmp    eax,0x1c0de
ffffffff80204b9c:	74 22                	je     ffffffff80204bc0 <krealloc+0xdd>
ffffffff80204b9e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204ba2:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffffffff80204ba5:	0f b7 c0             	movzx  eax,ax
ffffffff80204ba8:	3d de c0 00 00       	cmp    eax,0xc0de
ffffffff80204bad:	74 11                	je     ffffffff80204bc0 <krealloc+0xdd>
ffffffff80204baf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204bb3:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffffffff80204bb6:	0f b6 c0             	movzx  eax,al
ffffffff80204bb9:	3d de 00 00 00       	cmp    eax,0xde
ffffffff80204bbe:	75 12                	jne    ffffffff80204bd2 <krealloc+0xef>
ffffffff80204bc0:	48 8b 05 71 07 01 00 	mov    rax,QWORD PTR [rip+0x10771]        # ffffffff80215338 <l_possibleOverruns>
ffffffff80204bc7:	48 83 c0 01          	add    rax,0x1
ffffffff80204bcb:	48 89 05 66 07 01 00 	mov    QWORD PTR [rip+0x10766],rax        # ffffffff80215338 <l_possibleOverruns>
ffffffff80204bd2:	e8 4b f4 ff ff       	call   ffffffff80204022 <liballoc_unlock>
ffffffff80204bd7:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80204bdc:	eb 66                	jmp    ffffffff80204c44 <krealloc+0x161>
ffffffff80204bde:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204be2:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
ffffffff80204be5:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
ffffffff80204be8:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff80204beb:	48 39 45 d0          	cmp    QWORD PTR [rbp-0x30],rax
ffffffff80204bef:	77 18                	ja     ffffffff80204c09 <krealloc+0x126>
ffffffff80204bf1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80204bf5:	89 c2                	mov    edx,eax
ffffffff80204bf7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204bfb:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
ffffffff80204bfe:	e8 1f f4 ff ff       	call   ffffffff80204022 <liballoc_unlock>
ffffffff80204c03:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80204c07:	eb 3b                	jmp    ffffffff80204c44 <krealloc+0x161>
ffffffff80204c09:	e8 14 f4 ff ff       	call   ffffffff80204022 <liballoc_unlock>
ffffffff80204c0e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80204c12:	48 89 c7             	mov    rdi,rax
ffffffff80204c15:	e8 6f f4 ff ff       	call   ffffffff80204089 <kmalloc>
ffffffff80204c1a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80204c1e:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffffffff80204c21:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff80204c25:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80204c29:	48 89 ce             	mov    rsi,rcx
ffffffff80204c2c:	48 89 c7             	mov    rdi,rax
ffffffff80204c2f:	e8 35 f2 ff ff       	call   ffffffff80203e69 <liballoc_memcpy(void*, void const*, unsigned long)>
ffffffff80204c34:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80204c38:	48 89 c7             	mov    rdi,rax
ffffffff80204c3b:	e8 c1 fb ff ff       	call   ffffffff80204801 <kfree>
ffffffff80204c40:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80204c44:	c9                   	leave  
ffffffff80204c45:	c3                   	ret    

ffffffff80204c46 <operator new[](unsigned long)>:
ffffffff80204c46:	f3 0f 1e fa          	endbr64 
ffffffff80204c4a:	55                   	push   rbp
ffffffff80204c4b:	48 89 e5             	mov    rbp,rsp
ffffffff80204c4e:	48 83 ec 10          	sub    rsp,0x10
ffffffff80204c52:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80204c56:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80204c5a:	48 89 c7             	mov    rdi,rax
ffffffff80204c5d:	e8 27 f4 ff ff       	call   ffffffff80204089 <kmalloc>
ffffffff80204c62:	c9                   	leave  
ffffffff80204c63:	c3                   	ret    

ffffffff80204c64 <operator new(unsigned long)>:
ffffffff80204c64:	f3 0f 1e fa          	endbr64 
ffffffff80204c68:	55                   	push   rbp
ffffffff80204c69:	48 89 e5             	mov    rbp,rsp
ffffffff80204c6c:	48 83 ec 10          	sub    rsp,0x10
ffffffff80204c70:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80204c74:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80204c78:	48 89 c7             	mov    rdi,rax
ffffffff80204c7b:	e8 09 f4 ff ff       	call   ffffffff80204089 <kmalloc>
ffffffff80204c80:	c9                   	leave  
ffffffff80204c81:	c3                   	ret    

ffffffff80204c82 <operator delete(void*)>:
ffffffff80204c82:	f3 0f 1e fa          	endbr64 
ffffffff80204c86:	55                   	push   rbp
ffffffff80204c87:	48 89 e5             	mov    rbp,rsp
ffffffff80204c8a:	48 83 ec 10          	sub    rsp,0x10
ffffffff80204c8e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80204c92:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80204c96:	48 89 c7             	mov    rdi,rax
ffffffff80204c99:	e8 63 fb ff ff       	call   ffffffff80204801 <kfree>
ffffffff80204c9e:	90                   	nop
ffffffff80204c9f:	c9                   	leave  
ffffffff80204ca0:	c3                   	ret    

ffffffff80204ca1 <operator delete(void*, unsigned long)>:
ffffffff80204ca1:	f3 0f 1e fa          	endbr64 
ffffffff80204ca5:	55                   	push   rbp
ffffffff80204ca6:	48 89 e5             	mov    rbp,rsp
ffffffff80204ca9:	48 83 ec 10          	sub    rsp,0x10
ffffffff80204cad:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80204cb1:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff80204cb5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80204cb9:	48 89 c7             	mov    rdi,rax
ffffffff80204cbc:	e8 40 fb ff ff       	call   ffffffff80204801 <kfree>
ffffffff80204cc1:	90                   	nop
ffffffff80204cc2:	c9                   	leave  
ffffffff80204cc3:	c3                   	ret    

ffffffff80204cc4 <__static_initialization_and_destruction_0(int, int)>:
ffffffff80204cc4:	f3 0f 1e fa          	endbr64 
ffffffff80204cc8:	55                   	push   rbp
ffffffff80204cc9:	48 89 e5             	mov    rbp,rsp
ffffffff80204ccc:	48 83 ec 10          	sub    rsp,0x10
ffffffff80204cd0:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80204cd3:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff80204cd6:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
ffffffff80204cda:	75 15                	jne    ffffffff80204cf1 <__static_initialization_and_destruction_0(int, int)+0x2d>
ffffffff80204cdc:	81 7d f8 ff ff 00 00 	cmp    DWORD PTR [rbp-0x8],0xffff
ffffffff80204ce3:	75 0c                	jne    ffffffff80204cf1 <__static_initialization_and_destruction_0(int, int)+0x2d>
ffffffff80204ce5:	48 c7 c7 00 53 21 80 	mov    rdi,0xffffffff80215300
ffffffff80204cec:	e8 05 1e 00 00       	call   ffffffff80206af6 <Spinlock::Spinlock()>
ffffffff80204cf1:	90                   	nop
ffffffff80204cf2:	c9                   	leave  
ffffffff80204cf3:	c3                   	ret    

ffffffff80204cf4 <_GLOBAL__sub_I_alloc_lock>:
ffffffff80204cf4:	f3 0f 1e fa          	endbr64 
ffffffff80204cf8:	55                   	push   rbp
ffffffff80204cf9:	48 89 e5             	mov    rbp,rsp
ffffffff80204cfc:	be ff ff 00 00       	mov    esi,0xffff
ffffffff80204d01:	bf 01 00 00 00       	mov    edi,0x1
ffffffff80204d06:	e8 b9 ff ff ff       	call   ffffffff80204cc4 <__static_initialization_and_destruction_0(int, int)>
ffffffff80204d0b:	5d                   	pop    rbp
ffffffff80204d0c:	c3                   	ret    

ffffffff80204d0d <RegisterIDTEntry(int, unsigned long, unsigned char, unsigned char)>:
ffffffff80204d0d:	f3 0f 1e fa          	endbr64 
ffffffff80204d11:	55                   	push   rbp
ffffffff80204d12:	48 89 e5             	mov    rbp,rsp
ffffffff80204d15:	48 83 ec 18          	sub    rsp,0x18
ffffffff80204d19:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80204d1c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff80204d20:	89 c8                	mov    eax,ecx
ffffffff80204d22:	88 55 f8             	mov    BYTE PTR [rbp-0x8],dl
ffffffff80204d25:	88 45 ec             	mov    BYTE PTR [rbp-0x14],al
ffffffff80204d28:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80204d2b:	48 98                	cdqe   
ffffffff80204d2d:	48 c1 e0 04          	shl    rax,0x4
ffffffff80204d31:	48 8d 90 44 5b 21 80 	lea    rdx,[rax-0x7fdea4bc]
ffffffff80204d38:	0f b6 45 ec          	movzx  eax,BYTE PTR [rbp-0x14]
ffffffff80204d3c:	88 02                	mov    BYTE PTR [rdx],al
ffffffff80204d3e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80204d41:	48 98                	cdqe   
ffffffff80204d43:	48 c1 e0 04          	shl    rax,0x4
ffffffff80204d47:	48 05 42 5b 21 80    	add    rax,0xffffffff80215b42
ffffffff80204d4d:	66 c7 00 08 00       	mov    WORD PTR [rax],0x8
ffffffff80204d52:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80204d55:	48 98                	cdqe   
ffffffff80204d57:	48 c1 e0 04          	shl    rax,0x4
ffffffff80204d5b:	48 8d 90 45 5b 21 80 	lea    rdx,[rax-0x7fdea4bb]
ffffffff80204d62:	0f b6 45 f8          	movzx  eax,BYTE PTR [rbp-0x8]
ffffffff80204d66:	88 02                	mov    BYTE PTR [rdx],al
ffffffff80204d68:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80204d6b:	48 98                	cdqe   
ffffffff80204d6d:	48 c1 e0 04          	shl    rax,0x4
ffffffff80204d71:	48 05 4c 5b 21 80    	add    rax,0xffffffff80215b4c
ffffffff80204d77:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
ffffffff80204d7d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80204d81:	89 c2                	mov    edx,eax
ffffffff80204d83:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80204d86:	48 98                	cdqe   
ffffffff80204d88:	48 c1 e0 04          	shl    rax,0x4
ffffffff80204d8c:	48 05 40 5b 21 80    	add    rax,0xffffffff80215b40
ffffffff80204d92:	66 89 10             	mov    WORD PTR [rax],dx
ffffffff80204d95:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80204d99:	48 c1 e8 10          	shr    rax,0x10
ffffffff80204d9d:	89 c2                	mov    edx,eax
ffffffff80204d9f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80204da2:	48 98                	cdqe   
ffffffff80204da4:	48 c1 e0 04          	shl    rax,0x4
ffffffff80204da8:	48 05 46 5b 21 80    	add    rax,0xffffffff80215b46
ffffffff80204dae:	66 89 10             	mov    WORD PTR [rax],dx
ffffffff80204db1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80204db5:	48 c1 e8 20          	shr    rax,0x20
ffffffff80204db9:	89 c2                	mov    edx,eax
ffffffff80204dbb:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80204dbe:	48 98                	cdqe   
ffffffff80204dc0:	48 c1 e0 04          	shl    rax,0x4
ffffffff80204dc4:	48 05 48 5b 21 80    	add    rax,0xffffffff80215b48
ffffffff80204dca:	89 10                	mov    DWORD PTR [rax],edx
ffffffff80204dcc:	90                   	nop
ffffffff80204dcd:	c9                   	leave  
ffffffff80204dce:	c3                   	ret    

ffffffff80204dcf <InterruptHandler>:
ffffffff80204dcf:	f3 0f 1e fa          	endbr64 
ffffffff80204dd3:	55                   	push   rbp
ffffffff80204dd4:	48 89 e5             	mov    rbp,rsp
ffffffff80204dd7:	48 83 ec 20          	sub    rsp,0x20
ffffffff80204ddb:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80204ddf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204de3:	48 8b 40 78          	mov    rax,QWORD PTR [rax+0x78]
ffffffff80204de7:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
ffffffff80204dea:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204dee:	48 8b 40 78          	mov    rax,QWORD PTR [rax+0x78]
ffffffff80204df2:	48 83 f8 1f          	cmp    rax,0x1f
ffffffff80204df6:	0f 87 d6 00 00 00    	ja     ffffffff80204ed2 <InterruptHandler+0x103>
ffffffff80204dfc:	48 c7 c7 f7 11 20 80 	mov    rdi,0xffffffff802011f7
ffffffff80204e03:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80204e08:	e8 26 27 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff80204e0d:	48 c7 c7 03 12 20 80 	mov    rdi,0xffffffff80201203
ffffffff80204e14:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80204e19:	e8 15 27 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff80204e1e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204e22:	48 8b 40 78          	mov    rax,QWORD PTR [rax+0x78]
ffffffff80204e26:	48 8b 04 c5 20 80 20 	mov    rax,QWORD PTR [rax*8-0x7fdf7fe0]
ffffffff80204e2d:	80 
ffffffff80204e2e:	48 89 c7             	mov    rdi,rax
ffffffff80204e31:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80204e36:	e8 f8 26 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff80204e3b:	48 c7 c7 0f 12 20 80 	mov    rdi,0xffffffff8020120f
ffffffff80204e42:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80204e47:	e8 e7 26 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff80204e4c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204e50:	48 8b 80 88 00 00 00 	mov    rax,QWORD PTR [rax+0x88]
ffffffff80204e57:	48 89 c6             	mov    rsi,rax
ffffffff80204e5a:	48 c7 c7 19 12 20 80 	mov    rdi,0xffffffff80201219
ffffffff80204e61:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80204e66:	e8 c8 26 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff80204e6b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204e6f:	48 8b 80 80 00 00 00 	mov    rax,QWORD PTR [rax+0x80]
ffffffff80204e76:	48 89 c6             	mov    rsi,rax
ffffffff80204e79:	48 c7 c7 28 12 20 80 	mov    rdi,0xffffffff80201228
ffffffff80204e80:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80204e85:	e8 a9 26 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff80204e8a:	48 c7 c7 40 12 20 80 	mov    rdi,0xffffffff80201240
ffffffff80204e91:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80204e96:	e8 98 26 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff80204e9b:	48 c7 c7 68 12 20 80 	mov    rdi,0xffffffff80201268
ffffffff80204ea2:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80204ea7:	e8 87 26 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff80204eac:	48 c7 c7 90 12 20 80 	mov    rdi,0xffffffff80201290
ffffffff80204eb3:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80204eb8:	e8 76 26 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff80204ebd:	48 c7 c7 b8 12 20 80 	mov    rdi,0xffffffff802012b8
ffffffff80204ec4:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80204ec9:	e8 65 26 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff80204ece:	fa                   	cli    
ffffffff80204ecf:	f4                   	hlt    
ffffffff80204ed0:	eb fd                	jmp    ffffffff80204ecf <InterruptHandler+0x100>
ffffffff80204ed2:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
ffffffff80204ed6:	48 98                	cdqe   
ffffffff80204ed8:	48 8b 04 c5 40 53 21 	mov    rax,QWORD PTR [rax*8-0x7fdeacc0]
ffffffff80204edf:	80 
ffffffff80204ee0:	48 85 c0             	test   rax,rax
ffffffff80204ee3:	75 1b                	jne    ffffffff80204f00 <InterruptHandler+0x131>
ffffffff80204ee5:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
ffffffff80204ee9:	89 c6                	mov    esi,eax
ffffffff80204eeb:	48 c7 c7 e0 12 20 80 	mov    rdi,0xffffffff802012e0
ffffffff80204ef2:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80204ef7:	e8 37 26 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff80204efc:	fa                   	cli    
ffffffff80204efd:	f4                   	hlt    
ffffffff80204efe:	eb fd                	jmp    ffffffff80204efd <InterruptHandler+0x12e>
ffffffff80204f00:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
ffffffff80204f04:	48 98                	cdqe   
ffffffff80204f06:	48 8b 14 c5 40 53 21 	mov    rdx,QWORD PTR [rax*8-0x7fdeacc0]
ffffffff80204f0d:	80 
ffffffff80204f0e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80204f12:	48 89 c7             	mov    rdi,rax
ffffffff80204f15:	ff d2                	call   rdx
ffffffff80204f17:	90                   	nop
ffffffff80204f18:	c9                   	leave  
ffffffff80204f19:	c3                   	ret    

ffffffff80204f1a <IDT::Init()>:
ffffffff80204f1a:	f3 0f 1e fa          	endbr64 
ffffffff80204f1e:	55                   	push   rbp
ffffffff80204f1f:	48 89 e5             	mov    rbp,rsp
ffffffff80204f22:	48 83 ec 10          	sub    rsp,0x10
ffffffff80204f26:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff80204f2d:	eb 25                	jmp    ffffffff80204f54 <IDT::Init()+0x3a>
ffffffff80204f2f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80204f32:	48 98                	cdqe   
ffffffff80204f34:	48 8b 34 c5 20 81 20 	mov    rsi,QWORD PTR [rax*8-0x7fdf7ee0]
ffffffff80204f3b:	80 
ffffffff80204f3c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80204f3f:	b9 00 00 00 00       	mov    ecx,0x0
ffffffff80204f44:	ba 8e 00 00 00       	mov    edx,0x8e
ffffffff80204f49:	89 c7                	mov    edi,eax
ffffffff80204f4b:	e8 bd fd ff ff       	call   ffffffff80204d0d <RegisterIDTEntry(int, unsigned long, unsigned char, unsigned char)>
ffffffff80204f50:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff80204f54:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
ffffffff80204f5b:	7e d2                	jle    ffffffff80204f2f <IDT::Init()+0x15>
ffffffff80204f5d:	48 c7 c0 40 5b 21 80 	mov    rax,0xffffffff80215b40
ffffffff80204f64:	48 89 05 d7 1b 01 00 	mov    QWORD PTR [rip+0x11bd7],rax        # ffffffff80216b42 <idtDescriptor+0x2>
ffffffff80204f6b:	66 c7 05 cc 1b 01 00 	mov    WORD PTR [rip+0x11bcc],0xfff        # ffffffff80216b40 <idtDescriptor>
ffffffff80204f72:	ff 0f 
ffffffff80204f74:	0f 01 1d c5 1b 01 00 	lidt   [rip+0x11bc5]        # ffffffff80216b40 <idtDescriptor>
ffffffff80204f7b:	fb                   	sti    
ffffffff80204f7c:	90                   	nop
ffffffff80204f7d:	c9                   	leave  
ffffffff80204f7e:	c3                   	ret    

ffffffff80204f7f <IDT::RegisterEntry(int, void (*)(IDT::registers_t*))>:
ffffffff80204f7f:	f3 0f 1e fa          	endbr64 
ffffffff80204f83:	55                   	push   rbp
ffffffff80204f84:	48 89 e5             	mov    rbp,rsp
ffffffff80204f87:	48 83 ec 10          	sub    rsp,0x10
ffffffff80204f8b:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80204f8e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff80204f92:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80204f95:	48 98                	cdqe   
ffffffff80204f97:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80204f9b:	48 89 14 c5 40 53 21 	mov    QWORD PTR [rax*8-0x7fdeacc0],rdx
ffffffff80204fa2:	80 
ffffffff80204fa3:	90                   	nop
ffffffff80204fa4:	c9                   	leave  
ffffffff80204fa5:	c3                   	ret    

ffffffff80204fa6 <IOAPIC::WriteReg(unsigned int, unsigned int)>:
ffffffff80204fa6:	f3 0f 1e fa          	endbr64 
ffffffff80204faa:	55                   	push   rbp
ffffffff80204fab:	48 89 e5             	mov    rbp,rsp
ffffffff80204fae:	48 83 ec 10          	sub    rsp,0x10
ffffffff80204fb2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80204fb6:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
ffffffff80204fb9:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
ffffffff80204fbc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80204fc0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80204fc3:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffffffff80204fc6:	89 10                	mov    DWORD PTR [rax],edx
ffffffff80204fc8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80204fcc:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80204fcf:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffffffff80204fd2:	89 50 10             	mov    DWORD PTR [rax+0x10],edx
ffffffff80204fd5:	90                   	nop
ffffffff80204fd6:	c9                   	leave  
ffffffff80204fd7:	c3                   	ret    

ffffffff80204fd8 <IOAPIC::WriteReg64(unsigned int, unsigned long)>:
ffffffff80204fd8:	f3 0f 1e fa          	endbr64 
ffffffff80204fdc:	55                   	push   rbp
ffffffff80204fdd:	48 89 e5             	mov    rbp,rsp
ffffffff80204fe0:	48 83 ec 28          	sub    rsp,0x28
ffffffff80204fe4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80204fe8:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff80204feb:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff80204fef:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80204ff3:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80204ff6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80204ffa:	48 c1 e8 20          	shr    rax,0x20
ffffffff80204ffe:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff80205001:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffffffff80205004:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
ffffffff80205007:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8020500b:	89 ce                	mov    esi,ecx
ffffffff8020500d:	48 89 c7             	mov    rdi,rax
ffffffff80205010:	e8 91 ff ff ff       	call   ffffffff80204fa6 <IOAPIC::WriteReg(unsigned int, unsigned int)>
ffffffff80205015:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff80205018:	8d 48 01             	lea    ecx,[rax+0x1]
ffffffff8020501b:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffffffff8020501e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80205022:	89 ce                	mov    esi,ecx
ffffffff80205024:	48 89 c7             	mov    rdi,rax
ffffffff80205027:	e8 7a ff ff ff       	call   ffffffff80204fa6 <IOAPIC::WriteReg(unsigned int, unsigned int)>
ffffffff8020502c:	90                   	nop
ffffffff8020502d:	c9                   	leave  
ffffffff8020502e:	c3                   	ret    
ffffffff8020502f:	90                   	nop

ffffffff80205030 <IOAPIC::ReadReg(unsigned int)>:
ffffffff80205030:	f3 0f 1e fa          	endbr64 
ffffffff80205034:	55                   	push   rbp
ffffffff80205035:	48 89 e5             	mov    rbp,rsp
ffffffff80205038:	48 83 ec 10          	sub    rsp,0x10
ffffffff8020503c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80205040:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
ffffffff80205043:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80205047:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8020504a:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffffffff8020504d:	89 10                	mov    DWORD PTR [rax],edx
ffffffff8020504f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80205053:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80205056:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffffffff80205059:	c9                   	leave  
ffffffff8020505a:	c3                   	ret    
ffffffff8020505b:	90                   	nop

ffffffff8020505c <IOAPIC::IOAPIC(unsigned long)>:
ffffffff8020505c:	f3 0f 1e fa          	endbr64 
ffffffff80205060:	55                   	push   rbp
ffffffff80205061:	48 89 e5             	mov    rbp,rsp
ffffffff80205064:	48 83 ec 20          	sub    rsp,0x20
ffffffff80205068:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff8020506c:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff80205070:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff80205074:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80205078:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff8020507b:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff8020507f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80205083:	b9 13 00 00 00       	mov    ecx,0x13
ffffffff80205088:	48 89 c6             	mov    rsi,rax
ffffffff8020508b:	bf 00 00 00 00       	mov    edi,0x0
ffffffff80205090:	e8 a5 25 00 00       	call   ffffffff8020763a <VirtualMemory::MapPage(VirtualMemory::PageMapLevel4*, unsigned long, unsigned long, int)>
ffffffff80205095:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80205099:	be 01 00 00 00       	mov    esi,0x1
ffffffff8020509e:	48 89 c7             	mov    rdi,rax
ffffffff802050a1:	e8 8a ff ff ff       	call   ffffffff80205030 <IOAPIC::ReadReg(unsigned int)>
ffffffff802050a6:	c1 e8 10             	shr    eax,0x10
ffffffff802050a9:	25 ff 00 00 00       	and    eax,0xff
ffffffff802050ae:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff802050b1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff802050b5:	be 00 00 00 00       	mov    esi,0x0
ffffffff802050ba:	48 89 c7             	mov    rdi,rax
ffffffff802050bd:	e8 6e ff ff ff       	call   ffffffff80205030 <IOAPIC::ReadReg(unsigned int)>
ffffffff802050c2:	c1 e8 18             	shr    eax,0x18
ffffffff802050c5:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff802050c8:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffffffff802050cb:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff802050ce:	89 c6                	mov    esi,eax
ffffffff802050d0:	48 c7 c7 00 13 20 80 	mov    rdi,0xffffffff80201300
ffffffff802050d7:	b8 00 00 00 00       	mov    eax,0x0
ffffffff802050dc:	e8 52 24 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff802050e1:	90                   	nop
ffffffff802050e2:	c9                   	leave  
ffffffff802050e3:	c3                   	ret    

ffffffff802050e4 <IOAPIC::Redirect(unsigned char, unsigned char, unsigned int)>:
ffffffff802050e4:	f3 0f 1e fa          	endbr64 
ffffffff802050e8:	55                   	push   rbp
ffffffff802050e9:	48 89 e5             	mov    rbp,rsp
ffffffff802050ec:	48 83 ec 20          	sub    rsp,0x20
ffffffff802050f0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff802050f4:	89 d0                	mov    eax,edx
ffffffff802050f6:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
ffffffff802050f9:	89 f2                	mov    edx,esi
ffffffff802050fb:	88 55 f4             	mov    BYTE PTR [rbp-0xc],dl
ffffffff802050fe:	88 45 f0             	mov    BYTE PTR [rbp-0x10],al
ffffffff80205101:	0f b6 55 f0          	movzx  edx,BYTE PTR [rbp-0x10]
ffffffff80205105:	0f b6 45 f4          	movzx  eax,BYTE PTR [rbp-0xc]
ffffffff80205109:	89 c6                	mov    esi,eax
ffffffff8020510b:	48 c7 c7 36 13 20 80 	mov    rdi,0xffffffff80201336
ffffffff80205112:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80205117:	e8 17 24 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff8020511c:	0f b6 45 f0          	movzx  eax,BYTE PTR [rbp-0x10]
ffffffff80205120:	0b 45 ec             	or     eax,DWORD PTR [rbp-0x14]
ffffffff80205123:	89 c2                	mov    edx,eax
ffffffff80205125:	0f b6 45 f4          	movzx  eax,BYTE PTR [rbp-0xc]
ffffffff80205129:	83 c0 08             	add    eax,0x8
ffffffff8020512c:	01 c0                	add    eax,eax
ffffffff8020512e:	89 c1                	mov    ecx,eax
ffffffff80205130:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80205134:	89 ce                	mov    esi,ecx
ffffffff80205136:	48 89 c7             	mov    rdi,rax
ffffffff80205139:	e8 9a fe ff ff       	call   ffffffff80204fd8 <IOAPIC::WriteReg64(unsigned int, unsigned long)>
ffffffff8020513e:	90                   	nop
ffffffff8020513f:	c9                   	leave  
ffffffff80205140:	c3                   	ret    
ffffffff80205141:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80205148:	00 00 00 
ffffffff8020514b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff80205150 <isr0>:
ffffffff80205150:	6a 00                	push   0x0
ffffffff80205152:	6a 00                	push   0x0
ffffffff80205154:	e9 39 0a 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205159 <isr1>:
ffffffff80205159:	6a 00                	push   0x0
ffffffff8020515b:	6a 01                	push   0x1
ffffffff8020515d:	e9 30 0a 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205162 <isr2>:
ffffffff80205162:	6a 00                	push   0x0
ffffffff80205164:	6a 02                	push   0x2
ffffffff80205166:	e9 27 0a 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020516b <isr3>:
ffffffff8020516b:	6a 00                	push   0x0
ffffffff8020516d:	6a 03                	push   0x3
ffffffff8020516f:	e9 1e 0a 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205174 <isr4>:
ffffffff80205174:	6a 00                	push   0x0
ffffffff80205176:	6a 04                	push   0x4
ffffffff80205178:	e9 15 0a 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020517d <isr5>:
ffffffff8020517d:	6a 00                	push   0x0
ffffffff8020517f:	6a 05                	push   0x5
ffffffff80205181:	e9 0c 0a 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205186 <isr6>:
ffffffff80205186:	6a 00                	push   0x0
ffffffff80205188:	6a 06                	push   0x6
ffffffff8020518a:	e9 03 0a 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020518f <isr7>:
ffffffff8020518f:	6a 00                	push   0x0
ffffffff80205191:	6a 07                	push   0x7
ffffffff80205193:	e9 fa 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205198 <isr8>:
ffffffff80205198:	6a 08                	push   0x8
ffffffff8020519a:	e9 f3 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020519f <isr9>:
ffffffff8020519f:	6a 00                	push   0x0
ffffffff802051a1:	6a 09                	push   0x9
ffffffff802051a3:	e9 ea 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802051a8 <isr10>:
ffffffff802051a8:	6a 0a                	push   0xa
ffffffff802051aa:	e9 e3 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802051af <isr11>:
ffffffff802051af:	6a 0b                	push   0xb
ffffffff802051b1:	e9 dc 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802051b6 <isr12>:
ffffffff802051b6:	6a 0c                	push   0xc
ffffffff802051b8:	e9 d5 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802051bd <isr13>:
ffffffff802051bd:	6a 0d                	push   0xd
ffffffff802051bf:	e9 ce 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802051c4 <isr14>:
ffffffff802051c4:	6a 0e                	push   0xe
ffffffff802051c6:	e9 c7 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802051cb <isr15>:
ffffffff802051cb:	6a 00                	push   0x0
ffffffff802051cd:	6a 0f                	push   0xf
ffffffff802051cf:	e9 be 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802051d4 <isr16>:
ffffffff802051d4:	6a 00                	push   0x0
ffffffff802051d6:	6a 10                	push   0x10
ffffffff802051d8:	e9 b5 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802051dd <isr17>:
ffffffff802051dd:	6a 11                	push   0x11
ffffffff802051df:	e9 ae 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802051e4 <isr18>:
ffffffff802051e4:	6a 00                	push   0x0
ffffffff802051e6:	6a 12                	push   0x12
ffffffff802051e8:	e9 a5 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802051ed <isr19>:
ffffffff802051ed:	6a 00                	push   0x0
ffffffff802051ef:	6a 13                	push   0x13
ffffffff802051f1:	e9 9c 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802051f6 <isr20>:
ffffffff802051f6:	6a 00                	push   0x0
ffffffff802051f8:	6a 14                	push   0x14
ffffffff802051fa:	e9 93 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802051ff <isr21>:
ffffffff802051ff:	6a 15                	push   0x15
ffffffff80205201:	e9 8c 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205206 <isr22>:
ffffffff80205206:	6a 00                	push   0x0
ffffffff80205208:	6a 16                	push   0x16
ffffffff8020520a:	e9 83 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020520f <isr23>:
ffffffff8020520f:	6a 00                	push   0x0
ffffffff80205211:	6a 17                	push   0x17
ffffffff80205213:	e9 7a 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205218 <isr24>:
ffffffff80205218:	6a 00                	push   0x0
ffffffff8020521a:	6a 18                	push   0x18
ffffffff8020521c:	e9 71 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205221 <isr25>:
ffffffff80205221:	6a 00                	push   0x0
ffffffff80205223:	6a 19                	push   0x19
ffffffff80205225:	e9 68 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020522a <isr26>:
ffffffff8020522a:	6a 00                	push   0x0
ffffffff8020522c:	6a 1a                	push   0x1a
ffffffff8020522e:	e9 5f 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205233 <isr27>:
ffffffff80205233:	6a 00                	push   0x0
ffffffff80205235:	6a 1b                	push   0x1b
ffffffff80205237:	e9 56 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020523c <isr28>:
ffffffff8020523c:	6a 00                	push   0x0
ffffffff8020523e:	6a 1c                	push   0x1c
ffffffff80205240:	e9 4d 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205245 <isr29>:
ffffffff80205245:	6a 1d                	push   0x1d
ffffffff80205247:	e9 46 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020524c <isr30>:
ffffffff8020524c:	6a 1e                	push   0x1e
ffffffff8020524e:	e9 3f 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205253 <isr31>:
ffffffff80205253:	6a 00                	push   0x0
ffffffff80205255:	6a 1f                	push   0x1f
ffffffff80205257:	e9 36 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020525c <isr32>:
ffffffff8020525c:	6a 00                	push   0x0
ffffffff8020525e:	6a 20                	push   0x20
ffffffff80205260:	e9 2d 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205265 <isr33>:
ffffffff80205265:	6a 00                	push   0x0
ffffffff80205267:	6a 21                	push   0x21
ffffffff80205269:	e9 24 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020526e <isr34>:
ffffffff8020526e:	6a 00                	push   0x0
ffffffff80205270:	6a 22                	push   0x22
ffffffff80205272:	e9 1b 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205277 <isr35>:
ffffffff80205277:	6a 00                	push   0x0
ffffffff80205279:	6a 23                	push   0x23
ffffffff8020527b:	e9 12 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205280 <isr36>:
ffffffff80205280:	6a 00                	push   0x0
ffffffff80205282:	6a 24                	push   0x24
ffffffff80205284:	e9 09 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205289 <isr37>:
ffffffff80205289:	6a 00                	push   0x0
ffffffff8020528b:	6a 25                	push   0x25
ffffffff8020528d:	e9 00 09 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205292 <isr38>:
ffffffff80205292:	6a 00                	push   0x0
ffffffff80205294:	6a 26                	push   0x26
ffffffff80205296:	e9 f7 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020529b <isr39>:
ffffffff8020529b:	6a 00                	push   0x0
ffffffff8020529d:	6a 27                	push   0x27
ffffffff8020529f:	e9 ee 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802052a4 <isr40>:
ffffffff802052a4:	6a 00                	push   0x0
ffffffff802052a6:	6a 28                	push   0x28
ffffffff802052a8:	e9 e5 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802052ad <isr41>:
ffffffff802052ad:	6a 00                	push   0x0
ffffffff802052af:	6a 29                	push   0x29
ffffffff802052b1:	e9 dc 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802052b6 <isr42>:
ffffffff802052b6:	6a 00                	push   0x0
ffffffff802052b8:	6a 2a                	push   0x2a
ffffffff802052ba:	e9 d3 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802052bf <isr43>:
ffffffff802052bf:	6a 00                	push   0x0
ffffffff802052c1:	6a 2b                	push   0x2b
ffffffff802052c3:	e9 ca 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802052c8 <isr44>:
ffffffff802052c8:	6a 00                	push   0x0
ffffffff802052ca:	6a 2c                	push   0x2c
ffffffff802052cc:	e9 c1 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802052d1 <isr45>:
ffffffff802052d1:	6a 00                	push   0x0
ffffffff802052d3:	6a 2d                	push   0x2d
ffffffff802052d5:	e9 b8 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802052da <isr46>:
ffffffff802052da:	6a 00                	push   0x0
ffffffff802052dc:	6a 2e                	push   0x2e
ffffffff802052de:	e9 af 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802052e3 <isr47>:
ffffffff802052e3:	6a 00                	push   0x0
ffffffff802052e5:	6a 2f                	push   0x2f
ffffffff802052e7:	e9 a6 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802052ec <isr48>:
ffffffff802052ec:	6a 00                	push   0x0
ffffffff802052ee:	6a 30                	push   0x30
ffffffff802052f0:	e9 9d 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802052f5 <isr49>:
ffffffff802052f5:	6a 00                	push   0x0
ffffffff802052f7:	6a 31                	push   0x31
ffffffff802052f9:	e9 94 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802052fe <isr50>:
ffffffff802052fe:	6a 00                	push   0x0
ffffffff80205300:	6a 32                	push   0x32
ffffffff80205302:	e9 8b 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205307 <isr51>:
ffffffff80205307:	6a 00                	push   0x0
ffffffff80205309:	6a 33                	push   0x33
ffffffff8020530b:	e9 82 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205310 <isr52>:
ffffffff80205310:	6a 00                	push   0x0
ffffffff80205312:	6a 34                	push   0x34
ffffffff80205314:	e9 79 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205319 <isr53>:
ffffffff80205319:	6a 00                	push   0x0
ffffffff8020531b:	6a 35                	push   0x35
ffffffff8020531d:	e9 70 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205322 <isr54>:
ffffffff80205322:	6a 00                	push   0x0
ffffffff80205324:	6a 36                	push   0x36
ffffffff80205326:	e9 67 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020532b <isr55>:
ffffffff8020532b:	6a 00                	push   0x0
ffffffff8020532d:	6a 37                	push   0x37
ffffffff8020532f:	e9 5e 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205334 <isr56>:
ffffffff80205334:	6a 00                	push   0x0
ffffffff80205336:	6a 38                	push   0x38
ffffffff80205338:	e9 55 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020533d <isr57>:
ffffffff8020533d:	6a 00                	push   0x0
ffffffff8020533f:	6a 39                	push   0x39
ffffffff80205341:	e9 4c 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205346 <isr58>:
ffffffff80205346:	6a 00                	push   0x0
ffffffff80205348:	6a 3a                	push   0x3a
ffffffff8020534a:	e9 43 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020534f <isr59>:
ffffffff8020534f:	6a 00                	push   0x0
ffffffff80205351:	6a 3b                	push   0x3b
ffffffff80205353:	e9 3a 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205358 <isr60>:
ffffffff80205358:	6a 00                	push   0x0
ffffffff8020535a:	6a 3c                	push   0x3c
ffffffff8020535c:	e9 31 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205361 <isr61>:
ffffffff80205361:	6a 00                	push   0x0
ffffffff80205363:	6a 3d                	push   0x3d
ffffffff80205365:	e9 28 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020536a <isr62>:
ffffffff8020536a:	6a 00                	push   0x0
ffffffff8020536c:	6a 3e                	push   0x3e
ffffffff8020536e:	e9 1f 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205373 <isr63>:
ffffffff80205373:	6a 00                	push   0x0
ffffffff80205375:	6a 3f                	push   0x3f
ffffffff80205377:	e9 16 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020537c <isr64>:
ffffffff8020537c:	6a 00                	push   0x0
ffffffff8020537e:	6a 40                	push   0x40
ffffffff80205380:	e9 0d 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205385 <isr65>:
ffffffff80205385:	6a 00                	push   0x0
ffffffff80205387:	6a 41                	push   0x41
ffffffff80205389:	e9 04 08 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020538e <isr66>:
ffffffff8020538e:	6a 00                	push   0x0
ffffffff80205390:	6a 42                	push   0x42
ffffffff80205392:	e9 fb 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205397 <isr67>:
ffffffff80205397:	6a 00                	push   0x0
ffffffff80205399:	6a 43                	push   0x43
ffffffff8020539b:	e9 f2 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802053a0 <isr68>:
ffffffff802053a0:	6a 00                	push   0x0
ffffffff802053a2:	6a 44                	push   0x44
ffffffff802053a4:	e9 e9 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802053a9 <isr69>:
ffffffff802053a9:	6a 00                	push   0x0
ffffffff802053ab:	6a 45                	push   0x45
ffffffff802053ad:	e9 e0 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802053b2 <isr70>:
ffffffff802053b2:	6a 00                	push   0x0
ffffffff802053b4:	6a 46                	push   0x46
ffffffff802053b6:	e9 d7 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802053bb <isr71>:
ffffffff802053bb:	6a 00                	push   0x0
ffffffff802053bd:	6a 47                	push   0x47
ffffffff802053bf:	e9 ce 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802053c4 <isr72>:
ffffffff802053c4:	6a 00                	push   0x0
ffffffff802053c6:	6a 48                	push   0x48
ffffffff802053c8:	e9 c5 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802053cd <isr73>:
ffffffff802053cd:	6a 00                	push   0x0
ffffffff802053cf:	6a 49                	push   0x49
ffffffff802053d1:	e9 bc 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802053d6 <isr74>:
ffffffff802053d6:	6a 00                	push   0x0
ffffffff802053d8:	6a 4a                	push   0x4a
ffffffff802053da:	e9 b3 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802053df <isr75>:
ffffffff802053df:	6a 00                	push   0x0
ffffffff802053e1:	6a 4b                	push   0x4b
ffffffff802053e3:	e9 aa 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802053e8 <isr76>:
ffffffff802053e8:	6a 00                	push   0x0
ffffffff802053ea:	6a 4c                	push   0x4c
ffffffff802053ec:	e9 a1 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802053f1 <isr77>:
ffffffff802053f1:	6a 00                	push   0x0
ffffffff802053f3:	6a 4d                	push   0x4d
ffffffff802053f5:	e9 98 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802053fa <isr78>:
ffffffff802053fa:	6a 00                	push   0x0
ffffffff802053fc:	6a 4e                	push   0x4e
ffffffff802053fe:	e9 8f 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205403 <isr79>:
ffffffff80205403:	6a 00                	push   0x0
ffffffff80205405:	6a 4f                	push   0x4f
ffffffff80205407:	e9 86 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020540c <isr80>:
ffffffff8020540c:	6a 00                	push   0x0
ffffffff8020540e:	6a 50                	push   0x50
ffffffff80205410:	e9 7d 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205415 <isr81>:
ffffffff80205415:	6a 00                	push   0x0
ffffffff80205417:	6a 51                	push   0x51
ffffffff80205419:	e9 74 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020541e <isr82>:
ffffffff8020541e:	6a 00                	push   0x0
ffffffff80205420:	6a 52                	push   0x52
ffffffff80205422:	e9 6b 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205427 <isr83>:
ffffffff80205427:	6a 00                	push   0x0
ffffffff80205429:	6a 53                	push   0x53
ffffffff8020542b:	e9 62 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205430 <isr84>:
ffffffff80205430:	6a 00                	push   0x0
ffffffff80205432:	6a 54                	push   0x54
ffffffff80205434:	e9 59 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205439 <isr85>:
ffffffff80205439:	6a 00                	push   0x0
ffffffff8020543b:	6a 55                	push   0x55
ffffffff8020543d:	e9 50 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205442 <isr86>:
ffffffff80205442:	6a 00                	push   0x0
ffffffff80205444:	6a 56                	push   0x56
ffffffff80205446:	e9 47 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020544b <isr87>:
ffffffff8020544b:	6a 00                	push   0x0
ffffffff8020544d:	6a 57                	push   0x57
ffffffff8020544f:	e9 3e 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205454 <isr88>:
ffffffff80205454:	6a 00                	push   0x0
ffffffff80205456:	6a 58                	push   0x58
ffffffff80205458:	e9 35 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020545d <isr89>:
ffffffff8020545d:	6a 00                	push   0x0
ffffffff8020545f:	6a 59                	push   0x59
ffffffff80205461:	e9 2c 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205466 <isr90>:
ffffffff80205466:	6a 00                	push   0x0
ffffffff80205468:	6a 5a                	push   0x5a
ffffffff8020546a:	e9 23 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020546f <isr91>:
ffffffff8020546f:	6a 00                	push   0x0
ffffffff80205471:	6a 5b                	push   0x5b
ffffffff80205473:	e9 1a 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205478 <isr92>:
ffffffff80205478:	6a 00                	push   0x0
ffffffff8020547a:	6a 5c                	push   0x5c
ffffffff8020547c:	e9 11 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205481 <isr93>:
ffffffff80205481:	6a 00                	push   0x0
ffffffff80205483:	6a 5d                	push   0x5d
ffffffff80205485:	e9 08 07 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020548a <isr94>:
ffffffff8020548a:	6a 00                	push   0x0
ffffffff8020548c:	6a 5e                	push   0x5e
ffffffff8020548e:	e9 ff 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205493 <isr95>:
ffffffff80205493:	6a 00                	push   0x0
ffffffff80205495:	6a 5f                	push   0x5f
ffffffff80205497:	e9 f6 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020549c <isr96>:
ffffffff8020549c:	6a 00                	push   0x0
ffffffff8020549e:	6a 60                	push   0x60
ffffffff802054a0:	e9 ed 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802054a5 <isr97>:
ffffffff802054a5:	6a 00                	push   0x0
ffffffff802054a7:	6a 61                	push   0x61
ffffffff802054a9:	e9 e4 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802054ae <isr98>:
ffffffff802054ae:	6a 00                	push   0x0
ffffffff802054b0:	6a 62                	push   0x62
ffffffff802054b2:	e9 db 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802054b7 <isr99>:
ffffffff802054b7:	6a 00                	push   0x0
ffffffff802054b9:	6a 63                	push   0x63
ffffffff802054bb:	e9 d2 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802054c0 <isr100>:
ffffffff802054c0:	6a 00                	push   0x0
ffffffff802054c2:	6a 64                	push   0x64
ffffffff802054c4:	e9 c9 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802054c9 <isr101>:
ffffffff802054c9:	6a 00                	push   0x0
ffffffff802054cb:	6a 65                	push   0x65
ffffffff802054cd:	e9 c0 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802054d2 <isr102>:
ffffffff802054d2:	6a 00                	push   0x0
ffffffff802054d4:	6a 66                	push   0x66
ffffffff802054d6:	e9 b7 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802054db <isr103>:
ffffffff802054db:	6a 00                	push   0x0
ffffffff802054dd:	6a 67                	push   0x67
ffffffff802054df:	e9 ae 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802054e4 <isr104>:
ffffffff802054e4:	6a 00                	push   0x0
ffffffff802054e6:	6a 68                	push   0x68
ffffffff802054e8:	e9 a5 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802054ed <isr105>:
ffffffff802054ed:	6a 00                	push   0x0
ffffffff802054ef:	6a 69                	push   0x69
ffffffff802054f1:	e9 9c 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802054f6 <isr106>:
ffffffff802054f6:	6a 00                	push   0x0
ffffffff802054f8:	6a 6a                	push   0x6a
ffffffff802054fa:	e9 93 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802054ff <isr107>:
ffffffff802054ff:	6a 00                	push   0x0
ffffffff80205501:	6a 6b                	push   0x6b
ffffffff80205503:	e9 8a 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205508 <isr108>:
ffffffff80205508:	6a 00                	push   0x0
ffffffff8020550a:	6a 6c                	push   0x6c
ffffffff8020550c:	e9 81 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205511 <isr109>:
ffffffff80205511:	6a 00                	push   0x0
ffffffff80205513:	6a 6d                	push   0x6d
ffffffff80205515:	e9 78 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020551a <isr110>:
ffffffff8020551a:	6a 00                	push   0x0
ffffffff8020551c:	6a 6e                	push   0x6e
ffffffff8020551e:	e9 6f 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205523 <isr111>:
ffffffff80205523:	6a 00                	push   0x0
ffffffff80205525:	6a 6f                	push   0x6f
ffffffff80205527:	e9 66 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020552c <isr112>:
ffffffff8020552c:	6a 00                	push   0x0
ffffffff8020552e:	6a 70                	push   0x70
ffffffff80205530:	e9 5d 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205535 <isr113>:
ffffffff80205535:	6a 00                	push   0x0
ffffffff80205537:	6a 71                	push   0x71
ffffffff80205539:	e9 54 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020553e <isr114>:
ffffffff8020553e:	6a 00                	push   0x0
ffffffff80205540:	6a 72                	push   0x72
ffffffff80205542:	e9 4b 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205547 <isr115>:
ffffffff80205547:	6a 00                	push   0x0
ffffffff80205549:	6a 73                	push   0x73
ffffffff8020554b:	e9 42 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205550 <isr116>:
ffffffff80205550:	6a 00                	push   0x0
ffffffff80205552:	6a 74                	push   0x74
ffffffff80205554:	e9 39 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205559 <isr117>:
ffffffff80205559:	6a 00                	push   0x0
ffffffff8020555b:	6a 75                	push   0x75
ffffffff8020555d:	e9 30 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205562 <isr118>:
ffffffff80205562:	6a 00                	push   0x0
ffffffff80205564:	6a 76                	push   0x76
ffffffff80205566:	e9 27 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020556b <isr119>:
ffffffff8020556b:	6a 00                	push   0x0
ffffffff8020556d:	6a 77                	push   0x77
ffffffff8020556f:	e9 1e 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205574 <isr120>:
ffffffff80205574:	6a 00                	push   0x0
ffffffff80205576:	6a 78                	push   0x78
ffffffff80205578:	e9 15 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020557d <isr121>:
ffffffff8020557d:	6a 00                	push   0x0
ffffffff8020557f:	6a 79                	push   0x79
ffffffff80205581:	e9 0c 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205586 <isr122>:
ffffffff80205586:	6a 00                	push   0x0
ffffffff80205588:	6a 7a                	push   0x7a
ffffffff8020558a:	e9 03 06 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020558f <isr123>:
ffffffff8020558f:	6a 00                	push   0x0
ffffffff80205591:	6a 7b                	push   0x7b
ffffffff80205593:	e9 fa 05 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205598 <isr124>:
ffffffff80205598:	6a 00                	push   0x0
ffffffff8020559a:	6a 7c                	push   0x7c
ffffffff8020559c:	e9 f1 05 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802055a1 <isr125>:
ffffffff802055a1:	6a 00                	push   0x0
ffffffff802055a3:	6a 7d                	push   0x7d
ffffffff802055a5:	e9 e8 05 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802055aa <isr126>:
ffffffff802055aa:	6a 00                	push   0x0
ffffffff802055ac:	6a 7e                	push   0x7e
ffffffff802055ae:	e9 df 05 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802055b3 <isr127>:
ffffffff802055b3:	6a 00                	push   0x0
ffffffff802055b5:	6a 7f                	push   0x7f
ffffffff802055b7:	e9 d6 05 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802055bc <isr128>:
ffffffff802055bc:	6a 00                	push   0x0
ffffffff802055be:	68 80 00 00 00       	push   0x80
ffffffff802055c3:	e9 ca 05 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802055c8 <isr129>:
ffffffff802055c8:	6a 00                	push   0x0
ffffffff802055ca:	68 81 00 00 00       	push   0x81
ffffffff802055cf:	e9 be 05 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802055d4 <isr130>:
ffffffff802055d4:	6a 00                	push   0x0
ffffffff802055d6:	68 82 00 00 00       	push   0x82
ffffffff802055db:	e9 b2 05 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802055e0 <isr131>:
ffffffff802055e0:	6a 00                	push   0x0
ffffffff802055e2:	68 83 00 00 00       	push   0x83
ffffffff802055e7:	e9 a6 05 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802055ec <isr132>:
ffffffff802055ec:	6a 00                	push   0x0
ffffffff802055ee:	68 84 00 00 00       	push   0x84
ffffffff802055f3:	e9 9a 05 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802055f8 <isr133>:
ffffffff802055f8:	6a 00                	push   0x0
ffffffff802055fa:	68 85 00 00 00       	push   0x85
ffffffff802055ff:	e9 8e 05 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205604 <isr134>:
ffffffff80205604:	6a 00                	push   0x0
ffffffff80205606:	68 86 00 00 00       	push   0x86
ffffffff8020560b:	e9 82 05 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205610 <isr135>:
ffffffff80205610:	6a 00                	push   0x0
ffffffff80205612:	68 87 00 00 00       	push   0x87
ffffffff80205617:	e9 76 05 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020561c <isr136>:
ffffffff8020561c:	6a 00                	push   0x0
ffffffff8020561e:	68 88 00 00 00       	push   0x88
ffffffff80205623:	e9 6a 05 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205628 <isr137>:
ffffffff80205628:	6a 00                	push   0x0
ffffffff8020562a:	68 89 00 00 00       	push   0x89
ffffffff8020562f:	e9 5e 05 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205634 <isr138>:
ffffffff80205634:	6a 00                	push   0x0
ffffffff80205636:	68 8a 00 00 00       	push   0x8a
ffffffff8020563b:	e9 52 05 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205640 <isr139>:
ffffffff80205640:	6a 00                	push   0x0
ffffffff80205642:	68 8b 00 00 00       	push   0x8b
ffffffff80205647:	e9 46 05 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020564c <isr140>:
ffffffff8020564c:	6a 00                	push   0x0
ffffffff8020564e:	68 8c 00 00 00       	push   0x8c
ffffffff80205653:	e9 3a 05 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205658 <isr141>:
ffffffff80205658:	6a 00                	push   0x0
ffffffff8020565a:	68 8d 00 00 00       	push   0x8d
ffffffff8020565f:	e9 2e 05 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205664 <isr142>:
ffffffff80205664:	6a 00                	push   0x0
ffffffff80205666:	68 8e 00 00 00       	push   0x8e
ffffffff8020566b:	e9 22 05 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205670 <isr143>:
ffffffff80205670:	6a 00                	push   0x0
ffffffff80205672:	68 8f 00 00 00       	push   0x8f
ffffffff80205677:	e9 16 05 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020567c <isr144>:
ffffffff8020567c:	6a 00                	push   0x0
ffffffff8020567e:	68 90 00 00 00       	push   0x90
ffffffff80205683:	e9 0a 05 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205688 <isr145>:
ffffffff80205688:	6a 00                	push   0x0
ffffffff8020568a:	68 91 00 00 00       	push   0x91
ffffffff8020568f:	e9 fe 04 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205694 <isr146>:
ffffffff80205694:	6a 00                	push   0x0
ffffffff80205696:	68 92 00 00 00       	push   0x92
ffffffff8020569b:	e9 f2 04 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802056a0 <isr147>:
ffffffff802056a0:	6a 00                	push   0x0
ffffffff802056a2:	68 93 00 00 00       	push   0x93
ffffffff802056a7:	e9 e6 04 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802056ac <isr148>:
ffffffff802056ac:	6a 00                	push   0x0
ffffffff802056ae:	68 94 00 00 00       	push   0x94
ffffffff802056b3:	e9 da 04 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802056b8 <isr149>:
ffffffff802056b8:	6a 00                	push   0x0
ffffffff802056ba:	68 95 00 00 00       	push   0x95
ffffffff802056bf:	e9 ce 04 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802056c4 <isr150>:
ffffffff802056c4:	6a 00                	push   0x0
ffffffff802056c6:	68 96 00 00 00       	push   0x96
ffffffff802056cb:	e9 c2 04 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802056d0 <isr151>:
ffffffff802056d0:	6a 00                	push   0x0
ffffffff802056d2:	68 97 00 00 00       	push   0x97
ffffffff802056d7:	e9 b6 04 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802056dc <isr152>:
ffffffff802056dc:	6a 00                	push   0x0
ffffffff802056de:	68 98 00 00 00       	push   0x98
ffffffff802056e3:	e9 aa 04 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802056e8 <isr153>:
ffffffff802056e8:	6a 00                	push   0x0
ffffffff802056ea:	68 99 00 00 00       	push   0x99
ffffffff802056ef:	e9 9e 04 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802056f4 <isr154>:
ffffffff802056f4:	6a 00                	push   0x0
ffffffff802056f6:	68 9a 00 00 00       	push   0x9a
ffffffff802056fb:	e9 92 04 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205700 <isr155>:
ffffffff80205700:	6a 00                	push   0x0
ffffffff80205702:	68 9b 00 00 00       	push   0x9b
ffffffff80205707:	e9 86 04 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020570c <isr156>:
ffffffff8020570c:	6a 00                	push   0x0
ffffffff8020570e:	68 9c 00 00 00       	push   0x9c
ffffffff80205713:	e9 7a 04 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205718 <isr157>:
ffffffff80205718:	6a 00                	push   0x0
ffffffff8020571a:	68 9d 00 00 00       	push   0x9d
ffffffff8020571f:	e9 6e 04 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205724 <isr158>:
ffffffff80205724:	6a 00                	push   0x0
ffffffff80205726:	68 9e 00 00 00       	push   0x9e
ffffffff8020572b:	e9 62 04 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205730 <isr159>:
ffffffff80205730:	6a 00                	push   0x0
ffffffff80205732:	68 9f 00 00 00       	push   0x9f
ffffffff80205737:	e9 56 04 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020573c <isr160>:
ffffffff8020573c:	6a 00                	push   0x0
ffffffff8020573e:	68 a0 00 00 00       	push   0xa0
ffffffff80205743:	e9 4a 04 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205748 <isr161>:
ffffffff80205748:	6a 00                	push   0x0
ffffffff8020574a:	68 a1 00 00 00       	push   0xa1
ffffffff8020574f:	e9 3e 04 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205754 <isr162>:
ffffffff80205754:	6a 00                	push   0x0
ffffffff80205756:	68 a2 00 00 00       	push   0xa2
ffffffff8020575b:	e9 32 04 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205760 <isr163>:
ffffffff80205760:	6a 00                	push   0x0
ffffffff80205762:	68 a3 00 00 00       	push   0xa3
ffffffff80205767:	e9 26 04 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020576c <isr164>:
ffffffff8020576c:	6a 00                	push   0x0
ffffffff8020576e:	68 a4 00 00 00       	push   0xa4
ffffffff80205773:	e9 1a 04 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205778 <isr165>:
ffffffff80205778:	6a 00                	push   0x0
ffffffff8020577a:	68 a5 00 00 00       	push   0xa5
ffffffff8020577f:	e9 0e 04 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205784 <isr166>:
ffffffff80205784:	6a 00                	push   0x0
ffffffff80205786:	68 a6 00 00 00       	push   0xa6
ffffffff8020578b:	e9 02 04 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205790 <isr167>:
ffffffff80205790:	6a 00                	push   0x0
ffffffff80205792:	68 a7 00 00 00       	push   0xa7
ffffffff80205797:	e9 f6 03 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020579c <isr168>:
ffffffff8020579c:	6a 00                	push   0x0
ffffffff8020579e:	68 a8 00 00 00       	push   0xa8
ffffffff802057a3:	e9 ea 03 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802057a8 <isr169>:
ffffffff802057a8:	6a 00                	push   0x0
ffffffff802057aa:	68 a9 00 00 00       	push   0xa9
ffffffff802057af:	e9 de 03 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802057b4 <isr170>:
ffffffff802057b4:	6a 00                	push   0x0
ffffffff802057b6:	68 aa 00 00 00       	push   0xaa
ffffffff802057bb:	e9 d2 03 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802057c0 <isr171>:
ffffffff802057c0:	6a 00                	push   0x0
ffffffff802057c2:	68 ab 00 00 00       	push   0xab
ffffffff802057c7:	e9 c6 03 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802057cc <isr172>:
ffffffff802057cc:	6a 00                	push   0x0
ffffffff802057ce:	68 ac 00 00 00       	push   0xac
ffffffff802057d3:	e9 ba 03 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802057d8 <isr173>:
ffffffff802057d8:	6a 00                	push   0x0
ffffffff802057da:	68 ad 00 00 00       	push   0xad
ffffffff802057df:	e9 ae 03 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802057e4 <isr174>:
ffffffff802057e4:	6a 00                	push   0x0
ffffffff802057e6:	68 ae 00 00 00       	push   0xae
ffffffff802057eb:	e9 a2 03 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802057f0 <isr175>:
ffffffff802057f0:	6a 00                	push   0x0
ffffffff802057f2:	68 af 00 00 00       	push   0xaf
ffffffff802057f7:	e9 96 03 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802057fc <isr176>:
ffffffff802057fc:	6a 00                	push   0x0
ffffffff802057fe:	68 b0 00 00 00       	push   0xb0
ffffffff80205803:	e9 8a 03 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205808 <isr177>:
ffffffff80205808:	6a 00                	push   0x0
ffffffff8020580a:	68 b1 00 00 00       	push   0xb1
ffffffff8020580f:	e9 7e 03 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205814 <isr178>:
ffffffff80205814:	6a 00                	push   0x0
ffffffff80205816:	68 b2 00 00 00       	push   0xb2
ffffffff8020581b:	e9 72 03 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205820 <isr179>:
ffffffff80205820:	6a 00                	push   0x0
ffffffff80205822:	68 b3 00 00 00       	push   0xb3
ffffffff80205827:	e9 66 03 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020582c <isr180>:
ffffffff8020582c:	6a 00                	push   0x0
ffffffff8020582e:	68 b4 00 00 00       	push   0xb4
ffffffff80205833:	e9 5a 03 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205838 <isr181>:
ffffffff80205838:	6a 00                	push   0x0
ffffffff8020583a:	68 b5 00 00 00       	push   0xb5
ffffffff8020583f:	e9 4e 03 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205844 <isr182>:
ffffffff80205844:	6a 00                	push   0x0
ffffffff80205846:	68 b6 00 00 00       	push   0xb6
ffffffff8020584b:	e9 42 03 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205850 <isr183>:
ffffffff80205850:	6a 00                	push   0x0
ffffffff80205852:	68 b7 00 00 00       	push   0xb7
ffffffff80205857:	e9 36 03 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020585c <isr184>:
ffffffff8020585c:	6a 00                	push   0x0
ffffffff8020585e:	68 b8 00 00 00       	push   0xb8
ffffffff80205863:	e9 2a 03 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205868 <isr185>:
ffffffff80205868:	6a 00                	push   0x0
ffffffff8020586a:	68 b9 00 00 00       	push   0xb9
ffffffff8020586f:	e9 1e 03 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205874 <isr186>:
ffffffff80205874:	6a 00                	push   0x0
ffffffff80205876:	68 ba 00 00 00       	push   0xba
ffffffff8020587b:	e9 12 03 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205880 <isr187>:
ffffffff80205880:	6a 00                	push   0x0
ffffffff80205882:	68 bb 00 00 00       	push   0xbb
ffffffff80205887:	e9 06 03 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020588c <isr188>:
ffffffff8020588c:	6a 00                	push   0x0
ffffffff8020588e:	68 bc 00 00 00       	push   0xbc
ffffffff80205893:	e9 fa 02 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205898 <isr189>:
ffffffff80205898:	6a 00                	push   0x0
ffffffff8020589a:	68 bd 00 00 00       	push   0xbd
ffffffff8020589f:	e9 ee 02 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802058a4 <isr190>:
ffffffff802058a4:	6a 00                	push   0x0
ffffffff802058a6:	68 be 00 00 00       	push   0xbe
ffffffff802058ab:	e9 e2 02 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802058b0 <isr191>:
ffffffff802058b0:	6a 00                	push   0x0
ffffffff802058b2:	68 bf 00 00 00       	push   0xbf
ffffffff802058b7:	e9 d6 02 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802058bc <isr192>:
ffffffff802058bc:	6a 00                	push   0x0
ffffffff802058be:	68 c0 00 00 00       	push   0xc0
ffffffff802058c3:	e9 ca 02 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802058c8 <isr193>:
ffffffff802058c8:	6a 00                	push   0x0
ffffffff802058ca:	68 c1 00 00 00       	push   0xc1
ffffffff802058cf:	e9 be 02 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802058d4 <isr194>:
ffffffff802058d4:	6a 00                	push   0x0
ffffffff802058d6:	68 c2 00 00 00       	push   0xc2
ffffffff802058db:	e9 b2 02 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802058e0 <isr195>:
ffffffff802058e0:	6a 00                	push   0x0
ffffffff802058e2:	68 c3 00 00 00       	push   0xc3
ffffffff802058e7:	e9 a6 02 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802058ec <isr196>:
ffffffff802058ec:	6a 00                	push   0x0
ffffffff802058ee:	68 c4 00 00 00       	push   0xc4
ffffffff802058f3:	e9 9a 02 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802058f8 <isr197>:
ffffffff802058f8:	6a 00                	push   0x0
ffffffff802058fa:	68 c5 00 00 00       	push   0xc5
ffffffff802058ff:	e9 8e 02 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205904 <isr198>:
ffffffff80205904:	6a 00                	push   0x0
ffffffff80205906:	68 c6 00 00 00       	push   0xc6
ffffffff8020590b:	e9 82 02 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205910 <isr199>:
ffffffff80205910:	6a 00                	push   0x0
ffffffff80205912:	68 c7 00 00 00       	push   0xc7
ffffffff80205917:	e9 76 02 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020591c <isr200>:
ffffffff8020591c:	6a 00                	push   0x0
ffffffff8020591e:	68 c8 00 00 00       	push   0xc8
ffffffff80205923:	e9 6a 02 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205928 <isr201>:
ffffffff80205928:	6a 00                	push   0x0
ffffffff8020592a:	68 c9 00 00 00       	push   0xc9
ffffffff8020592f:	e9 5e 02 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205934 <isr202>:
ffffffff80205934:	6a 00                	push   0x0
ffffffff80205936:	68 ca 00 00 00       	push   0xca
ffffffff8020593b:	e9 52 02 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205940 <isr203>:
ffffffff80205940:	6a 00                	push   0x0
ffffffff80205942:	68 cb 00 00 00       	push   0xcb
ffffffff80205947:	e9 46 02 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020594c <isr204>:
ffffffff8020594c:	6a 00                	push   0x0
ffffffff8020594e:	68 cc 00 00 00       	push   0xcc
ffffffff80205953:	e9 3a 02 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205958 <isr205>:
ffffffff80205958:	6a 00                	push   0x0
ffffffff8020595a:	68 cd 00 00 00       	push   0xcd
ffffffff8020595f:	e9 2e 02 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205964 <isr206>:
ffffffff80205964:	6a 00                	push   0x0
ffffffff80205966:	68 ce 00 00 00       	push   0xce
ffffffff8020596b:	e9 22 02 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205970 <isr207>:
ffffffff80205970:	6a 00                	push   0x0
ffffffff80205972:	68 cf 00 00 00       	push   0xcf
ffffffff80205977:	e9 16 02 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff8020597c <isr208>:
ffffffff8020597c:	6a 00                	push   0x0
ffffffff8020597e:	68 d0 00 00 00       	push   0xd0
ffffffff80205983:	e9 0a 02 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205988 <isr209>:
ffffffff80205988:	6a 00                	push   0x0
ffffffff8020598a:	68 d1 00 00 00       	push   0xd1
ffffffff8020598f:	e9 fe 01 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205994 <isr210>:
ffffffff80205994:	6a 00                	push   0x0
ffffffff80205996:	68 d2 00 00 00       	push   0xd2
ffffffff8020599b:	e9 f2 01 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802059a0 <isr211>:
ffffffff802059a0:	6a 00                	push   0x0
ffffffff802059a2:	68 d3 00 00 00       	push   0xd3
ffffffff802059a7:	e9 e6 01 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802059ac <isr212>:
ffffffff802059ac:	6a 00                	push   0x0
ffffffff802059ae:	68 d4 00 00 00       	push   0xd4
ffffffff802059b3:	e9 da 01 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802059b8 <isr213>:
ffffffff802059b8:	6a 00                	push   0x0
ffffffff802059ba:	68 d5 00 00 00       	push   0xd5
ffffffff802059bf:	e9 ce 01 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802059c4 <isr214>:
ffffffff802059c4:	6a 00                	push   0x0
ffffffff802059c6:	68 d6 00 00 00       	push   0xd6
ffffffff802059cb:	e9 c2 01 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802059d0 <isr215>:
ffffffff802059d0:	6a 00                	push   0x0
ffffffff802059d2:	68 d7 00 00 00       	push   0xd7
ffffffff802059d7:	e9 b6 01 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802059dc <isr216>:
ffffffff802059dc:	6a 00                	push   0x0
ffffffff802059de:	68 d8 00 00 00       	push   0xd8
ffffffff802059e3:	e9 aa 01 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802059e8 <isr217>:
ffffffff802059e8:	6a 00                	push   0x0
ffffffff802059ea:	68 d9 00 00 00       	push   0xd9
ffffffff802059ef:	e9 9e 01 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff802059f4 <isr218>:
ffffffff802059f4:	6a 00                	push   0x0
ffffffff802059f6:	68 da 00 00 00       	push   0xda
ffffffff802059fb:	e9 92 01 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205a00 <isr219>:
ffffffff80205a00:	6a 00                	push   0x0
ffffffff80205a02:	68 db 00 00 00       	push   0xdb
ffffffff80205a07:	e9 86 01 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205a0c <isr220>:
ffffffff80205a0c:	6a 00                	push   0x0
ffffffff80205a0e:	68 dc 00 00 00       	push   0xdc
ffffffff80205a13:	e9 7a 01 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205a18 <isr221>:
ffffffff80205a18:	6a 00                	push   0x0
ffffffff80205a1a:	68 dd 00 00 00       	push   0xdd
ffffffff80205a1f:	e9 6e 01 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205a24 <isr222>:
ffffffff80205a24:	6a 00                	push   0x0
ffffffff80205a26:	68 de 00 00 00       	push   0xde
ffffffff80205a2b:	e9 62 01 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205a30 <isr223>:
ffffffff80205a30:	6a 00                	push   0x0
ffffffff80205a32:	68 df 00 00 00       	push   0xdf
ffffffff80205a37:	e9 56 01 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205a3c <isr224>:
ffffffff80205a3c:	6a 00                	push   0x0
ffffffff80205a3e:	68 e0 00 00 00       	push   0xe0
ffffffff80205a43:	e9 4a 01 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205a48 <isr225>:
ffffffff80205a48:	6a 00                	push   0x0
ffffffff80205a4a:	68 e1 00 00 00       	push   0xe1
ffffffff80205a4f:	e9 3e 01 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205a54 <isr226>:
ffffffff80205a54:	6a 00                	push   0x0
ffffffff80205a56:	68 e2 00 00 00       	push   0xe2
ffffffff80205a5b:	e9 32 01 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205a60 <isr227>:
ffffffff80205a60:	6a 00                	push   0x0
ffffffff80205a62:	68 e3 00 00 00       	push   0xe3
ffffffff80205a67:	e9 26 01 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205a6c <isr228>:
ffffffff80205a6c:	6a 00                	push   0x0
ffffffff80205a6e:	68 e4 00 00 00       	push   0xe4
ffffffff80205a73:	e9 1a 01 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205a78 <isr229>:
ffffffff80205a78:	6a 00                	push   0x0
ffffffff80205a7a:	68 e5 00 00 00       	push   0xe5
ffffffff80205a7f:	e9 0e 01 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205a84 <isr230>:
ffffffff80205a84:	6a 00                	push   0x0
ffffffff80205a86:	68 e6 00 00 00       	push   0xe6
ffffffff80205a8b:	e9 02 01 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205a90 <isr231>:
ffffffff80205a90:	6a 00                	push   0x0
ffffffff80205a92:	68 e7 00 00 00       	push   0xe7
ffffffff80205a97:	e9 f6 00 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205a9c <isr232>:
ffffffff80205a9c:	6a 00                	push   0x0
ffffffff80205a9e:	68 e8 00 00 00       	push   0xe8
ffffffff80205aa3:	e9 ea 00 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205aa8 <isr233>:
ffffffff80205aa8:	6a 00                	push   0x0
ffffffff80205aaa:	68 e9 00 00 00       	push   0xe9
ffffffff80205aaf:	e9 de 00 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205ab4 <isr234>:
ffffffff80205ab4:	6a 00                	push   0x0
ffffffff80205ab6:	68 ea 00 00 00       	push   0xea
ffffffff80205abb:	e9 d2 00 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205ac0 <isr235>:
ffffffff80205ac0:	6a 00                	push   0x0
ffffffff80205ac2:	68 eb 00 00 00       	push   0xeb
ffffffff80205ac7:	e9 c6 00 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205acc <isr236>:
ffffffff80205acc:	6a 00                	push   0x0
ffffffff80205ace:	68 ec 00 00 00       	push   0xec
ffffffff80205ad3:	e9 ba 00 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205ad8 <isr237>:
ffffffff80205ad8:	6a 00                	push   0x0
ffffffff80205ada:	68 ed 00 00 00       	push   0xed
ffffffff80205adf:	e9 ae 00 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205ae4 <isr238>:
ffffffff80205ae4:	6a 00                	push   0x0
ffffffff80205ae6:	68 ee 00 00 00       	push   0xee
ffffffff80205aeb:	e9 a2 00 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205af0 <isr239>:
ffffffff80205af0:	6a 00                	push   0x0
ffffffff80205af2:	68 ef 00 00 00       	push   0xef
ffffffff80205af7:	e9 96 00 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205afc <isr240>:
ffffffff80205afc:	6a 00                	push   0x0
ffffffff80205afe:	68 f0 00 00 00       	push   0xf0
ffffffff80205b03:	e9 8a 00 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205b08 <isr241>:
ffffffff80205b08:	6a 00                	push   0x0
ffffffff80205b0a:	68 f1 00 00 00       	push   0xf1
ffffffff80205b0f:	e9 7e 00 00 00       	jmp    ffffffff80205b92 <isr_common>

ffffffff80205b14 <isr242>:
ffffffff80205b14:	6a 00                	push   0x0
ffffffff80205b16:	68 f2 00 00 00       	push   0xf2
ffffffff80205b1b:	eb 75                	jmp    ffffffff80205b92 <isr_common>

ffffffff80205b1d <isr243>:
ffffffff80205b1d:	6a 00                	push   0x0
ffffffff80205b1f:	68 f3 00 00 00       	push   0xf3
ffffffff80205b24:	eb 6c                	jmp    ffffffff80205b92 <isr_common>

ffffffff80205b26 <isr244>:
ffffffff80205b26:	6a 00                	push   0x0
ffffffff80205b28:	68 f4 00 00 00       	push   0xf4
ffffffff80205b2d:	eb 63                	jmp    ffffffff80205b92 <isr_common>

ffffffff80205b2f <isr245>:
ffffffff80205b2f:	6a 00                	push   0x0
ffffffff80205b31:	68 f5 00 00 00       	push   0xf5
ffffffff80205b36:	eb 5a                	jmp    ffffffff80205b92 <isr_common>

ffffffff80205b38 <isr246>:
ffffffff80205b38:	6a 00                	push   0x0
ffffffff80205b3a:	68 f6 00 00 00       	push   0xf6
ffffffff80205b3f:	eb 51                	jmp    ffffffff80205b92 <isr_common>

ffffffff80205b41 <isr247>:
ffffffff80205b41:	6a 00                	push   0x0
ffffffff80205b43:	68 f7 00 00 00       	push   0xf7
ffffffff80205b48:	eb 48                	jmp    ffffffff80205b92 <isr_common>

ffffffff80205b4a <isr248>:
ffffffff80205b4a:	6a 00                	push   0x0
ffffffff80205b4c:	68 f8 00 00 00       	push   0xf8
ffffffff80205b51:	eb 3f                	jmp    ffffffff80205b92 <isr_common>

ffffffff80205b53 <isr249>:
ffffffff80205b53:	6a 00                	push   0x0
ffffffff80205b55:	68 f9 00 00 00       	push   0xf9
ffffffff80205b5a:	eb 36                	jmp    ffffffff80205b92 <isr_common>

ffffffff80205b5c <isr250>:
ffffffff80205b5c:	6a 00                	push   0x0
ffffffff80205b5e:	68 fa 00 00 00       	push   0xfa
ffffffff80205b63:	eb 2d                	jmp    ffffffff80205b92 <isr_common>

ffffffff80205b65 <isr251>:
ffffffff80205b65:	6a 00                	push   0x0
ffffffff80205b67:	68 fb 00 00 00       	push   0xfb
ffffffff80205b6c:	eb 24                	jmp    ffffffff80205b92 <isr_common>

ffffffff80205b6e <isr252>:
ffffffff80205b6e:	6a 00                	push   0x0
ffffffff80205b70:	68 fc 00 00 00       	push   0xfc
ffffffff80205b75:	eb 1b                	jmp    ffffffff80205b92 <isr_common>

ffffffff80205b77 <isr253>:
ffffffff80205b77:	6a 00                	push   0x0
ffffffff80205b79:	68 fd 00 00 00       	push   0xfd
ffffffff80205b7e:	eb 12                	jmp    ffffffff80205b92 <isr_common>

ffffffff80205b80 <isr254>:
ffffffff80205b80:	6a 00                	push   0x0
ffffffff80205b82:	68 fe 00 00 00       	push   0xfe
ffffffff80205b87:	eb 09                	jmp    ffffffff80205b92 <isr_common>

ffffffff80205b89 <isr255>:
ffffffff80205b89:	6a 00                	push   0x0
ffffffff80205b8b:	68 ff 00 00 00       	push   0xff
ffffffff80205b90:	eb 00                	jmp    ffffffff80205b92 <isr_common>

ffffffff80205b92 <isr_common>:
ffffffff80205b92:	50                   	push   rax
ffffffff80205b93:	53                   	push   rbx
ffffffff80205b94:	51                   	push   rcx
ffffffff80205b95:	52                   	push   rdx
ffffffff80205b96:	56                   	push   rsi
ffffffff80205b97:	57                   	push   rdi
ffffffff80205b98:	55                   	push   rbp
ffffffff80205b99:	41 50                	push   r8
ffffffff80205b9b:	41 51                	push   r9
ffffffff80205b9d:	41 52                	push   r10
ffffffff80205b9f:	41 53                	push   r11
ffffffff80205ba1:	41 54                	push   r12
ffffffff80205ba3:	41 55                	push   r13
ffffffff80205ba5:	41 56                	push   r14
ffffffff80205ba7:	41 57                	push   r15
ffffffff80205ba9:	48 89 e7             	mov    rdi,rsp
ffffffff80205bac:	e8 1e f2 ff ff       	call   ffffffff80204dcf <InterruptHandler>

ffffffff80205bb1 <isr_done>:
ffffffff80205bb1:	41 5f                	pop    r15
ffffffff80205bb3:	41 5e                	pop    r14
ffffffff80205bb5:	41 5d                	pop    r13
ffffffff80205bb7:	41 5c                	pop    r12
ffffffff80205bb9:	41 5b                	pop    r11
ffffffff80205bbb:	41 5a                	pop    r10
ffffffff80205bbd:	41 59                	pop    r9
ffffffff80205bbf:	41 58                	pop    r8
ffffffff80205bc1:	5d                   	pop    rbp
ffffffff80205bc2:	5f                   	pop    rdi
ffffffff80205bc3:	5e                   	pop    rsi
ffffffff80205bc4:	5a                   	pop    rdx
ffffffff80205bc5:	59                   	pop    rcx
ffffffff80205bc6:	5b                   	pop    rbx
ffffffff80205bc7:	58                   	pop    rax
ffffffff80205bc8:	48 83 c4 10          	add    rsp,0x10
ffffffff80205bcc:	48 cf                	iretq  

ffffffff80205bce <get_tag(stivale2_struct*, unsigned long)>:
ffffffff80205bce:	f3 0f 1e fa          	endbr64 
ffffffff80205bd2:	55                   	push   rbp
ffffffff80205bd3:	48 89 e5             	mov    rbp,rsp
ffffffff80205bd6:	48 83 ec 20          	sub    rsp,0x20
ffffffff80205bda:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80205bde:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff80205be2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80205be6:	48 8b 80 80 00 00 00 	mov    rax,QWORD PTR [rax+0x80]
ffffffff80205bed:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80205bf1:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffffffff80205bf6:	75 07                	jne    ffffffff80205bff <get_tag(stivale2_struct*, unsigned long)+0x31>
ffffffff80205bf8:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80205bfd:	eb 21                	jmp    ffffffff80205c20 <get_tag(stivale2_struct*, unsigned long)+0x52>
ffffffff80205bff:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80205c03:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80205c06:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffffffff80205c0a:	75 06                	jne    ffffffff80205c12 <get_tag(stivale2_struct*, unsigned long)+0x44>
ffffffff80205c0c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80205c10:	eb 0e                	jmp    ffffffff80205c20 <get_tag(stivale2_struct*, unsigned long)+0x52>
ffffffff80205c12:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80205c16:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80205c1a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80205c1e:	eb d1                	jmp    ffffffff80205bf1 <get_tag(stivale2_struct*, unsigned long)+0x23>
ffffffff80205c20:	c9                   	leave  
ffffffff80205c21:	c3                   	ret    

ffffffff80205c22 <ThreadA()>:
ffffffff80205c22:	f3 0f 1e fa          	endbr64 
ffffffff80205c26:	55                   	push   rbp
ffffffff80205c27:	48 89 e5             	mov    rbp,rsp
ffffffff80205c2a:	f4                   	hlt    
ffffffff80205c2b:	eb fd                	jmp    ffffffff80205c2a <ThreadA()+0x8>

ffffffff80205c2d <ThreadB()>:
ffffffff80205c2d:	f3 0f 1e fa          	endbr64 
ffffffff80205c31:	55                   	push   rbp
ffffffff80205c32:	48 89 e5             	mov    rbp,rsp
ffffffff80205c35:	f4                   	hlt    
ffffffff80205c36:	eb fd                	jmp    ffffffff80205c35 <ThreadB()+0x8>

ffffffff80205c38 <kmain>:
ffffffff80205c38:	f3 0f 1e fa          	endbr64 
ffffffff80205c3c:	55                   	push   rbp
ffffffff80205c3d:	48 89 e5             	mov    rbp,rsp
ffffffff80205c40:	53                   	push   rbx
ffffffff80205c41:	48 83 ec 28          	sub    rsp,0x28
ffffffff80205c45:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff80205c49:	e8 74 10 00 00       	call   ffffffff80206cc2 <VGA::Init()>
ffffffff80205c4e:	48 c7 c7 58 13 20 80 	mov    rdi,0xffffffff80201358
ffffffff80205c55:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80205c5a:	e8 d4 18 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff80205c5f:	e8 5f dd ff ff       	call   ffffffff802039c3 <GDT::Init()>
ffffffff80205c64:	48 c7 c7 91 13 20 80 	mov    rdi,0xffffffff80201391
ffffffff80205c6b:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80205c70:	e8 be 18 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff80205c75:	e8 a0 f2 ff ff       	call   ffffffff80204f1a <IDT::Init()>
ffffffff80205c7a:	48 c7 c7 ae 13 20 80 	mov    rdi,0xffffffff802013ae
ffffffff80205c81:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80205c86:	e8 a8 18 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff80205c8b:	e8 78 01 00 00       	call   ffffffff80205e08 <PIC::RemapIRQs()>
ffffffff80205c90:	48 c7 c7 cb 13 20 80 	mov    rdi,0xffffffff802013cb
ffffffff80205c97:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80205c9c:	e8 92 18 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff80205ca1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80205ca5:	48 89 c7             	mov    rdi,rax
ffffffff80205ca8:	e8 9b d6 ff ff       	call   ffffffff80203348 <ACPI::FindTables(stivale2_struct*)>
ffffffff80205cad:	48 c7 c7 e7 13 20 80 	mov    rdi,0xffffffff802013e7
ffffffff80205cb4:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80205cb9:	e8 75 18 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff80205cbe:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80205cc2:	48 ba 07 de 12 86 9e 	movabs rdx,0x2187f79e8612de07
ffffffff80205cc9:	f7 87 21 
ffffffff80205ccc:	48 89 d6             	mov    rsi,rdx
ffffffff80205ccf:	48 89 c7             	mov    rdi,rax
ffffffff80205cd2:	e8 f7 fe ff ff       	call   ffffffff80205bce <get_tag(stivale2_struct*, unsigned long)>
ffffffff80205cd7:	48 89 c7             	mov    rdi,rax
ffffffff80205cda:	e8 8f 05 00 00       	call   ffffffff8020626e <PhysicalMemory::Initialize(stivale2_struct_tag_memmap*)>
ffffffff80205cdf:	48 c7 c7 05 14 20 80 	mov    rdi,0xffffffff80201405
ffffffff80205ce6:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80205ceb:	e8 43 18 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff80205cf0:	e8 3e 1c 00 00       	call   ffffffff80207933 <VirtualMemory::Initialize()>
ffffffff80205cf5:	48 c7 c0 80 6b 21 80 	mov    rax,0xffffffff80216b80
ffffffff80205cfc:	48 05 00 40 00 00    	add    rax,0x4000
ffffffff80205d02:	48 89 c7             	mov    rdi,rax
ffffffff80205d05:	e8 02 dd ff ff       	call   ffffffff80203a0c <GDT::InitTSS(unsigned long)>
ffffffff80205d0a:	48 c7 c7 22 14 20 80 	mov    rdi,0xffffffff80201422
ffffffff80205d11:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80205d16:	e8 18 18 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff80205d1b:	bf 08 00 00 00       	mov    edi,0x8
ffffffff80205d20:	e8 3f ef ff ff       	call   ffffffff80204c64 <operator new(unsigned long)>
ffffffff80205d25:	48 89 c3             	mov    rbx,rax
ffffffff80205d28:	48 89 df             	mov    rdi,rbx
ffffffff80205d2b:	e8 28 d9 ff ff       	call   ffffffff80203658 <LAPIC::LAPIC()>
ffffffff80205d30:	48 89 1d 29 0e 01 00 	mov    QWORD PTR [rip+0x10e29],rbx        # ffffffff80216b60 <lapic>
ffffffff80205d37:	e8 a0 d7 ff ff       	call   ffffffff802034dc <ACPI::SetupAPIC()>
ffffffff80205d3c:	48 c7 c7 40 14 20 80 	mov    rdi,0xffffffff80201440
ffffffff80205d43:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80205d48:	e8 e6 17 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff80205d4d:	e8 3f 02 00 00       	call   ffffffff80205f91 <PIT::Initialize()>
ffffffff80205d52:	48 c7 c7 57 14 20 80 	mov    rdi,0xffffffff80201457
ffffffff80205d59:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80205d5e:	e8 d0 17 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff80205d63:	e8 fd 08 00 00       	call   ffffffff80206665 <RealTimeClock::ReadTime()>
ffffffff80205d68:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80205d6c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffffffff80205d70:	0f b6 45 e0          	movzx  eax,BYTE PTR [rbp-0x20]
ffffffff80205d74:	0f b6 f0             	movzx  esi,al
ffffffff80205d77:	0f b6 45 e1          	movzx  eax,BYTE PTR [rbp-0x1f]
ffffffff80205d7b:	44 0f b6 c0          	movzx  r8d,al
ffffffff80205d7f:	0f b6 45 e2          	movzx  eax,BYTE PTR [rbp-0x1e]
ffffffff80205d83:	0f b6 f8             	movzx  edi,al
ffffffff80205d86:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffffffff80205d89:	8d 88 d0 07 00 00    	lea    ecx,[rax+0x7d0]
ffffffff80205d8f:	0f b6 45 e4          	movzx  eax,BYTE PTR [rbp-0x1c]
ffffffff80205d93:	0f b6 d0             	movzx  edx,al
ffffffff80205d96:	0f b6 45 e5          	movzx  eax,BYTE PTR [rbp-0x1b]
ffffffff80205d9a:	0f b6 c0             	movzx  eax,al
ffffffff80205d9d:	48 83 ec 08          	sub    rsp,0x8
ffffffff80205da1:	56                   	push   rsi
ffffffff80205da2:	45 89 c1             	mov    r9d,r8d
ffffffff80205da5:	41 89 f8             	mov    r8d,edi
ffffffff80205da8:	89 c6                	mov    esi,eax
ffffffff80205daa:	48 c7 c7 6d 14 20 80 	mov    rdi,0xffffffff8020146d
ffffffff80205db1:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80205db6:	e8 78 17 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff80205dbb:	48 83 c4 10          	add    rsp,0x10
ffffffff80205dbf:	e8 65 0a 00 00       	call   ffffffff80206829 <Scheduler::Initialize()>
ffffffff80205dc4:	fa                   	cli    
ffffffff80205dc5:	48 c7 c0 22 5c 20 80 	mov    rax,0xffffffff80205c22
ffffffff80205dcc:	48 89 c7             	mov    rdi,rax
ffffffff80205dcf:	e8 80 0a 00 00       	call   ffffffff80206854 <Scheduler::AddThread(unsigned long)>
ffffffff80205dd4:	48 c7 c0 2d 5c 20 80 	mov    rax,0xffffffff80205c2d
ffffffff80205ddb:	48 89 c7             	mov    rdi,rax
ffffffff80205dde:	e8 71 0a 00 00       	call   ffffffff80206854 <Scheduler::AddThread(unsigned long)>
ffffffff80205de3:	fb                   	sti    
ffffffff80205de4:	f4                   	hlt    
ffffffff80205de5:	eb fd                	jmp    ffffffff80205de4 <kmain+0x1ac>

ffffffff80205de7 <outb(unsigned short, unsigned char)>:
ffffffff80205de7:	55                   	push   rbp
ffffffff80205de8:	48 89 e5             	mov    rbp,rsp
ffffffff80205deb:	48 83 ec 08          	sub    rsp,0x8
ffffffff80205def:	89 f8                	mov    eax,edi
ffffffff80205df1:	89 f2                	mov    edx,esi
ffffffff80205df3:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
ffffffff80205df7:	89 d0                	mov    eax,edx
ffffffff80205df9:	88 45 f8             	mov    BYTE PTR [rbp-0x8],al
ffffffff80205dfc:	0f b6 45 f8          	movzx  eax,BYTE PTR [rbp-0x8]
ffffffff80205e00:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffffffff80205e04:	ee                   	out    dx,al
ffffffff80205e05:	90                   	nop
ffffffff80205e06:	c9                   	leave  
ffffffff80205e07:	c3                   	ret    

ffffffff80205e08 <PIC::RemapIRQs()>:
ffffffff80205e08:	f3 0f 1e fa          	endbr64 
ffffffff80205e0c:	55                   	push   rbp
ffffffff80205e0d:	48 89 e5             	mov    rbp,rsp
ffffffff80205e10:	be 11 00 00 00       	mov    esi,0x11
ffffffff80205e15:	bf 20 00 00 00       	mov    edi,0x20
ffffffff80205e1a:	e8 c8 ff ff ff       	call   ffffffff80205de7 <outb(unsigned short, unsigned char)>
ffffffff80205e1f:	be 11 00 00 00       	mov    esi,0x11
ffffffff80205e24:	bf a0 00 00 00       	mov    edi,0xa0
ffffffff80205e29:	e8 b9 ff ff ff       	call   ffffffff80205de7 <outb(unsigned short, unsigned char)>
ffffffff80205e2e:	be 20 00 00 00       	mov    esi,0x20
ffffffff80205e33:	bf 21 00 00 00       	mov    edi,0x21
ffffffff80205e38:	e8 aa ff ff ff       	call   ffffffff80205de7 <outb(unsigned short, unsigned char)>
ffffffff80205e3d:	be 28 00 00 00       	mov    esi,0x28
ffffffff80205e42:	bf a1 00 00 00       	mov    edi,0xa1
ffffffff80205e47:	e8 9b ff ff ff       	call   ffffffff80205de7 <outb(unsigned short, unsigned char)>
ffffffff80205e4c:	be 04 00 00 00       	mov    esi,0x4
ffffffff80205e51:	bf 21 00 00 00       	mov    edi,0x21
ffffffff80205e56:	e8 8c ff ff ff       	call   ffffffff80205de7 <outb(unsigned short, unsigned char)>
ffffffff80205e5b:	be 02 00 00 00       	mov    esi,0x2
ffffffff80205e60:	bf a1 00 00 00       	mov    edi,0xa1
ffffffff80205e65:	e8 7d ff ff ff       	call   ffffffff80205de7 <outb(unsigned short, unsigned char)>
ffffffff80205e6a:	be 01 00 00 00       	mov    esi,0x1
ffffffff80205e6f:	bf 21 00 00 00       	mov    edi,0x21
ffffffff80205e74:	e8 6e ff ff ff       	call   ffffffff80205de7 <outb(unsigned short, unsigned char)>
ffffffff80205e79:	be 01 00 00 00       	mov    esi,0x1
ffffffff80205e7e:	bf a1 00 00 00       	mov    edi,0xa1
ffffffff80205e83:	e8 5f ff ff ff       	call   ffffffff80205de7 <outb(unsigned short, unsigned char)>
ffffffff80205e88:	be ff 00 00 00       	mov    esi,0xff
ffffffff80205e8d:	bf 21 00 00 00       	mov    edi,0x21
ffffffff80205e92:	e8 50 ff ff ff       	call   ffffffff80205de7 <outb(unsigned short, unsigned char)>
ffffffff80205e97:	be ff 00 00 00       	mov    esi,0xff
ffffffff80205e9c:	bf a1 00 00 00       	mov    edi,0xa1
ffffffff80205ea1:	e8 41 ff ff ff       	call   ffffffff80205de7 <outb(unsigned short, unsigned char)>
ffffffff80205ea6:	90                   	nop
ffffffff80205ea7:	5d                   	pop    rbp
ffffffff80205ea8:	c3                   	ret    

ffffffff80205ea9 <PIC::AckInterruptMaster()>:
ffffffff80205ea9:	f3 0f 1e fa          	endbr64 
ffffffff80205ead:	55                   	push   rbp
ffffffff80205eae:	48 89 e5             	mov    rbp,rsp
ffffffff80205eb1:	be 20 00 00 00       	mov    esi,0x20
ffffffff80205eb6:	bf 20 00 00 00       	mov    edi,0x20
ffffffff80205ebb:	e8 27 ff ff ff       	call   ffffffff80205de7 <outb(unsigned short, unsigned char)>
ffffffff80205ec0:	90                   	nop
ffffffff80205ec1:	5d                   	pop    rbp
ffffffff80205ec2:	c3                   	ret    

ffffffff80205ec3 <PIC::AckInterruptSlave()>:
ffffffff80205ec3:	f3 0f 1e fa          	endbr64 
ffffffff80205ec7:	55                   	push   rbp
ffffffff80205ec8:	48 89 e5             	mov    rbp,rsp
ffffffff80205ecb:	be 20 00 00 00       	mov    esi,0x20
ffffffff80205ed0:	bf a0 00 00 00       	mov    edi,0xa0
ffffffff80205ed5:	e8 0d ff ff ff       	call   ffffffff80205de7 <outb(unsigned short, unsigned char)>
ffffffff80205eda:	90                   	nop
ffffffff80205edb:	5d                   	pop    rbp
ffffffff80205edc:	c3                   	ret    

ffffffff80205edd <outb(unsigned short, unsigned char)>:
ffffffff80205edd:	55                   	push   rbp
ffffffff80205ede:	48 89 e5             	mov    rbp,rsp
ffffffff80205ee1:	48 83 ec 08          	sub    rsp,0x8
ffffffff80205ee5:	89 f8                	mov    eax,edi
ffffffff80205ee7:	89 f2                	mov    edx,esi
ffffffff80205ee9:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
ffffffff80205eed:	89 d0                	mov    eax,edx
ffffffff80205eef:	88 45 f8             	mov    BYTE PTR [rbp-0x8],al
ffffffff80205ef2:	0f b6 45 f8          	movzx  eax,BYTE PTR [rbp-0x8]
ffffffff80205ef6:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffffffff80205efa:	ee                   	out    dx,al
ffffffff80205efb:	90                   	nop
ffffffff80205efc:	c9                   	leave  
ffffffff80205efd:	c3                   	ret    

ffffffff80205efe <HandleTimer(IDT::registers_t*)>:
ffffffff80205efe:	f3 0f 1e fa          	endbr64 
ffffffff80205f02:	55                   	push   rbp
ffffffff80205f03:	48 89 e5             	mov    rbp,rsp
ffffffff80205f06:	48 83 ec 20          	sub    rsp,0x20
ffffffff80205f0a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80205f0e:	48 8b 05 4b 0c 01 00 	mov    rax,QWORD PTR [rip+0x10c4b]        # ffffffff80216b60 <lapic>
ffffffff80205f15:	48 89 c7             	mov    rdi,rax
ffffffff80205f18:	e8 d3 d7 ff ff       	call   ffffffff802036f0 <LAPIC::EOI()>
ffffffff80205f1d:	e8 9f 11 00 00       	call   ffffffff802070c1 <VGA::get_x()>
ffffffff80205f22:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80205f25:	e8 ab 11 00 00       	call   ffffffff802070d5 <VGA::get_y()>
ffffffff80205f2a:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff80205f2d:	be 00 00 00 00       	mov    esi,0x0
ffffffff80205f32:	bf 4f 00 00 00       	mov    edi,0x4f
ffffffff80205f37:	e8 57 11 00 00       	call   ffffffff80207093 <VGA::seek_to(int, int)>
ffffffff80205f3c:	8b 05 3e 4c 01 00    	mov    eax,DWORD PTR [rip+0x14c3e]        # ffffffff8021ab80 <ticker_index>
ffffffff80205f42:	8d 50 01             	lea    edx,[rax+0x1]
ffffffff80205f45:	89 15 35 4c 01 00    	mov    DWORD PTR [rip+0x14c35],edx        # ffffffff8021ab80 <ticker_index>
ffffffff80205f4b:	48 98                	cdqe   
ffffffff80205f4d:	0f b6 80 8b 14 20 80 	movzx  eax,BYTE PTR [rax-0x7fdfeb75]
ffffffff80205f54:	0f be c0             	movsx  eax,al
ffffffff80205f57:	89 c7                	mov    edi,eax
ffffffff80205f59:	e8 ea 0f 00 00       	call   ffffffff80206f48 <VGA::putc(char)>
ffffffff80205f5e:	8b 05 1c 4c 01 00    	mov    eax,DWORD PTR [rip+0x14c1c]        # ffffffff8021ab80 <ticker_index>
ffffffff80205f64:	83 f8 03             	cmp    eax,0x3
ffffffff80205f67:	7e 0a                	jle    ffffffff80205f73 <HandleTimer(IDT::registers_t*)+0x75>
ffffffff80205f69:	c7 05 0d 4c 01 00 00 	mov    DWORD PTR [rip+0x14c0d],0x0        # ffffffff8021ab80 <ticker_index>
ffffffff80205f70:	00 00 00 
ffffffff80205f73:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffffffff80205f76:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80205f79:	89 d6                	mov    esi,edx
ffffffff80205f7b:	89 c7                	mov    edi,eax
ffffffff80205f7d:	e8 11 11 00 00       	call   ffffffff80207093 <VGA::seek_to(int, int)>
ffffffff80205f82:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80205f86:	48 89 c7             	mov    rdi,rax
ffffffff80205f89:	e8 f3 09 00 00       	call   ffffffff80206981 <Scheduler::Tick(IDT::registers_t*)>
ffffffff80205f8e:	90                   	nop
ffffffff80205f8f:	c9                   	leave  
ffffffff80205f90:	c3                   	ret    

ffffffff80205f91 <PIT::Initialize()>:
ffffffff80205f91:	f3 0f 1e fa          	endbr64 
ffffffff80205f95:	55                   	push   rbp
ffffffff80205f96:	48 89 e5             	mov    rbp,rsp
ffffffff80205f99:	48 83 ec 10          	sub    rsp,0x10
ffffffff80205f9d:	48 c7 c6 fe 5e 20 80 	mov    rsi,0xffffffff80205efe
ffffffff80205fa4:	bf 20 00 00 00       	mov    edi,0x20
ffffffff80205fa9:	e8 d1 ef ff ff       	call   ffffffff80204f7f <IDT::RegisterEntry(int, void (*)(IDT::registers_t*))>
ffffffff80205fae:	8b 0d 84 29 00 00    	mov    ecx,DWORD PTR [rip+0x2984]        # ffffffff80208938 <hz>
ffffffff80205fb4:	b8 de 34 12 00       	mov    eax,0x1234de
ffffffff80205fb9:	99                   	cdq    
ffffffff80205fba:	f7 f9                	idiv   ecx
ffffffff80205fbc:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80205fbf:	be 36 00 00 00       	mov    esi,0x36
ffffffff80205fc4:	bf 43 00 00 00       	mov    edi,0x43
ffffffff80205fc9:	e8 0f ff ff ff       	call   ffffffff80205edd <outb(unsigned short, unsigned char)>
ffffffff80205fce:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80205fd1:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
ffffffff80205fd4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80205fd7:	c1 e8 08             	shr    eax,0x8
ffffffff80205fda:	88 45 fa             	mov    BYTE PTR [rbp-0x6],al
ffffffff80205fdd:	0f b6 45 fb          	movzx  eax,BYTE PTR [rbp-0x5]
ffffffff80205fe1:	89 c6                	mov    esi,eax
ffffffff80205fe3:	bf 40 00 00 00       	mov    edi,0x40
ffffffff80205fe8:	e8 f0 fe ff ff       	call   ffffffff80205edd <outb(unsigned short, unsigned char)>
ffffffff80205fed:	0f b6 45 fa          	movzx  eax,BYTE PTR [rbp-0x6]
ffffffff80205ff1:	89 c6                	mov    esi,eax
ffffffff80205ff3:	bf 40 00 00 00       	mov    edi,0x40
ffffffff80205ff8:	e8 e0 fe ff ff       	call   ffffffff80205edd <outb(unsigned short, unsigned char)>
ffffffff80205ffd:	90                   	nop
ffffffff80205ffe:	c9                   	leave  
ffffffff80205fff:	c3                   	ret    

ffffffff80206000 <InnerAlloc(unsigned long, unsigned long)>:
ffffffff80206000:	f3 0f 1e fa          	endbr64 
ffffffff80206004:	55                   	push   rbp
ffffffff80206005:	48 89 e5             	mov    rbp,rsp
ffffffff80206008:	48 83 ec 30          	sub    rsp,0x30
ffffffff8020600c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff80206010:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffffffff80206014:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffffffff8020601b:	00 
ffffffff8020601c:	e9 91 00 00 00       	jmp    ffffffff802060b2 <InnerAlloc(unsigned long, unsigned long)+0xb2>
ffffffff80206021:	48 8b 05 70 4b 01 00 	mov    rax,QWORD PTR [rip+0x14b70]        # ffffffff8021ab98 <lastI>
ffffffff80206028:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff8020602c:	48 89 15 65 4b 01 00 	mov    QWORD PTR [rip+0x14b65],rdx        # ffffffff8021ab98 <lastI>
ffffffff80206033:	48 89 c6             	mov    rsi,rax
ffffffff80206036:	48 c7 c7 88 ab 21 80 	mov    rdi,0xffffffff8021ab88
ffffffff8020603d:	e8 d8 d6 ff ff       	call   ffffffff8020371a <Bitmap::operator[](unsigned long)>
ffffffff80206042:	83 f0 01             	xor    eax,0x1
ffffffff80206045:	84 c0                	test   al,al
ffffffff80206047:	74 61                	je     ffffffff802060aa <InnerAlloc(unsigned long, unsigned long)+0xaa>
ffffffff80206049:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
ffffffff8020604e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80206052:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
ffffffff80206056:	0f 94 c0             	sete   al
ffffffff80206059:	84 c0                	test   al,al
ffffffff8020605b:	74 55                	je     ffffffff802060b2 <InnerAlloc(unsigned long, unsigned long)+0xb2>
ffffffff8020605d:	48 8b 05 34 4b 01 00 	mov    rax,QWORD PTR [rip+0x14b34]        # ffffffff8021ab98 <lastI>
ffffffff80206064:	48 2b 45 d8          	sub    rax,QWORD PTR [rbp-0x28]
ffffffff80206068:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff8020606c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80206070:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80206074:	eb 1d                	jmp    ffffffff80206093 <InnerAlloc(unsigned long, unsigned long)+0x93>
ffffffff80206076:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8020607a:	ba 01 00 00 00       	mov    edx,0x1
ffffffff8020607f:	48 89 c6             	mov    rsi,rax
ffffffff80206082:	48 c7 c7 88 ab 21 80 	mov    rdi,0xffffffff8021ab88
ffffffff80206089:	e8 b6 d6 ff ff       	call   ffffffff80203744 <Bitmap::Set(unsigned long, bool)>
ffffffff8020608e:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
ffffffff80206093:	48 8b 05 fe 4a 01 00 	mov    rax,QWORD PTR [rip+0x14afe]        # ffffffff8021ab98 <lastI>
ffffffff8020609a:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
ffffffff8020609e:	72 d6                	jb     ffffffff80206076 <InnerAlloc(unsigned long, unsigned long)+0x76>
ffffffff802060a0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff802060a4:	48 c1 e0 0c          	shl    rax,0xc
ffffffff802060a8:	eb 1e                	jmp    ffffffff802060c8 <InnerAlloc(unsigned long, unsigned long)+0xc8>
ffffffff802060aa:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffffffff802060b1:	00 
ffffffff802060b2:	48 8b 05 df 4a 01 00 	mov    rax,QWORD PTR [rip+0x14adf]        # ffffffff8021ab98 <lastI>
ffffffff802060b9:	48 39 45 d0          	cmp    QWORD PTR [rbp-0x30],rax
ffffffff802060bd:	0f 87 5e ff ff ff    	ja     ffffffff80206021 <InnerAlloc(unsigned long, unsigned long)+0x21>
ffffffff802060c3:	b8 00 00 00 00       	mov    eax,0x0
ffffffff802060c8:	c9                   	leave  
ffffffff802060c9:	c3                   	ret    

ffffffff802060ca <PhysicalMemory::AllocPages(unsigned long)>:
ffffffff802060ca:	f3 0f 1e fa          	endbr64 
ffffffff802060ce:	55                   	push   rbp
ffffffff802060cf:	48 89 e5             	mov    rbp,rsp
ffffffff802060d2:	48 83 ec 30          	sub    rsp,0x30
ffffffff802060d6:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff802060da:	48 8b 05 b7 4a 01 00 	mov    rax,QWORD PTR [rip+0x14ab7]        # ffffffff8021ab98 <lastI>
ffffffff802060e1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff802060e5:	48 8b 05 a4 4a 01 00 	mov    rax,QWORD PTR [rip+0x14aa4]        # ffffffff8021ab90 <highest_addr>
ffffffff802060ec:	48 c1 e8 0c          	shr    rax,0xc
ffffffff802060f0:	48 89 c2             	mov    rdx,rax
ffffffff802060f3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff802060f7:	48 89 d6             	mov    rsi,rdx
ffffffff802060fa:	48 89 c7             	mov    rdi,rax
ffffffff802060fd:	e8 fe fe ff ff       	call   ffffffff80206000 <InnerAlloc(unsigned long, unsigned long)>
ffffffff80206102:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80206106:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffffffff8020610b:	75 4d                	jne    ffffffff8020615a <PhysicalMemory::AllocPages(unsigned long)+0x90>
ffffffff8020610d:	48 c7 05 80 4a 01 00 	mov    QWORD PTR [rip+0x14a80],0x0        # ffffffff8021ab98 <lastI>
ffffffff80206114:	00 00 00 00 
ffffffff80206118:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff8020611c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80206120:	48 89 d6             	mov    rsi,rdx
ffffffff80206123:	48 89 c7             	mov    rdi,rax
ffffffff80206126:	e8 d5 fe ff ff       	call   ffffffff80206000 <InnerAlloc(unsigned long, unsigned long)>
ffffffff8020612b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff8020612f:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffffffff80206134:	75 24                	jne    ffffffff8020615a <PhysicalMemory::AllocPages(unsigned long)+0x90>
ffffffff80206136:	48 c7 c7 8f 14 20 80 	mov    rdi,0xffffffff8020148f
ffffffff8020613d:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80206142:	e8 ec 13 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff80206147:	48 c7 c7 a6 14 20 80 	mov    rdi,0xffffffff802014a6
ffffffff8020614e:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80206153:	e8 db 13 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff80206158:	eb ed                	jmp    ffffffff80206147 <PhysicalMemory::AllocPages(unsigned long)+0x7d>
ffffffff8020615a:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff80206161:	00 
ffffffff80206162:	eb 0c                	jmp    ffffffff80206170 <PhysicalMemory::AllocPages(unsigned long)+0xa6>
ffffffff80206164:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80206168:	c6 00 00             	mov    BYTE PTR [rax],0x0
ffffffff8020616b:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
ffffffff80206170:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80206174:	48 c1 e0 0c          	shl    rax,0xc
ffffffff80206178:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
ffffffff8020617c:	72 e6                	jb     ffffffff80206164 <PhysicalMemory::AllocPages(unsigned long)+0x9a>
ffffffff8020617e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80206182:	48 c1 e0 0c          	shl    rax,0xc
ffffffff80206186:	48 89 c2             	mov    rdx,rax
ffffffff80206189:	48 8b 05 10 4a 01 00 	mov    rax,QWORD PTR [rip+0x14a10]        # ffffffff8021aba0 <usedRam>
ffffffff80206190:	48 01 d0             	add    rax,rdx
ffffffff80206193:	48 89 05 06 4a 01 00 	mov    QWORD PTR [rip+0x14a06],rax        # ffffffff8021aba0 <usedRam>
ffffffff8020619a:	48 8b 05 07 4a 01 00 	mov    rax,QWORD PTR [rip+0x14a07]        # ffffffff8021aba8 <freeRam>
ffffffff802061a1:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff802061a5:	48 c1 e2 0c          	shl    rdx,0xc
ffffffff802061a9:	48 29 d0             	sub    rax,rdx
ffffffff802061ac:	48 89 05 f5 49 01 00 	mov    QWORD PTR [rip+0x149f5],rax        # ffffffff8021aba8 <freeRam>
ffffffff802061b3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff802061b7:	c9                   	leave  
ffffffff802061b8:	c3                   	ret    

ffffffff802061b9 <PhysicalMemory::FreePages(void*, unsigned long)>:
ffffffff802061b9:	f3 0f 1e fa          	endbr64 
ffffffff802061bd:	55                   	push   rbp
ffffffff802061be:	48 89 e5             	mov    rbp,rsp
ffffffff802061c1:	48 83 ec 20          	sub    rsp,0x20
ffffffff802061c5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff802061c9:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff802061cd:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffffffff802061d2:	0f 84 93 00 00 00    	je     ffffffff8020626b <PhysicalMemory::FreePages(void*, unsigned long)+0xb2>
ffffffff802061d8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff802061dc:	48 c1 e8 0c          	shr    rax,0xc
ffffffff802061e0:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff802061e4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff802061e8:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff802061ec:	eb 1d                	jmp    ffffffff8020620b <PhysicalMemory::FreePages(void*, unsigned long)+0x52>
ffffffff802061ee:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff802061f2:	ba 00 00 00 00       	mov    edx,0x0
ffffffff802061f7:	48 89 c6             	mov    rsi,rax
ffffffff802061fa:	48 c7 c7 88 ab 21 80 	mov    rdi,0xffffffff8021ab88
ffffffff80206201:	e8 3e d5 ff ff       	call   ffffffff80203744 <Bitmap::Set(unsigned long, bool)>
ffffffff80206206:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
ffffffff8020620b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff8020620f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80206213:	48 01 d0             	add    rax,rdx
ffffffff80206216:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
ffffffff8020621a:	72 d2                	jb     ffffffff802061ee <PhysicalMemory::FreePages(void*, unsigned long)+0x35>
ffffffff8020621c:	48 8b 05 75 49 01 00 	mov    rax,QWORD PTR [rip+0x14975]        # ffffffff8021ab98 <lastI>
ffffffff80206223:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
ffffffff80206227:	73 0b                	jae    ffffffff80206234 <PhysicalMemory::FreePages(void*, unsigned long)+0x7b>
ffffffff80206229:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8020622d:	48 89 05 64 49 01 00 	mov    QWORD PTR [rip+0x14964],rax        # ffffffff8021ab98 <lastI>
ffffffff80206234:	48 8b 05 65 49 01 00 	mov    rax,QWORD PTR [rip+0x14965]        # ffffffff8021aba0 <usedRam>
ffffffff8020623b:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff8020623f:	48 c1 e2 0c          	shl    rdx,0xc
ffffffff80206243:	48 29 d0             	sub    rax,rdx
ffffffff80206246:	48 89 05 53 49 01 00 	mov    QWORD PTR [rip+0x14953],rax        # ffffffff8021aba0 <usedRam>
ffffffff8020624d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80206251:	48 c1 e0 0c          	shl    rax,0xc
ffffffff80206255:	48 89 c2             	mov    rdx,rax
ffffffff80206258:	48 8b 05 49 49 01 00 	mov    rax,QWORD PTR [rip+0x14949]        # ffffffff8021aba8 <freeRam>
ffffffff8020625f:	48 01 d0             	add    rax,rdx
ffffffff80206262:	48 89 05 3f 49 01 00 	mov    QWORD PTR [rip+0x1493f],rax        # ffffffff8021aba8 <freeRam>
ffffffff80206269:	eb 01                	jmp    ffffffff8020626c <PhysicalMemory::FreePages(void*, unsigned long)+0xb3>
ffffffff8020626b:	90                   	nop
ffffffff8020626c:	c9                   	leave  
ffffffff8020626d:	c3                   	ret    

ffffffff8020626e <PhysicalMemory::Initialize(stivale2_struct_tag_memmap*)>:
ffffffff8020626e:	f3 0f 1e fa          	endbr64 
ffffffff80206272:	55                   	push   rbp
ffffffff80206273:	48 89 e5             	mov    rbp,rsp
ffffffff80206276:	48 83 ec 50          	sub    rsp,0x50
ffffffff8020627a:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffffffff8020627e:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffffffff80206285:	00 
ffffffff80206286:	e9 c0 00 00 00       	jmp    ffffffff8020634b <PhysicalMemory::Initialize(stivale2_struct_tag_memmap*)+0xdd>
ffffffff8020628b:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffffffff8020628f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80206293:	48 89 d0             	mov    rax,rdx
ffffffff80206296:	48 01 c0             	add    rax,rax
ffffffff80206299:	48 01 d0             	add    rax,rdx
ffffffff8020629c:	48 c1 e0 03          	shl    rax,0x3
ffffffff802062a0:	48 01 c8             	add    rax,rcx
ffffffff802062a3:	48 83 c0 20          	add    rax,0x20
ffffffff802062a7:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff802062aa:	83 f8 01             	cmp    eax,0x1
ffffffff802062ad:	0f 85 92 00 00 00    	jne    ffffffff80206345 <PhysicalMemory::Initialize(stivale2_struct_tag_memmap*)+0xd7>
ffffffff802062b3:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffffffff802062b7:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff802062bb:	48 89 d0             	mov    rax,rdx
ffffffff802062be:	48 01 c0             	add    rax,rax
ffffffff802062c1:	48 01 d0             	add    rax,rdx
ffffffff802062c4:	48 c1 e0 03          	shl    rax,0x3
ffffffff802062c8:	48 01 c8             	add    rax,rcx
ffffffff802062cb:	48 83 c0 10          	add    rax,0x10
ffffffff802062cf:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffffffff802062d3:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
ffffffff802062d7:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff802062db:	48 89 d0             	mov    rax,rdx
ffffffff802062de:	48 01 c0             	add    rax,rax
ffffffff802062e1:	48 01 d0             	add    rax,rdx
ffffffff802062e4:	48 c1 e0 03          	shl    rax,0x3
ffffffff802062e8:	48 01 f0             	add    rax,rsi
ffffffff802062eb:	48 83 c0 10          	add    rax,0x10
ffffffff802062ef:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff802062f3:	48 01 c8             	add    rax,rcx
ffffffff802062f6:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffffffff802062fa:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffffffff802062fe:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80206302:	48 89 d0             	mov    rax,rdx
ffffffff80206305:	48 01 c0             	add    rax,rax
ffffffff80206308:	48 01 d0             	add    rax,rdx
ffffffff8020630b:	48 c1 e0 03          	shl    rax,0x3
ffffffff8020630f:	48 01 c8             	add    rax,rcx
ffffffff80206312:	48 83 c0 10          	add    rax,0x10
ffffffff80206316:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffffffff8020631a:	48 8b 05 87 48 01 00 	mov    rax,QWORD PTR [rip+0x14887]        # ffffffff8021aba8 <freeRam>
ffffffff80206321:	48 01 d0             	add    rax,rdx
ffffffff80206324:	48 89 05 7d 48 01 00 	mov    QWORD PTR [rip+0x1487d],rax        # ffffffff8021aba8 <freeRam>
ffffffff8020632b:	48 8b 05 5e 48 01 00 	mov    rax,QWORD PTR [rip+0x1485e]        # ffffffff8021ab90 <highest_addr>
ffffffff80206332:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
ffffffff80206336:	76 0e                	jbe    ffffffff80206346 <PhysicalMemory::Initialize(stivale2_struct_tag_memmap*)+0xd8>
ffffffff80206338:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff8020633c:	48 89 05 4d 48 01 00 	mov    QWORD PTR [rip+0x1484d],rax        # ffffffff8021ab90 <highest_addr>
ffffffff80206343:	eb 01                	jmp    ffffffff80206346 <PhysicalMemory::Initialize(stivale2_struct_tag_memmap*)+0xd8>
ffffffff80206345:	90                   	nop
ffffffff80206346:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
ffffffff8020634b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff8020634f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80206353:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
ffffffff80206357:	0f 82 2e ff ff ff    	jb     ffffffff8020628b <PhysicalMemory::Initialize(stivale2_struct_tag_memmap*)+0x1d>
ffffffff8020635d:	48 8b 05 2c 48 01 00 	mov    rax,QWORD PTR [rip+0x1482c]        # ffffffff8021ab90 <highest_addr>
ffffffff80206364:	48 c1 e8 0f          	shr    rax,0xf
ffffffff80206368:	48 05 ff 0f 00 00    	add    rax,0xfff
ffffffff8020636e:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffffffff80206374:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff80206378:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff8020637f:	00 
ffffffff80206380:	e9 4c 01 00 00       	jmp    ffffffff802064d1 <PhysicalMemory::Initialize(stivale2_struct_tag_memmap*)+0x263>
ffffffff80206385:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffffffff80206389:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff8020638d:	48 89 d0             	mov    rax,rdx
ffffffff80206390:	48 01 c0             	add    rax,rax
ffffffff80206393:	48 01 d0             	add    rax,rdx
ffffffff80206396:	48 c1 e0 03          	shl    rax,0x3
ffffffff8020639a:	48 01 c8             	add    rax,rcx
ffffffff8020639d:	48 83 c0 20          	add    rax,0x20
ffffffff802063a1:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff802063a4:	83 f8 01             	cmp    eax,0x1
ffffffff802063a7:	0f 85 1e 01 00 00    	jne    ffffffff802064cb <PhysicalMemory::Initialize(stivale2_struct_tag_memmap*)+0x25d>
ffffffff802063ad:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffffffff802063b1:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff802063b5:	48 89 d0             	mov    rax,rdx
ffffffff802063b8:	48 01 c0             	add    rax,rax
ffffffff802063bb:	48 01 d0             	add    rax,rdx
ffffffff802063be:	48 c1 e0 03          	shl    rax,0x3
ffffffff802063c2:	48 01 c8             	add    rax,rcx
ffffffff802063c5:	48 83 c0 10          	add    rax,0x10
ffffffff802063c9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff802063cd:	48 39 45 d0          	cmp    QWORD PTR [rbp-0x30],rax
ffffffff802063d1:	0f 87 f5 00 00 00    	ja     ffffffff802064cc <PhysicalMemory::Initialize(stivale2_struct_tag_memmap*)+0x25e>
ffffffff802063d7:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffffffff802063db:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff802063df:	48 89 d0             	mov    rax,rdx
ffffffff802063e2:	48 01 c0             	add    rax,rax
ffffffff802063e5:	48 01 d0             	add    rax,rdx
ffffffff802063e8:	48 c1 e0 03          	shl    rax,0x3
ffffffff802063ec:	48 01 c8             	add    rax,rcx
ffffffff802063ef:	48 83 c0 10          	add    rax,0x10
ffffffff802063f3:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff802063f7:	48 89 05 8a 47 01 00 	mov    QWORD PTR [rip+0x1478a],rax        # ffffffff8021ab88 <bitmap>
ffffffff802063fe:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffffffff80206405:	00 
ffffffff80206406:	eb 16                	jmp    ffffffff8020641e <PhysicalMemory::Initialize(stivale2_struct_tag_memmap*)+0x1b0>
ffffffff80206408:	48 8b 15 79 47 01 00 	mov    rdx,QWORD PTR [rip+0x14779]        # ffffffff8021ab88 <bitmap>
ffffffff8020640f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80206413:	48 01 d0             	add    rax,rdx
ffffffff80206416:	c6 00 ff             	mov    BYTE PTR [rax],0xff
ffffffff80206419:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
ffffffff8020641e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80206422:	48 3b 45 d0          	cmp    rax,QWORD PTR [rbp-0x30]
ffffffff80206426:	72 e0                	jb     ffffffff80206408 <PhysicalMemory::Initialize(stivale2_struct_tag_memmap*)+0x19a>
ffffffff80206428:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffffffff8020642c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80206430:	48 89 d0             	mov    rax,rdx
ffffffff80206433:	48 01 c0             	add    rax,rax
ffffffff80206436:	48 01 d0             	add    rax,rdx
ffffffff80206439:	48 c1 e0 03          	shl    rax,0x3
ffffffff8020643d:	48 01 c8             	add    rax,rcx
ffffffff80206440:	48 83 c0 10          	add    rax,0x10
ffffffff80206444:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80206448:	48 2b 45 d0          	sub    rax,QWORD PTR [rbp-0x30]
ffffffff8020644c:	48 89 c2             	mov    rdx,rax
ffffffff8020644f:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
ffffffff80206453:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffffffff80206457:	48 89 c8             	mov    rax,rcx
ffffffff8020645a:	48 01 c0             	add    rax,rax
ffffffff8020645d:	48 01 c8             	add    rax,rcx
ffffffff80206460:	48 c1 e0 03          	shl    rax,0x3
ffffffff80206464:	48 01 f0             	add    rax,rsi
ffffffff80206467:	48 83 c0 10          	add    rax,0x10
ffffffff8020646b:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
ffffffff8020646f:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffffffff80206473:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80206477:	48 89 d0             	mov    rax,rdx
ffffffff8020647a:	48 01 c0             	add    rax,rax
ffffffff8020647d:	48 01 d0             	add    rax,rdx
ffffffff80206480:	48 c1 e0 03          	shl    rax,0x3
ffffffff80206484:	48 01 c8             	add    rax,rcx
ffffffff80206487:	48 83 c0 10          	add    rax,0x10
ffffffff8020648b:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff8020648f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80206493:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffffffff80206497:	48 8b 75 b8          	mov    rsi,QWORD PTR [rbp-0x48]
ffffffff8020649b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff8020649f:	48 89 d0             	mov    rax,rdx
ffffffff802064a2:	48 01 c0             	add    rax,rax
ffffffff802064a5:	48 01 d0             	add    rax,rdx
ffffffff802064a8:	48 c1 e0 03          	shl    rax,0x3
ffffffff802064ac:	48 01 f0             	add    rax,rsi
ffffffff802064af:	48 83 c0 10          	add    rax,0x10
ffffffff802064b3:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx
ffffffff802064b7:	48 8b 05 ea 46 01 00 	mov    rax,QWORD PTR [rip+0x146ea]        # ffffffff8021aba8 <freeRam>
ffffffff802064be:	48 2b 45 d0          	sub    rax,QWORD PTR [rbp-0x30]
ffffffff802064c2:	48 89 05 df 46 01 00 	mov    QWORD PTR [rip+0x146df],rax        # ffffffff8021aba8 <freeRam>
ffffffff802064c9:	eb 18                	jmp    ffffffff802064e3 <PhysicalMemory::Initialize(stivale2_struct_tag_memmap*)+0x275>
ffffffff802064cb:	90                   	nop
ffffffff802064cc:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
ffffffff802064d1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff802064d5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff802064d9:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
ffffffff802064dd:	0f 82 a2 fe ff ff    	jb     ffffffff80206385 <PhysicalMemory::Initialize(stivale2_struct_tag_memmap*)+0x117>
ffffffff802064e3:	48 8b 05 9e 46 01 00 	mov    rax,QWORD PTR [rip+0x1469e]        # ffffffff8021ab88 <bitmap>
ffffffff802064ea:	48 89 c1             	mov    rcx,rax
ffffffff802064ed:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff802064f1:	48 89 c2             	mov    rdx,rax
ffffffff802064f4:	48 89 ce             	mov    rsi,rcx
ffffffff802064f7:	48 c7 c7 a7 14 20 80 	mov    rdi,0xffffffff802014a7
ffffffff802064fe:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80206503:	e8 2b 10 00 00       	call   ffffffff80207533 <VGA::print_format(char const*, ...)>
ffffffff80206508:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffffffff8020650f:	00 
ffffffff80206510:	e9 a3 00 00 00       	jmp    ffffffff802065b8 <PhysicalMemory::Initialize(stivale2_struct_tag_memmap*)+0x34a>
ffffffff80206515:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffffffff80206519:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff8020651d:	48 89 d0             	mov    rax,rdx
ffffffff80206520:	48 01 c0             	add    rax,rax
ffffffff80206523:	48 01 d0             	add    rax,rdx
ffffffff80206526:	48 c1 e0 03          	shl    rax,0x3
ffffffff8020652a:	48 01 c8             	add    rax,rcx
ffffffff8020652d:	48 83 c0 20          	add    rax,0x20
ffffffff80206531:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80206534:	83 f8 01             	cmp    eax,0x1
ffffffff80206537:	75 79                	jne    ffffffff802065b2 <PhysicalMemory::Initialize(stivale2_struct_tag_memmap*)+0x344>
ffffffff80206539:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffffffff80206540:	00 
ffffffff80206541:	eb 47                	jmp    ffffffff8020658a <PhysicalMemory::Initialize(stivale2_struct_tag_memmap*)+0x31c>
ffffffff80206543:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffffffff80206547:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff8020654b:	48 89 d0             	mov    rax,rdx
ffffffff8020654e:	48 01 c0             	add    rax,rax
ffffffff80206551:	48 01 d0             	add    rax,rdx
ffffffff80206554:	48 c1 e0 03          	shl    rax,0x3
ffffffff80206558:	48 01 c8             	add    rax,rcx
ffffffff8020655b:	48 83 c0 10          	add    rax,0x10
ffffffff8020655f:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80206563:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80206567:	48 01 d0             	add    rax,rdx
ffffffff8020656a:	48 c1 e8 0c          	shr    rax,0xc
ffffffff8020656e:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80206573:	48 89 c6             	mov    rsi,rax
ffffffff80206576:	48 c7 c7 88 ab 21 80 	mov    rdi,0xffffffff8021ab88
ffffffff8020657d:	e8 c2 d1 ff ff       	call   ffffffff80203744 <Bitmap::Set(unsigned long, bool)>
ffffffff80206582:	48 81 45 d8 00 10 00 	add    QWORD PTR [rbp-0x28],0x1000
ffffffff80206589:	00 
ffffffff8020658a:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffffffff8020658e:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff80206592:	48 89 d0             	mov    rax,rdx
ffffffff80206595:	48 01 c0             	add    rax,rax
ffffffff80206598:	48 01 d0             	add    rax,rdx
ffffffff8020659b:	48 c1 e0 03          	shl    rax,0x3
ffffffff8020659f:	48 01 c8             	add    rax,rcx
ffffffff802065a2:	48 83 c0 10          	add    rax,0x10
ffffffff802065a6:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff802065aa:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffffffff802065ae:	72 93                	jb     ffffffff80206543 <PhysicalMemory::Initialize(stivale2_struct_tag_memmap*)+0x2d5>
ffffffff802065b0:	eb 01                	jmp    ffffffff802065b3 <PhysicalMemory::Initialize(stivale2_struct_tag_memmap*)+0x345>
ffffffff802065b2:	90                   	nop
ffffffff802065b3:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
ffffffff802065b8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff802065bc:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff802065c0:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffffffff802065c4:	0f 82 4b ff ff ff    	jb     ffffffff80206515 <PhysicalMemory::Initialize(stivale2_struct_tag_memmap*)+0x2a7>
ffffffff802065ca:	90                   	nop
ffffffff802065cb:	90                   	nop
ffffffff802065cc:	c9                   	leave  
ffffffff802065cd:	c3                   	ret    

ffffffff802065ce <inb(unsigned short)>:
ffffffff802065ce:	55                   	push   rbp
ffffffff802065cf:	48 89 e5             	mov    rbp,rsp
ffffffff802065d2:	48 83 ec 18          	sub    rsp,0x18
ffffffff802065d6:	89 f8                	mov    eax,edi
ffffffff802065d8:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
ffffffff802065dc:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
ffffffff802065e0:	89 c2                	mov    edx,eax
ffffffff802065e2:	ec                   	in     al,dx
ffffffff802065e3:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
ffffffff802065e6:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
ffffffff802065ea:	c9                   	leave  
ffffffff802065eb:	c3                   	ret    

ffffffff802065ec <outb(unsigned short, unsigned char)>:
ffffffff802065ec:	55                   	push   rbp
ffffffff802065ed:	48 89 e5             	mov    rbp,rsp
ffffffff802065f0:	48 83 ec 08          	sub    rsp,0x8
ffffffff802065f4:	89 f8                	mov    eax,edi
ffffffff802065f6:	89 f2                	mov    edx,esi
ffffffff802065f8:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
ffffffff802065fc:	89 d0                	mov    eax,edx
ffffffff802065fe:	88 45 f8             	mov    BYTE PTR [rbp-0x8],al
ffffffff80206601:	0f b6 45 f8          	movzx  eax,BYTE PTR [rbp-0x8]
ffffffff80206605:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffffffff80206609:	ee                   	out    dx,al
ffffffff8020660a:	90                   	nop
ffffffff8020660b:	c9                   	leave  
ffffffff8020660c:	c3                   	ret    

ffffffff8020660d <ReadRegister(unsigned char)>:
ffffffff8020660d:	f3 0f 1e fa          	endbr64 
ffffffff80206611:	55                   	push   rbp
ffffffff80206612:	48 89 e5             	mov    rbp,rsp
ffffffff80206615:	48 83 ec 08          	sub    rsp,0x8
ffffffff80206619:	89 f8                	mov    eax,edi
ffffffff8020661b:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
ffffffff8020661e:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
ffffffff80206622:	89 c6                	mov    esi,eax
ffffffff80206624:	bf 70 00 00 00       	mov    edi,0x70
ffffffff80206629:	e8 be ff ff ff       	call   ffffffff802065ec <outb(unsigned short, unsigned char)>
ffffffff8020662e:	bf 71 00 00 00       	mov    edi,0x71
ffffffff80206633:	e8 96 ff ff ff       	call   ffffffff802065ce <inb(unsigned short)>
ffffffff80206638:	c9                   	leave  
ffffffff80206639:	c3                   	ret    

ffffffff8020663a <UpdateInProgress()>:
ffffffff8020663a:	f3 0f 1e fa          	endbr64 
ffffffff8020663e:	55                   	push   rbp
ffffffff8020663f:	48 89 e5             	mov    rbp,rsp
ffffffff80206642:	be 0a 00 00 00       	mov    esi,0xa
ffffffff80206647:	bf 70 00 00 00       	mov    edi,0x70
ffffffff8020664c:	e8 9b ff ff ff       	call   ffffffff802065ec <outb(unsigned short, unsigned char)>
ffffffff80206651:	bf 71 00 00 00       	mov    edi,0x71
ffffffff80206656:	e8 73 ff ff ff       	call   ffffffff802065ce <inb(unsigned short)>
ffffffff8020665b:	0f b6 c0             	movzx  eax,al
ffffffff8020665e:	25 80 00 00 00       	and    eax,0x80
ffffffff80206663:	5d                   	pop    rbp
ffffffff80206664:	c3                   	ret    

ffffffff80206665 <RealTimeClock::ReadTime()>:
ffffffff80206665:	f3 0f 1e fa          	endbr64 
ffffffff80206669:	55                   	push   rbp
ffffffff8020666a:	48 89 e5             	mov    rbp,rsp
ffffffff8020666d:	48 83 ec 20          	sub    rsp,0x20
ffffffff80206671:	90                   	nop
ffffffff80206672:	e8 c3 ff ff ff       	call   ffffffff8020663a <UpdateInProgress()>
ffffffff80206677:	85 c0                	test   eax,eax
ffffffff80206679:	0f 95 c0             	setne  al
ffffffff8020667c:	84 c0                	test   al,al
ffffffff8020667e:	75 f2                	jne    ffffffff80206672 <RealTimeClock::ReadTime()+0xd>
ffffffff80206680:	bf 00 00 00 00       	mov    edi,0x0
ffffffff80206685:	e8 83 ff ff ff       	call   ffffffff8020660d <ReadRegister(unsigned char)>
ffffffff8020668a:	88 45 e0             	mov    BYTE PTR [rbp-0x20],al
ffffffff8020668d:	bf 02 00 00 00       	mov    edi,0x2
ffffffff80206692:	e8 76 ff ff ff       	call   ffffffff8020660d <ReadRegister(unsigned char)>
ffffffff80206697:	88 45 e1             	mov    BYTE PTR [rbp-0x1f],al
ffffffff8020669a:	bf 04 00 00 00       	mov    edi,0x4
ffffffff8020669f:	e8 69 ff ff ff       	call   ffffffff8020660d <ReadRegister(unsigned char)>
ffffffff802066a4:	88 45 e2             	mov    BYTE PTR [rbp-0x1e],al
ffffffff802066a7:	bf 06 00 00 00       	mov    edi,0x6
ffffffff802066ac:	e8 5c ff ff ff       	call   ffffffff8020660d <ReadRegister(unsigned char)>
ffffffff802066b1:	88 45 e3             	mov    BYTE PTR [rbp-0x1d],al
ffffffff802066b4:	bf 07 00 00 00       	mov    edi,0x7
ffffffff802066b9:	e8 4f ff ff ff       	call   ffffffff8020660d <ReadRegister(unsigned char)>
ffffffff802066be:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
ffffffff802066c1:	bf 08 00 00 00       	mov    edi,0x8
ffffffff802066c6:	e8 42 ff ff ff       	call   ffffffff8020660d <ReadRegister(unsigned char)>
ffffffff802066cb:	88 45 e5             	mov    BYTE PTR [rbp-0x1b],al
ffffffff802066ce:	bf 09 00 00 00       	mov    edi,0x9
ffffffff802066d3:	e8 35 ff ff ff       	call   ffffffff8020660d <ReadRegister(unsigned char)>
ffffffff802066d8:	0f b6 c0             	movzx  eax,al
ffffffff802066db:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
ffffffff802066de:	bf 32 00 00 00       	mov    edi,0x32
ffffffff802066e3:	e8 25 ff ff ff       	call   ffffffff8020660d <ReadRegister(unsigned char)>
ffffffff802066e8:	88 45 ec             	mov    BYTE PTR [rbp-0x14],al
ffffffff802066eb:	bf 0b 00 00 00       	mov    edi,0xb
ffffffff802066f0:	e8 18 ff ff ff       	call   ffffffff8020660d <ReadRegister(unsigned char)>
ffffffff802066f5:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
ffffffff802066f8:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
ffffffff802066fc:	83 e0 04             	and    eax,0x4
ffffffff802066ff:	85 c0                	test   eax,eax
ffffffff80206701:	0f 85 cc 00 00 00    	jne    ffffffff802067d3 <RealTimeClock::ReadTime()+0x16e>
ffffffff80206707:	0f b6 45 e0          	movzx  eax,BYTE PTR [rbp-0x20]
ffffffff8020670b:	83 e0 0f             	and    eax,0xf
ffffffff8020670e:	89 c1                	mov    ecx,eax
ffffffff80206710:	0f b6 45 e0          	movzx  eax,BYTE PTR [rbp-0x20]
ffffffff80206714:	c0 e8 04             	shr    al,0x4
ffffffff80206717:	89 c2                	mov    edx,eax
ffffffff80206719:	89 d0                	mov    eax,edx
ffffffff8020671b:	c1 e0 02             	shl    eax,0x2
ffffffff8020671e:	01 d0                	add    eax,edx
ffffffff80206720:	01 c0                	add    eax,eax
ffffffff80206722:	01 c8                	add    eax,ecx
ffffffff80206724:	88 45 e0             	mov    BYTE PTR [rbp-0x20],al
ffffffff80206727:	0f b6 45 e1          	movzx  eax,BYTE PTR [rbp-0x1f]
ffffffff8020672b:	83 e0 0f             	and    eax,0xf
ffffffff8020672e:	89 c1                	mov    ecx,eax
ffffffff80206730:	0f b6 45 e1          	movzx  eax,BYTE PTR [rbp-0x1f]
ffffffff80206734:	c0 e8 04             	shr    al,0x4
ffffffff80206737:	89 c2                	mov    edx,eax
ffffffff80206739:	89 d0                	mov    eax,edx
ffffffff8020673b:	c1 e0 02             	shl    eax,0x2
ffffffff8020673e:	01 d0                	add    eax,edx
ffffffff80206740:	01 c0                	add    eax,eax
ffffffff80206742:	01 c8                	add    eax,ecx
ffffffff80206744:	88 45 e1             	mov    BYTE PTR [rbp-0x1f],al
ffffffff80206747:	0f b6 45 e2          	movzx  eax,BYTE PTR [rbp-0x1e]
ffffffff8020674b:	83 e0 0f             	and    eax,0xf
ffffffff8020674e:	89 c1                	mov    ecx,eax
ffffffff80206750:	0f b6 45 e2          	movzx  eax,BYTE PTR [rbp-0x1e]
ffffffff80206754:	83 e0 70             	and    eax,0x70
ffffffff80206757:	c0 e8 04             	shr    al,0x4
ffffffff8020675a:	89 c2                	mov    edx,eax
ffffffff8020675c:	89 d0                	mov    eax,edx
ffffffff8020675e:	c1 e0 02             	shl    eax,0x2
ffffffff80206761:	01 d0                	add    eax,edx
ffffffff80206763:	01 c0                	add    eax,eax
ffffffff80206765:	01 c8                	add    eax,ecx
ffffffff80206767:	89 c2                	mov    edx,eax
ffffffff80206769:	0f b6 45 e2          	movzx  eax,BYTE PTR [rbp-0x1e]
ffffffff8020676d:	83 e0 80             	and    eax,0xffffff80
ffffffff80206770:	09 d0                	or     eax,edx
ffffffff80206772:	88 45 e2             	mov    BYTE PTR [rbp-0x1e],al
ffffffff80206775:	0f b6 45 e4          	movzx  eax,BYTE PTR [rbp-0x1c]
ffffffff80206779:	83 e0 0f             	and    eax,0xf
ffffffff8020677c:	89 c1                	mov    ecx,eax
ffffffff8020677e:	0f b6 45 e4          	movzx  eax,BYTE PTR [rbp-0x1c]
ffffffff80206782:	c0 e8 04             	shr    al,0x4
ffffffff80206785:	89 c2                	mov    edx,eax
ffffffff80206787:	89 d0                	mov    eax,edx
ffffffff80206789:	c1 e0 02             	shl    eax,0x2
ffffffff8020678c:	01 d0                	add    eax,edx
ffffffff8020678e:	01 c0                	add    eax,eax
ffffffff80206790:	01 c8                	add    eax,ecx
ffffffff80206792:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
ffffffff80206795:	0f b6 45 e5          	movzx  eax,BYTE PTR [rbp-0x1b]
ffffffff80206799:	83 e0 0f             	and    eax,0xf
ffffffff8020679c:	89 c1                	mov    ecx,eax
ffffffff8020679e:	0f b6 45 e5          	movzx  eax,BYTE PTR [rbp-0x1b]
ffffffff802067a2:	c0 e8 04             	shr    al,0x4
ffffffff802067a5:	89 c2                	mov    edx,eax
ffffffff802067a7:	89 d0                	mov    eax,edx
ffffffff802067a9:	c1 e0 02             	shl    eax,0x2
ffffffff802067ac:	01 d0                	add    eax,edx
ffffffff802067ae:	01 c0                	add    eax,eax
ffffffff802067b0:	01 c8                	add    eax,ecx
ffffffff802067b2:	88 45 e5             	mov    BYTE PTR [rbp-0x1b],al
ffffffff802067b5:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffffffff802067b8:	83 e0 0f             	and    eax,0xf
ffffffff802067bb:	89 c1                	mov    ecx,eax
ffffffff802067bd:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffffffff802067c0:	c1 e8 04             	shr    eax,0x4
ffffffff802067c3:	89 c2                	mov    edx,eax
ffffffff802067c5:	89 d0                	mov    eax,edx
ffffffff802067c7:	c1 e0 02             	shl    eax,0x2
ffffffff802067ca:	01 d0                	add    eax,edx
ffffffff802067cc:	01 c0                	add    eax,eax
ffffffff802067ce:	01 c8                	add    eax,ecx
ffffffff802067d0:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
ffffffff802067d3:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
ffffffff802067d7:	83 e0 02             	and    eax,0x2
ffffffff802067da:	85 c0                	test   eax,eax
ffffffff802067dc:	75 41                	jne    ffffffff8020681f <RealTimeClock::ReadTime()+0x1ba>
ffffffff802067de:	0f b6 45 e2          	movzx  eax,BYTE PTR [rbp-0x1e]
ffffffff802067e2:	84 c0                	test   al,al
ffffffff802067e4:	79 39                	jns    ffffffff8020681f <RealTimeClock::ReadTime()+0x1ba>
ffffffff802067e6:	0f b6 45 e2          	movzx  eax,BYTE PTR [rbp-0x1e]
ffffffff802067ea:	0f b6 c0             	movzx  eax,al
ffffffff802067ed:	83 e0 7f             	and    eax,0x7f
ffffffff802067f0:	8d 50 0c             	lea    edx,[rax+0xc]
ffffffff802067f3:	48 63 c2             	movsxd rax,edx
ffffffff802067f6:	48 69 c0 ab aa aa 2a 	imul   rax,rax,0x2aaaaaab
ffffffff802067fd:	48 c1 e8 20          	shr    rax,0x20
ffffffff80206801:	c1 f8 02             	sar    eax,0x2
ffffffff80206804:	89 d6                	mov    esi,edx
ffffffff80206806:	c1 fe 1f             	sar    esi,0x1f
ffffffff80206809:	29 f0                	sub    eax,esi
ffffffff8020680b:	89 c1                	mov    ecx,eax
ffffffff8020680d:	89 c8                	mov    eax,ecx
ffffffff8020680f:	01 c0                	add    eax,eax
ffffffff80206811:	01 c8                	add    eax,ecx
ffffffff80206813:	c1 e0 03             	shl    eax,0x3
ffffffff80206816:	89 d1                	mov    ecx,edx
ffffffff80206818:	29 c1                	sub    ecx,eax
ffffffff8020681a:	89 c8                	mov    eax,ecx
ffffffff8020681c:	88 45 e2             	mov    BYTE PTR [rbp-0x1e],al
ffffffff8020681f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80206823:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80206827:	c9                   	leave  
ffffffff80206828:	c3                   	ret    

ffffffff80206829 <Scheduler::Initialize()>:
ffffffff80206829:	f3 0f 1e fa          	endbr64 
ffffffff8020682d:	55                   	push   rbp
ffffffff8020682e:	48 89 e5             	mov    rbp,rsp
ffffffff80206831:	48 c7 05 74 43 01 00 	mov    QWORD PTR [rip+0x14374],0x0        # ffffffff8021abb0 <head>
ffffffff80206838:	00 00 00 00 
ffffffff8020683c:	48 8b 05 6d 43 01 00 	mov    rax,QWORD PTR [rip+0x1436d]        # ffffffff8021abb0 <head>
ffffffff80206843:	48 89 05 76 43 01 00 	mov    QWORD PTR [rip+0x14376],rax        # ffffffff8021abc0 <cur_thread>
ffffffff8020684a:	c6 05 77 43 01 00 01 	mov    BYTE PTR [rip+0x14377],0x1        # ffffffff8021abc8 <inited>
ffffffff80206851:	90                   	nop
ffffffff80206852:	5d                   	pop    rbp
ffffffff80206853:	c3                   	ret    

ffffffff80206854 <Scheduler::AddThread(unsigned long)>:
ffffffff80206854:	f3 0f 1e fa          	endbr64 
ffffffff80206858:	55                   	push   rbp
ffffffff80206859:	48 89 e5             	mov    rbp,rsp
ffffffff8020685c:	48 83 ec 20          	sub    rsp,0x20
ffffffff80206860:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80206864:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80206868:	48 89 c7             	mov    rdi,rax
ffffffff8020686b:	e8 37 03 00 00       	call   ffffffff80206ba7 <CreateThread(unsigned long)>
ffffffff80206870:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80206874:	48 8b 05 35 43 01 00 	mov    rax,QWORD PTR [rip+0x14335]        # ffffffff8021abb0 <head>
ffffffff8020687b:	48 85 c0             	test   rax,rax
ffffffff8020687e:	75 0b                	jne    ffffffff8020688b <Scheduler::AddThread(unsigned long)+0x37>
ffffffff80206880:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80206884:	48 89 05 25 43 01 00 	mov    QWORD PTR [rip+0x14325],rax        # ffffffff8021abb0 <head>
ffffffff8020688b:	48 8b 05 26 43 01 00 	mov    rax,QWORD PTR [rip+0x14326]        # ffffffff8021abb8 <tail>
ffffffff80206892:	48 85 c0             	test   rax,rax
ffffffff80206895:	74 0f                	je     ffffffff802068a6 <Scheduler::AddThread(unsigned long)+0x52>
ffffffff80206897:	48 8b 05 1a 43 01 00 	mov    rax,QWORD PTR [rip+0x1431a]        # ffffffff8021abb8 <tail>
ffffffff8020689e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff802068a2:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
ffffffff802068a6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff802068aa:	48 89 05 07 43 01 00 	mov    QWORD PTR [rip+0x14307],rax        # ffffffff8021abb8 <tail>
ffffffff802068b1:	90                   	nop
ffffffff802068b2:	c9                   	leave  
ffffffff802068b3:	c3                   	ret    

ffffffff802068b4 <SchedMemcpy(void*, void*, unsigned long)>:
ffffffff802068b4:	f3 0f 1e fa          	endbr64 
ffffffff802068b8:	55                   	push   rbp
ffffffff802068b9:	48 89 e5             	mov    rbp,rsp
ffffffff802068bc:	48 83 ec 38          	sub    rsp,0x38
ffffffff802068c0:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff802068c4:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffffffff802068c8:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffffffff802068cc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff802068d0:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff802068d4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff802068d8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff802068dc:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffffffff802068e3:	00 
ffffffff802068e4:	eb 20                	jmp    ffffffff80206906 <SchedMemcpy(void*, void*, unsigned long)+0x52>
ffffffff802068e6:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff802068ea:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff802068ee:	48 01 d0             	add    rax,rdx
ffffffff802068f1:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffffffff802068f5:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff802068f9:	48 01 ca             	add    rdx,rcx
ffffffff802068fc:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff802068ff:	88 02                	mov    BYTE PTR [rdx],al
ffffffff80206901:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
ffffffff80206906:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8020690a:	48 3b 45 c8          	cmp    rax,QWORD PTR [rbp-0x38]
ffffffff8020690e:	72 d6                	jb     ffffffff802068e6 <SchedMemcpy(void*, void*, unsigned long)+0x32>
ffffffff80206910:	90                   	nop
ffffffff80206911:	90                   	nop
ffffffff80206912:	c9                   	leave  
ffffffff80206913:	c3                   	ret    

ffffffff80206914 <GetNext()>:
ffffffff80206914:	f3 0f 1e fa          	endbr64 
ffffffff80206918:	55                   	push   rbp
ffffffff80206919:	48 89 e5             	mov    rbp,rsp
ffffffff8020691c:	48 8b 05 9d 42 01 00 	mov    rax,QWORD PTR [rip+0x1429d]        # ffffffff8021abc0 <cur_thread>
ffffffff80206923:	48 85 c0             	test   rax,rax
ffffffff80206926:	75 17                	jne    ffffffff8020693f <GetNext()+0x2b>
ffffffff80206928:	48 8b 05 81 42 01 00 	mov    rax,QWORD PTR [rip+0x14281]        # ffffffff8021abb0 <head>
ffffffff8020692f:	48 89 05 8a 42 01 00 	mov    QWORD PTR [rip+0x1428a],rax        # ffffffff8021abc0 <cur_thread>
ffffffff80206936:	48 8b 05 83 42 01 00 	mov    rax,QWORD PTR [rip+0x14283]        # ffffffff8021abc0 <cur_thread>
ffffffff8020693d:	eb 40                	jmp    ffffffff8020697f <GetNext()+0x6b>
ffffffff8020693f:	48 8b 05 7a 42 01 00 	mov    rax,QWORD PTR [rip+0x1427a]        # ffffffff8021abc0 <cur_thread>
ffffffff80206946:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff8020694a:	48 85 c0             	test   rax,rax
ffffffff8020694d:	74 1b                	je     ffffffff8020696a <GetNext()+0x56>
ffffffff8020694f:	48 8b 05 6a 42 01 00 	mov    rax,QWORD PTR [rip+0x1426a]        # ffffffff8021abc0 <cur_thread>
ffffffff80206956:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff8020695a:	48 89 05 5f 42 01 00 	mov    QWORD PTR [rip+0x1425f],rax        # ffffffff8021abc0 <cur_thread>
ffffffff80206961:	48 8b 05 58 42 01 00 	mov    rax,QWORD PTR [rip+0x14258]        # ffffffff8021abc0 <cur_thread>
ffffffff80206968:	eb 15                	jmp    ffffffff8020697f <GetNext()+0x6b>
ffffffff8020696a:	48 8b 05 3f 42 01 00 	mov    rax,QWORD PTR [rip+0x1423f]        # ffffffff8021abb0 <head>
ffffffff80206971:	48 89 05 48 42 01 00 	mov    QWORD PTR [rip+0x14248],rax        # ffffffff8021abc0 <cur_thread>
ffffffff80206978:	48 8b 05 41 42 01 00 	mov    rax,QWORD PTR [rip+0x14241]        # ffffffff8021abc0 <cur_thread>
ffffffff8020697f:	5d                   	pop    rbp
ffffffff80206980:	c3                   	ret    

ffffffff80206981 <Scheduler::Tick(IDT::registers_t*)>:
ffffffff80206981:	f3 0f 1e fa          	endbr64 
ffffffff80206985:	55                   	push   rbp
ffffffff80206986:	48 89 e5             	mov    rbp,rsp
ffffffff80206989:	53                   	push   rbx
ffffffff8020698a:	48 83 ec 28          	sub    rsp,0x28
ffffffff8020698e:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff80206992:	0f b6 05 2f 42 01 00 	movzx  eax,BYTE PTR [rip+0x1422f]        # ffffffff8021abc8 <inited>
ffffffff80206999:	83 f0 01             	xor    eax,0x1
ffffffff8020699c:	84 c0                	test   al,al
ffffffff8020699e:	0f 85 47 01 00 00    	jne    ffffffff80206aeb <Scheduler::Tick(IDT::registers_t*)+0x16a>
ffffffff802069a4:	48 8b 05 05 42 01 00 	mov    rax,QWORD PTR [rip+0x14205]        # ffffffff8021abb0 <head>
ffffffff802069ab:	48 85 c0             	test   rax,rax
ffffffff802069ae:	0f 84 3a 01 00 00    	je     ffffffff80206aee <Scheduler::Tick(IDT::registers_t*)+0x16d>
ffffffff802069b4:	48 8b 05 05 42 01 00 	mov    rax,QWORD PTR [rip+0x14205]        # ffffffff8021abc0 <cur_thread>
ffffffff802069bb:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff802069bf:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffffffff802069c2:	48 8b 5a 08          	mov    rbx,QWORD PTR [rdx+0x8]
ffffffff802069c6:	48 89 48 10          	mov    QWORD PTR [rax+0x10],rcx
ffffffff802069ca:	48 89 58 18          	mov    QWORD PTR [rax+0x18],rbx
ffffffff802069ce:	48 8b 4a 10          	mov    rcx,QWORD PTR [rdx+0x10]
ffffffff802069d2:	48 8b 5a 18          	mov    rbx,QWORD PTR [rdx+0x18]
ffffffff802069d6:	48 89 48 20          	mov    QWORD PTR [rax+0x20],rcx
ffffffff802069da:	48 89 58 28          	mov    QWORD PTR [rax+0x28],rbx
ffffffff802069de:	48 8b 4a 20          	mov    rcx,QWORD PTR [rdx+0x20]
ffffffff802069e2:	48 8b 5a 28          	mov    rbx,QWORD PTR [rdx+0x28]
ffffffff802069e6:	48 89 48 30          	mov    QWORD PTR [rax+0x30],rcx
ffffffff802069ea:	48 89 58 38          	mov    QWORD PTR [rax+0x38],rbx
ffffffff802069ee:	48 8b 4a 30          	mov    rcx,QWORD PTR [rdx+0x30]
ffffffff802069f2:	48 8b 5a 38          	mov    rbx,QWORD PTR [rdx+0x38]
ffffffff802069f6:	48 89 48 40          	mov    QWORD PTR [rax+0x40],rcx
ffffffff802069fa:	48 89 58 48          	mov    QWORD PTR [rax+0x48],rbx
ffffffff802069fe:	48 8b 4a 40          	mov    rcx,QWORD PTR [rdx+0x40]
ffffffff80206a02:	48 8b 5a 48          	mov    rbx,QWORD PTR [rdx+0x48]
ffffffff80206a06:	48 89 48 50          	mov    QWORD PTR [rax+0x50],rcx
ffffffff80206a0a:	48 89 58 58          	mov    QWORD PTR [rax+0x58],rbx
ffffffff80206a0e:	48 8b 4a 50          	mov    rcx,QWORD PTR [rdx+0x50]
ffffffff80206a12:	48 8b 5a 58          	mov    rbx,QWORD PTR [rdx+0x58]
ffffffff80206a16:	48 89 48 60          	mov    QWORD PTR [rax+0x60],rcx
ffffffff80206a1a:	48 89 58 68          	mov    QWORD PTR [rax+0x68],rbx
ffffffff80206a1e:	48 8b 4a 60          	mov    rcx,QWORD PTR [rdx+0x60]
ffffffff80206a22:	48 8b 5a 68          	mov    rbx,QWORD PTR [rdx+0x68]
ffffffff80206a26:	48 89 48 70          	mov    QWORD PTR [rax+0x70],rcx
ffffffff80206a2a:	48 89 58 78          	mov    QWORD PTR [rax+0x78],rbx
ffffffff80206a2e:	48 8b 4a 70          	mov    rcx,QWORD PTR [rdx+0x70]
ffffffff80206a32:	48 8b 5a 78          	mov    rbx,QWORD PTR [rdx+0x78]
ffffffff80206a36:	48 89 88 80 00 00 00 	mov    QWORD PTR [rax+0x80],rcx
ffffffff80206a3d:	48 89 98 88 00 00 00 	mov    QWORD PTR [rax+0x88],rbx
ffffffff80206a44:	48 8b 8a 80 00 00 00 	mov    rcx,QWORD PTR [rdx+0x80]
ffffffff80206a4b:	48 8b 9a 88 00 00 00 	mov    rbx,QWORD PTR [rdx+0x88]
ffffffff80206a52:	48 89 88 90 00 00 00 	mov    QWORD PTR [rax+0x90],rcx
ffffffff80206a59:	48 89 98 98 00 00 00 	mov    QWORD PTR [rax+0x98],rbx
ffffffff80206a60:	48 8b 8a 90 00 00 00 	mov    rcx,QWORD PTR [rdx+0x90]
ffffffff80206a67:	48 8b 9a 98 00 00 00 	mov    rbx,QWORD PTR [rdx+0x98]
ffffffff80206a6e:	48 89 88 a0 00 00 00 	mov    QWORD PTR [rax+0xa0],rcx
ffffffff80206a75:	48 89 98 a8 00 00 00 	mov    QWORD PTR [rax+0xa8],rbx
ffffffff80206a7c:	48 8b 8a a0 00 00 00 	mov    rcx,QWORD PTR [rdx+0xa0]
ffffffff80206a83:	48 8b 9a a8 00 00 00 	mov    rbx,QWORD PTR [rdx+0xa8]
ffffffff80206a8a:	48 89 88 b0 00 00 00 	mov    QWORD PTR [rax+0xb0],rcx
ffffffff80206a91:	48 89 98 b8 00 00 00 	mov    QWORD PTR [rax+0xb8],rbx
ffffffff80206a98:	e8 77 fe ff ff       	call   ffffffff80206914 <GetNext()>
ffffffff80206a9d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80206aa1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80206aa5:	48 8b 80 c0 00 00 00 	mov    rax,QWORD PTR [rax+0xc0]
ffffffff80206aac:	48 89 c7             	mov    rdi,rax
ffffffff80206aaf:	e8 0b d0 ff ff       	call   ffffffff80203abf <GDT::SetKernelStack(unsigned long)>
ffffffff80206ab4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80206ab8:	48 8d 50 10          	lea    rdx,[rax+0x10]
ffffffff80206abc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80206ac0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80206ac3:	48 89 d4             	mov    rsp,rdx
ffffffff80206ac6:	48 89 c0             	mov    rax,rax
ffffffff80206ac9:	41 5f                	pop    r15
ffffffff80206acb:	41 5e                	pop    r14
ffffffff80206acd:	41 5d                	pop    r13
ffffffff80206acf:	41 5c                	pop    r12
ffffffff80206ad1:	41 5b                	pop    r11
ffffffff80206ad3:	41 5a                	pop    r10
ffffffff80206ad5:	41 59                	pop    r9
ffffffff80206ad7:	41 58                	pop    r8
ffffffff80206ad9:	5d                   	pop    rbp
ffffffff80206ada:	5f                   	pop    rdi
ffffffff80206adb:	5e                   	pop    rsi
ffffffff80206adc:	5a                   	pop    rdx
ffffffff80206add:	59                   	pop    rcx
ffffffff80206ade:	5b                   	pop    rbx
ffffffff80206adf:	0f 22 d8             	mov    cr3,rax
ffffffff80206ae2:	58                   	pop    rax
ffffffff80206ae3:	48 83 c4 08          	add    rsp,0x8
ffffffff80206ae7:	48 cf                	iretq  
ffffffff80206ae9:	eb 04                	jmp    ffffffff80206aef <Scheduler::Tick(IDT::registers_t*)+0x16e>
ffffffff80206aeb:	90                   	nop
ffffffff80206aec:	eb 01                	jmp    ffffffff80206aef <Scheduler::Tick(IDT::registers_t*)+0x16e>
ffffffff80206aee:	90                   	nop
ffffffff80206aef:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffffffff80206af3:	c9                   	leave  
ffffffff80206af4:	c3                   	ret    
ffffffff80206af5:	90                   	nop

ffffffff80206af6 <Spinlock::Spinlock()>:
ffffffff80206af6:	f3 0f 1e fa          	endbr64 
ffffffff80206afa:	55                   	push   rbp
ffffffff80206afb:	48 89 e5             	mov    rbp,rsp
ffffffff80206afe:	48 83 ec 10          	sub    rsp,0x10
ffffffff80206b02:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80206b06:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80206b0a:	48 89 c7             	mov    rdi,rax
ffffffff80206b0d:	e8 28 00 00 00       	call   ffffffff80206b3a <Spinlock::Release()>
ffffffff80206b12:	90                   	nop
ffffffff80206b13:	c9                   	leave  
ffffffff80206b14:	c3                   	ret    
ffffffff80206b15:	90                   	nop

ffffffff80206b16 <Spinlock::Lock()>:
ffffffff80206b16:	f3 0f 1e fa          	endbr64 
ffffffff80206b1a:	55                   	push   rbp
ffffffff80206b1b:	48 89 e5             	mov    rbp,rsp
ffffffff80206b1e:	48 83 ec 08          	sub    rsp,0x8
ffffffff80206b22:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80206b26:	90                   	nop
ffffffff80206b27:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80206b2b:	b8 01 00 00 00       	mov    eax,0x1
ffffffff80206b30:	86 02                	xchg   BYTE PTR [rdx],al
ffffffff80206b32:	84 c0                	test   al,al
ffffffff80206b34:	75 f1                	jne    ffffffff80206b27 <Spinlock::Lock()+0x11>
ffffffff80206b36:	90                   	nop
ffffffff80206b37:	90                   	nop
ffffffff80206b38:	c9                   	leave  
ffffffff80206b39:	c3                   	ret    

ffffffff80206b3a <Spinlock::Release()>:
ffffffff80206b3a:	f3 0f 1e fa          	endbr64 
ffffffff80206b3e:	55                   	push   rbp
ffffffff80206b3f:	48 89 e5             	mov    rbp,rsp
ffffffff80206b42:	48 83 ec 08          	sub    rsp,0x8
ffffffff80206b46:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80206b4a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80206b4e:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80206b53:	88 10                	mov    BYTE PTR [rax],dl
ffffffff80206b55:	90                   	nop
ffffffff80206b56:	c9                   	leave  
ffffffff80206b57:	c3                   	ret    

ffffffff80206b58 <memset(void*, char, unsigned long)>:
ffffffff80206b58:	f3 0f 1e fa          	endbr64 
ffffffff80206b5c:	55                   	push   rbp
ffffffff80206b5d:	48 89 e5             	mov    rbp,rsp
ffffffff80206b60:	48 83 ec 28          	sub    rsp,0x28
ffffffff80206b64:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80206b68:	89 f0                	mov    eax,esi
ffffffff80206b6a:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff80206b6e:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
ffffffff80206b71:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80206b75:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80206b79:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffffffff80206b80:	00 
ffffffff80206b81:	eb 16                	jmp    ffffffff80206b99 <memset(void*, char, unsigned long)+0x41>
ffffffff80206b83:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80206b87:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80206b8b:	48 01 c2             	add    rdx,rax
ffffffff80206b8e:	0f b6 45 e4          	movzx  eax,BYTE PTR [rbp-0x1c]
ffffffff80206b92:	88 02                	mov    BYTE PTR [rdx],al
ffffffff80206b94:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
ffffffff80206b99:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80206b9d:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
ffffffff80206ba1:	72 e0                	jb     ffffffff80206b83 <memset(void*, char, unsigned long)+0x2b>
ffffffff80206ba3:	90                   	nop
ffffffff80206ba4:	90                   	nop
ffffffff80206ba5:	c9                   	leave  
ffffffff80206ba6:	c3                   	ret    

ffffffff80206ba7 <CreateThread(unsigned long)>:
ffffffff80206ba7:	f3 0f 1e fa          	endbr64 
ffffffff80206bab:	55                   	push   rbp
ffffffff80206bac:	48 89 e5             	mov    rbp,rsp
ffffffff80206baf:	48 83 ec 30          	sub    rsp,0x30
ffffffff80206bb3:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff80206bb7:	bf c8 00 00 00       	mov    edi,0xc8
ffffffff80206bbc:	e8 a3 e0 ff ff       	call   ffffffff80204c64 <operator new(unsigned long)>
ffffffff80206bc1:	49 89 c0             	mov    r8,rax
ffffffff80206bc4:	4c 89 c6             	mov    rsi,r8
ffffffff80206bc7:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80206bcc:	ba 19 00 00 00       	mov    edx,0x19
ffffffff80206bd1:	48 89 f7             	mov    rdi,rsi
ffffffff80206bd4:	48 89 d1             	mov    rcx,rdx
ffffffff80206bd7:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
ffffffff80206bda:	4c 89 45 f8          	mov    QWORD PTR [rbp-0x8],r8
ffffffff80206bde:	bf 04 00 00 00       	mov    edi,0x4
ffffffff80206be3:	e8 e2 f4 ff ff       	call   ffffffff802060ca <PhysicalMemory::AllocPages(unsigned long)>
ffffffff80206be8:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80206bec:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80206bf0:	ba 08 00 00 00       	mov    edx,0x8
ffffffff80206bf5:	be 00 00 00 00       	mov    esi,0x0
ffffffff80206bfa:	48 89 c7             	mov    rdi,rax
ffffffff80206bfd:	e8 56 ff ff ff       	call   ffffffff80206b58 <memset(void*, char, unsigned long)>
ffffffff80206c02:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80206c06:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff80206c0a:	48 89 90 98 00 00 00 	mov    QWORD PTR [rax+0x98],rdx
ffffffff80206c11:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80206c15:	48 b9 00 40 00 00 00 	movabs rcx,0xffffb00000004000
ffffffff80206c1c:	b0 ff ff 
ffffffff80206c1f:	48 89 88 b0 00 00 00 	mov    QWORD PTR [rax+0xb0],rcx
ffffffff80206c26:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80206c2a:	48 c7 80 a8 00 00 00 	mov    QWORD PTR [rax+0xa8],0x202
ffffffff80206c31:	02 02 00 00 
ffffffff80206c35:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80206c39:	48 c7 80 a0 00 00 00 	mov    QWORD PTR [rax+0xa0],0x8
ffffffff80206c40:	08 00 00 00 
ffffffff80206c44:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80206c48:	48 c7 80 b8 00 00 00 	mov    QWORD PTR [rax+0xb8],0x10
ffffffff80206c4f:	10 00 00 00 
ffffffff80206c53:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80206c57:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffffffff80206c5e:	00 
ffffffff80206c5f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80206c63:	be 00 40 00 00       	mov    esi,0x4000
ffffffff80206c68:	48 89 c7             	mov    rdi,rax
ffffffff80206c6b:	e8 34 0b 00 00       	call   ffffffff802077a4 <VirtualMemory::CreateNewAddressSpace(unsigned long, unsigned long)>
ffffffff80206c70:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80206c74:	48 89 02             	mov    QWORD PTR [rdx],rax
ffffffff80206c77:	bf 00 00 08 00       	mov    edi,0x80000
ffffffff80206c7c:	e8 c5 df ff ff       	call   ffffffff80204c46 <operator new[](unsigned long)>
ffffffff80206c81:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80206c85:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80206c89:	48 8d 90 00 00 08 00 	lea    rdx,[rax+0x80000]
ffffffff80206c90:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80206c94:	48 89 90 c0 00 00 00 	mov    QWORD PTR [rax+0xc0],rdx
ffffffff80206c9b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80206c9f:	c9                   	leave  
ffffffff80206ca0:	c3                   	ret    

ffffffff80206ca1 <outb(unsigned short, unsigned char)>:
ffffffff80206ca1:	55                   	push   rbp
ffffffff80206ca2:	48 89 e5             	mov    rbp,rsp
ffffffff80206ca5:	48 83 ec 08          	sub    rsp,0x8
ffffffff80206ca9:	89 f8                	mov    eax,edi
ffffffff80206cab:	89 f2                	mov    edx,esi
ffffffff80206cad:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
ffffffff80206cb1:	89 d0                	mov    eax,edx
ffffffff80206cb3:	88 45 f8             	mov    BYTE PTR [rbp-0x8],al
ffffffff80206cb6:	0f b6 45 f8          	movzx  eax,BYTE PTR [rbp-0x8]
ffffffff80206cba:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffffffff80206cbe:	ee                   	out    dx,al
ffffffff80206cbf:	90                   	nop
ffffffff80206cc0:	c9                   	leave  
ffffffff80206cc1:	c3                   	ret    

ffffffff80206cc2 <VGA::Init()>:
ffffffff80206cc2:	f3 0f 1e fa          	endbr64 
ffffffff80206cc6:	55                   	push   rbp
ffffffff80206cc7:	48 89 e5             	mov    rbp,rsp
ffffffff80206cca:	48 c7 05 13 3f 01 00 	mov    QWORD PTR [rip+0x13f13],0xb8000        # ffffffff8021abe8 <fb_ptr>
ffffffff80206cd1:	00 80 0b 00 
ffffffff80206cd5:	66 c7 05 14 3f 01 00 	mov    WORD PTR [rip+0x13f14],0x0        # ffffffff8021abf2 <y>
ffffffff80206cdc:	00 00 
ffffffff80206cde:	0f b7 05 0d 3f 01 00 	movzx  eax,WORD PTR [rip+0x13f0d]        # ffffffff8021abf2 <y>
ffffffff80206ce5:	66 89 05 04 3f 01 00 	mov    WORD PTR [rip+0x13f04],ax        # ffffffff8021abf0 <x>
ffffffff80206cec:	90                   	nop
ffffffff80206ced:	5d                   	pop    rbp
ffffffff80206cee:	c3                   	ret    

ffffffff80206cef <SetCursorPos()>:
ffffffff80206cef:	f3 0f 1e fa          	endbr64 
ffffffff80206cf3:	55                   	push   rbp
ffffffff80206cf4:	48 89 e5             	mov    rbp,rsp
ffffffff80206cf7:	48 83 ec 10          	sub    rsp,0x10
ffffffff80206cfb:	0f b7 15 f0 3e 01 00 	movzx  edx,WORD PTR [rip+0x13ef0]        # ffffffff8021abf2 <y>
ffffffff80206d02:	89 d0                	mov    eax,edx
ffffffff80206d04:	c1 e0 02             	shl    eax,0x2
ffffffff80206d07:	01 d0                	add    eax,edx
ffffffff80206d09:	c1 e0 04             	shl    eax,0x4
ffffffff80206d0c:	89 c2                	mov    edx,eax
ffffffff80206d0e:	0f b7 05 db 3e 01 00 	movzx  eax,WORD PTR [rip+0x13edb]        # ffffffff8021abf0 <x>
ffffffff80206d15:	01 d0                	add    eax,edx
ffffffff80206d17:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80206d1b:	be 0f 00 00 00       	mov    esi,0xf
ffffffff80206d20:	bf d4 03 00 00       	mov    edi,0x3d4
ffffffff80206d25:	e8 77 ff ff ff       	call   ffffffff80206ca1 <outb(unsigned short, unsigned char)>
ffffffff80206d2a:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
ffffffff80206d2e:	0f b6 c0             	movzx  eax,al
ffffffff80206d31:	89 c6                	mov    esi,eax
ffffffff80206d33:	bf d5 03 00 00       	mov    edi,0x3d5
ffffffff80206d38:	e8 64 ff ff ff       	call   ffffffff80206ca1 <outb(unsigned short, unsigned char)>
ffffffff80206d3d:	be 0e 00 00 00       	mov    esi,0xe
ffffffff80206d42:	bf d4 03 00 00       	mov    edi,0x3d4
ffffffff80206d47:	e8 55 ff ff ff       	call   ffffffff80206ca1 <outb(unsigned short, unsigned char)>
ffffffff80206d4c:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
ffffffff80206d50:	66 c1 e8 08          	shr    ax,0x8
ffffffff80206d54:	0f b6 c0             	movzx  eax,al
ffffffff80206d57:	89 c6                	mov    esi,eax
ffffffff80206d59:	bf d5 03 00 00       	mov    edi,0x3d5
ffffffff80206d5e:	e8 3e ff ff ff       	call   ffffffff80206ca1 <outb(unsigned short, unsigned char)>
ffffffff80206d63:	90                   	nop
ffffffff80206d64:	c9                   	leave  
ffffffff80206d65:	c3                   	ret    

ffffffff80206d66 <memcpy(void*, void*, unsigned long)>:
ffffffff80206d66:	f3 0f 1e fa          	endbr64 
ffffffff80206d6a:	55                   	push   rbp
ffffffff80206d6b:	48 89 e5             	mov    rbp,rsp
ffffffff80206d6e:	48 83 ec 38          	sub    rsp,0x38
ffffffff80206d72:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff80206d76:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffffffff80206d7a:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffffffff80206d7e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80206d82:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80206d86:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80206d8a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80206d8e:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffffffff80206d95:	00 
ffffffff80206d96:	eb 20                	jmp    ffffffff80206db8 <memcpy(void*, void*, unsigned long)+0x52>
ffffffff80206d98:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80206d9c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80206da0:	48 01 d0             	add    rax,rdx
ffffffff80206da3:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
ffffffff80206da7:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80206dab:	48 01 ca             	add    rdx,rcx
ffffffff80206dae:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80206db1:	88 02                	mov    BYTE PTR [rdx],al
ffffffff80206db3:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
ffffffff80206db8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80206dbc:	48 3b 45 c8          	cmp    rax,QWORD PTR [rbp-0x38]
ffffffff80206dc0:	72 d6                	jb     ffffffff80206d98 <memcpy(void*, void*, unsigned long)+0x32>
ffffffff80206dc2:	90                   	nop
ffffffff80206dc3:	90                   	nop
ffffffff80206dc4:	c9                   	leave  
ffffffff80206dc5:	c3                   	ret    

ffffffff80206dc6 <memset(char*, char, int)>:
ffffffff80206dc6:	f3 0f 1e fa          	endbr64 
ffffffff80206dca:	55                   	push   rbp
ffffffff80206dcb:	48 89 e5             	mov    rbp,rsp
ffffffff80206dce:	48 83 ec 20          	sub    rsp,0x20
ffffffff80206dd2:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80206dd6:	89 f0                	mov    eax,esi
ffffffff80206dd8:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
ffffffff80206ddb:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
ffffffff80206dde:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff80206de5:	eb 17                	jmp    ffffffff80206dfe <memset(char*, char, int)+0x38>
ffffffff80206de7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80206dea:	48 63 d0             	movsxd rdx,eax
ffffffff80206ded:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80206df1:	48 01 c2             	add    rdx,rax
ffffffff80206df4:	0f b6 45 e4          	movzx  eax,BYTE PTR [rbp-0x1c]
ffffffff80206df8:	88 02                	mov    BYTE PTR [rdx],al
ffffffff80206dfa:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff80206dfe:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80206e01:	3b 45 e0             	cmp    eax,DWORD PTR [rbp-0x20]
ffffffff80206e04:	7c e1                	jl     ffffffff80206de7 <memset(char*, char, int)+0x21>
ffffffff80206e06:	90                   	nop
ffffffff80206e07:	90                   	nop
ffffffff80206e08:	c9                   	leave  
ffffffff80206e09:	c3                   	ret    

ffffffff80206e0a <memsetw(char*, unsigned short, int)>:
ffffffff80206e0a:	f3 0f 1e fa          	endbr64 
ffffffff80206e0e:	55                   	push   rbp
ffffffff80206e0f:	48 89 e5             	mov    rbp,rsp
ffffffff80206e12:	48 83 ec 20          	sub    rsp,0x20
ffffffff80206e16:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80206e1a:	89 f0                	mov    eax,esi
ffffffff80206e1c:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
ffffffff80206e1f:	66 89 45 e4          	mov    WORD PTR [rbp-0x1c],ax
ffffffff80206e23:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffffffff80206e26:	89 c2                	mov    edx,eax
ffffffff80206e28:	c1 ea 1f             	shr    edx,0x1f
ffffffff80206e2b:	01 d0                	add    eax,edx
ffffffff80206e2d:	d1 f8                	sar    eax,1
ffffffff80206e2f:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffffffff80206e32:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80206e36:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80206e3a:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff80206e41:	eb 1b                	jmp    ffffffff80206e5e <memsetw(char*, unsigned short, int)+0x54>
ffffffff80206e43:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80206e46:	48 98                	cdqe   
ffffffff80206e48:	48 8d 14 00          	lea    rdx,[rax+rax*1]
ffffffff80206e4c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80206e50:	48 01 c2             	add    rdx,rax
ffffffff80206e53:	0f b7 45 e4          	movzx  eax,WORD PTR [rbp-0x1c]
ffffffff80206e57:	66 89 02             	mov    WORD PTR [rdx],ax
ffffffff80206e5a:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff80206e5e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80206e61:	3b 45 e0             	cmp    eax,DWORD PTR [rbp-0x20]
ffffffff80206e64:	7c dd                	jl     ffffffff80206e43 <memsetw(char*, unsigned short, int)+0x39>
ffffffff80206e66:	90                   	nop
ffffffff80206e67:	90                   	nop
ffffffff80206e68:	c9                   	leave  
ffffffff80206e69:	c3                   	ret    

ffffffff80206e6a <Scroll()>:
ffffffff80206e6a:	f3 0f 1e fa          	endbr64 
ffffffff80206e6e:	55                   	push   rbp
ffffffff80206e6f:	48 89 e5             	mov    rbp,rsp
ffffffff80206e72:	48 83 ec 20          	sub    rsp,0x20
ffffffff80206e76:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff80206e7d:	eb 67                	jmp    ffffffff80206ee6 <Scroll()+0x7c>
ffffffff80206e7f:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffffffff80206e86:	eb 54                	jmp    ffffffff80206edc <Scroll()+0x72>
ffffffff80206e88:	48 8b 0d 59 3d 01 00 	mov    rcx,QWORD PTR [rip+0x13d59]        # ffffffff8021abe8 <fb_ptr>
ffffffff80206e8f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80206e92:	8d 50 01             	lea    edx,[rax+0x1]
ffffffff80206e95:	89 d0                	mov    eax,edx
ffffffff80206e97:	c1 e0 02             	shl    eax,0x2
ffffffff80206e9a:	01 d0                	add    eax,edx
ffffffff80206e9c:	c1 e0 04             	shl    eax,0x4
ffffffff80206e9f:	89 c2                	mov    edx,eax
ffffffff80206ea1:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80206ea4:	01 d0                	add    eax,edx
ffffffff80206ea6:	48 98                	cdqe   
ffffffff80206ea8:	48 01 c0             	add    rax,rax
ffffffff80206eab:	48 01 c1             	add    rcx,rax
ffffffff80206eae:	48 8b 35 33 3d 01 00 	mov    rsi,QWORD PTR [rip+0x13d33]        # ffffffff8021abe8 <fb_ptr>
ffffffff80206eb5:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffffffff80206eb8:	89 d0                	mov    eax,edx
ffffffff80206eba:	c1 e0 02             	shl    eax,0x2
ffffffff80206ebd:	01 d0                	add    eax,edx
ffffffff80206ebf:	c1 e0 04             	shl    eax,0x4
ffffffff80206ec2:	89 c2                	mov    edx,eax
ffffffff80206ec4:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80206ec7:	01 d0                	add    eax,edx
ffffffff80206ec9:	48 98                	cdqe   
ffffffff80206ecb:	48 01 c0             	add    rax,rax
ffffffff80206ece:	48 8d 14 06          	lea    rdx,[rsi+rax*1]
ffffffff80206ed2:	0f b7 01             	movzx  eax,WORD PTR [rcx]
ffffffff80206ed5:	66 89 02             	mov    WORD PTR [rdx],ax
ffffffff80206ed8:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
ffffffff80206edc:	83 7d f8 4f          	cmp    DWORD PTR [rbp-0x8],0x4f
ffffffff80206ee0:	7e a6                	jle    ffffffff80206e88 <Scroll()+0x1e>
ffffffff80206ee2:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff80206ee6:	83 7d fc 17          	cmp    DWORD PTR [rbp-0x4],0x17
ffffffff80206eea:	7e 93                	jle    ffffffff80206e7f <Scroll()+0x15>
ffffffff80206eec:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffffffff80206ef3:	eb 38                	jmp    ffffffff80206f2d <Scroll()+0xc3>
ffffffff80206ef5:	66 c7 45 f2 0f 00    	mov    WORD PTR [rbp-0xe],0xf
ffffffff80206efb:	48 8b 15 e6 3c 01 00 	mov    rdx,QWORD PTR [rip+0x13ce6]        # ffffffff8021abe8 <fb_ptr>
ffffffff80206f02:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffffffff80206f05:	05 80 07 00 00       	add    eax,0x780
ffffffff80206f0a:	48 98                	cdqe   
ffffffff80206f0c:	48 01 c0             	add    rax,rax
ffffffff80206f0f:	48 01 d0             	add    rax,rdx
ffffffff80206f12:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80206f16:	0f b7 45 f2          	movzx  eax,WORD PTR [rbp-0xe]
ffffffff80206f1a:	c1 e0 08             	shl    eax,0x8
ffffffff80206f1d:	83 c8 20             	or     eax,0x20
ffffffff80206f20:	89 c2                	mov    edx,eax
ffffffff80206f22:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80206f26:	66 89 10             	mov    WORD PTR [rax],dx
ffffffff80206f29:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
ffffffff80206f2d:	83 7d f4 4f          	cmp    DWORD PTR [rbp-0xc],0x4f
ffffffff80206f31:	7e c2                	jle    ffffffff80206ef5 <Scroll()+0x8b>
ffffffff80206f33:	66 c7 05 b4 3c 01 00 	mov    WORD PTR [rip+0x13cb4],0x0        # ffffffff8021abf0 <x>
ffffffff80206f3a:	00 00 
ffffffff80206f3c:	66 c7 05 ad 3c 01 00 	mov    WORD PTR [rip+0x13cad],0x18        # ffffffff8021abf2 <y>
ffffffff80206f43:	18 00 
ffffffff80206f45:	90                   	nop
ffffffff80206f46:	c9                   	leave  
ffffffff80206f47:	c3                   	ret    

ffffffff80206f48 <VGA::putc(char)>:
ffffffff80206f48:	f3 0f 1e fa          	endbr64 
ffffffff80206f4c:	55                   	push   rbp
ffffffff80206f4d:	48 89 e5             	mov    rbp,rsp
ffffffff80206f50:	48 83 ec 08          	sub    rsp,0x8
ffffffff80206f54:	89 f8                	mov    eax,edi
ffffffff80206f56:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
ffffffff80206f59:	80 7d fc 0a          	cmp    BYTE PTR [rbp-0x4],0xa
ffffffff80206f5d:	75 24                	jne    ffffffff80206f83 <VGA::putc(char)+0x3b>
ffffffff80206f5f:	0f b7 05 8c 3c 01 00 	movzx  eax,WORD PTR [rip+0x13c8c]        # ffffffff8021abf2 <y>
ffffffff80206f66:	83 c0 01             	add    eax,0x1
ffffffff80206f69:	66 89 05 82 3c 01 00 	mov    WORD PTR [rip+0x13c82],ax        # ffffffff8021abf2 <y>
ffffffff80206f70:	66 c7 05 77 3c 01 00 	mov    WORD PTR [rip+0x13c77],0x0        # ffffffff8021abf0 <x>
ffffffff80206f77:	00 00 
ffffffff80206f79:	e8 71 fd ff ff       	call   ffffffff80206cef <SetCursorPos()>
ffffffff80206f7e:	e9 d4 00 00 00       	jmp    ffffffff80207057 <VGA::putc(char)+0x10f>
ffffffff80206f83:	80 7d fc 09          	cmp    BYTE PTR [rbp-0x4],0x9
ffffffff80206f87:	75 3f                	jne    ffffffff80206fc8 <VGA::putc(char)+0x80>
ffffffff80206f89:	0f b7 05 60 3c 01 00 	movzx  eax,WORD PTR [rip+0x13c60]        # ffffffff8021abf0 <x>
ffffffff80206f90:	83 c0 01             	add    eax,0x1
ffffffff80206f93:	66 89 05 56 3c 01 00 	mov    WORD PTR [rip+0x13c56],ax        # ffffffff8021abf0 <x>
ffffffff80206f9a:	eb 11                	jmp    ffffffff80206fad <VGA::putc(char)+0x65>
ffffffff80206f9c:	0f b7 05 4d 3c 01 00 	movzx  eax,WORD PTR [rip+0x13c4d]        # ffffffff8021abf0 <x>
ffffffff80206fa3:	83 c0 01             	add    eax,0x1
ffffffff80206fa6:	66 89 05 43 3c 01 00 	mov    WORD PTR [rip+0x13c43],ax        # ffffffff8021abf0 <x>
ffffffff80206fad:	0f b7 05 3c 3c 01 00 	movzx  eax,WORD PTR [rip+0x13c3c]        # ffffffff8021abf0 <x>
ffffffff80206fb4:	0f b7 c0             	movzx  eax,ax
ffffffff80206fb7:	83 e0 03             	and    eax,0x3
ffffffff80206fba:	85 c0                	test   eax,eax
ffffffff80206fbc:	75 de                	jne    ffffffff80206f9c <VGA::putc(char)+0x54>
ffffffff80206fbe:	e8 2c fd ff ff       	call   ffffffff80206cef <SetCursorPos()>
ffffffff80206fc3:	e9 8f 00 00 00       	jmp    ffffffff80207057 <VGA::putc(char)+0x10f>
ffffffff80206fc8:	66 0f be 45 fc       	movsx  ax,BYTE PTR [rbp-0x4]
ffffffff80206fcd:	80 cc 0f             	or     ah,0xf
ffffffff80206fd0:	89 c1                	mov    ecx,eax
ffffffff80206fd2:	48 8b 35 0f 3c 01 00 	mov    rsi,QWORD PTR [rip+0x13c0f]        # ffffffff8021abe8 <fb_ptr>
ffffffff80206fd9:	0f b7 05 12 3c 01 00 	movzx  eax,WORD PTR [rip+0x13c12]        # ffffffff8021abf2 <y>
ffffffff80206fe0:	0f b7 d0             	movzx  edx,ax
ffffffff80206fe3:	89 d0                	mov    eax,edx
ffffffff80206fe5:	c1 e0 02             	shl    eax,0x2
ffffffff80206fe8:	01 d0                	add    eax,edx
ffffffff80206fea:	c1 e0 04             	shl    eax,0x4
ffffffff80206fed:	89 c2                	mov    edx,eax
ffffffff80206fef:	0f b7 05 fa 3b 01 00 	movzx  eax,WORD PTR [rip+0x13bfa]        # ffffffff8021abf0 <x>
ffffffff80206ff6:	0f b7 c0             	movzx  eax,ax
ffffffff80206ff9:	01 d0                	add    eax,edx
ffffffff80206ffb:	48 98                	cdqe   
ffffffff80206ffd:	48 01 c0             	add    rax,rax
ffffffff80207000:	48 01 f0             	add    rax,rsi
ffffffff80207003:	89 ca                	mov    edx,ecx
ffffffff80207005:	66 89 10             	mov    WORD PTR [rax],dx
ffffffff80207008:	0f b7 05 e1 3b 01 00 	movzx  eax,WORD PTR [rip+0x13be1]        # ffffffff8021abf0 <x>
ffffffff8020700f:	83 c0 01             	add    eax,0x1
ffffffff80207012:	66 89 05 d7 3b 01 00 	mov    WORD PTR [rip+0x13bd7],ax        # ffffffff8021abf0 <x>
ffffffff80207019:	0f b7 05 d0 3b 01 00 	movzx  eax,WORD PTR [rip+0x13bd0]        # ffffffff8021abf0 <x>
ffffffff80207020:	66 83 f8 4f          	cmp    ax,0x4f
ffffffff80207024:	76 1a                	jbe    ffffffff80207040 <VGA::putc(char)+0xf8>
ffffffff80207026:	66 c7 05 c1 3b 01 00 	mov    WORD PTR [rip+0x13bc1],0x0        # ffffffff8021abf0 <x>
ffffffff8020702d:	00 00 
ffffffff8020702f:	0f b7 05 bc 3b 01 00 	movzx  eax,WORD PTR [rip+0x13bbc]        # ffffffff8021abf2 <y>
ffffffff80207036:	83 c0 01             	add    eax,0x1
ffffffff80207039:	66 89 05 b2 3b 01 00 	mov    WORD PTR [rip+0x13bb2],ax        # ffffffff8021abf2 <y>
ffffffff80207040:	0f b7 05 ab 3b 01 00 	movzx  eax,WORD PTR [rip+0x13bab]        # ffffffff8021abf2 <y>
ffffffff80207047:	66 83 f8 18          	cmp    ax,0x18
ffffffff8020704b:	76 05                	jbe    ffffffff80207052 <VGA::putc(char)+0x10a>
ffffffff8020704d:	e8 18 fe ff ff       	call   ffffffff80206e6a <Scroll()>
ffffffff80207052:	e8 98 fc ff ff       	call   ffffffff80206cef <SetCursorPos()>
ffffffff80207057:	c9                   	leave  
ffffffff80207058:	c3                   	ret    

ffffffff80207059 <VGA::puts(char const*)>:
ffffffff80207059:	f3 0f 1e fa          	endbr64 
ffffffff8020705d:	55                   	push   rbp
ffffffff8020705e:	48 89 e5             	mov    rbp,rsp
ffffffff80207061:	48 83 ec 08          	sub    rsp,0x8
ffffffff80207065:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80207069:	eb 19                	jmp    ffffffff80207084 <VGA::puts(char const*)+0x2b>
ffffffff8020706b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8020706f:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff80207073:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff80207077:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff8020707a:	0f be c0             	movsx  eax,al
ffffffff8020707d:	89 c7                	mov    edi,eax
ffffffff8020707f:	e8 c4 fe ff ff       	call   ffffffff80206f48 <VGA::putc(char)>
ffffffff80207084:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80207088:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff8020708b:	84 c0                	test   al,al
ffffffff8020708d:	75 dc                	jne    ffffffff8020706b <VGA::puts(char const*)+0x12>
ffffffff8020708f:	90                   	nop
ffffffff80207090:	90                   	nop
ffffffff80207091:	c9                   	leave  
ffffffff80207092:	c3                   	ret    

ffffffff80207093 <VGA::seek_to(int, int)>:
ffffffff80207093:	f3 0f 1e fa          	endbr64 
ffffffff80207097:	55                   	push   rbp
ffffffff80207098:	48 89 e5             	mov    rbp,rsp
ffffffff8020709b:	48 83 ec 08          	sub    rsp,0x8
ffffffff8020709f:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff802070a2:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff802070a5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff802070a8:	66 89 05 41 3b 01 00 	mov    WORD PTR [rip+0x13b41],ax        # ffffffff8021abf0 <x>
ffffffff802070af:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff802070b2:	66 89 05 39 3b 01 00 	mov    WORD PTR [rip+0x13b39],ax        # ffffffff8021abf2 <y>
ffffffff802070b9:	e8 31 fc ff ff       	call   ffffffff80206cef <SetCursorPos()>
ffffffff802070be:	90                   	nop
ffffffff802070bf:	c9                   	leave  
ffffffff802070c0:	c3                   	ret    

ffffffff802070c1 <VGA::get_x()>:
ffffffff802070c1:	f3 0f 1e fa          	endbr64 
ffffffff802070c5:	55                   	push   rbp
ffffffff802070c6:	48 89 e5             	mov    rbp,rsp
ffffffff802070c9:	0f b7 05 20 3b 01 00 	movzx  eax,WORD PTR [rip+0x13b20]        # ffffffff8021abf0 <x>
ffffffff802070d0:	0f b7 c0             	movzx  eax,ax
ffffffff802070d3:	5d                   	pop    rbp
ffffffff802070d4:	c3                   	ret    

ffffffff802070d5 <VGA::get_y()>:
ffffffff802070d5:	f3 0f 1e fa          	endbr64 
ffffffff802070d9:	55                   	push   rbp
ffffffff802070da:	48 89 e5             	mov    rbp,rsp
ffffffff802070dd:	0f b7 05 0e 3b 01 00 	movzx  eax,WORD PTR [rip+0x13b0e]        # ffffffff8021abf2 <y>
ffffffff802070e4:	0f b7 c0             	movzx  eax,ax
ffffffff802070e7:	5d                   	pop    rbp
ffffffff802070e8:	c3                   	ret    

ffffffff802070e9 <swap(char&, char&)>:
ffffffff802070e9:	f3 0f 1e fa          	endbr64 
ffffffff802070ed:	55                   	push   rbp
ffffffff802070ee:	48 89 e5             	mov    rbp,rsp
ffffffff802070f1:	48 83 ec 20          	sub    rsp,0x20
ffffffff802070f5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff802070f9:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff802070fd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80207101:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80207104:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
ffffffff80207107:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff8020710b:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffffffff8020710e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80207112:	88 10                	mov    BYTE PTR [rax],dl
ffffffff80207114:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80207118:	0f b6 55 ff          	movzx  edx,BYTE PTR [rbp-0x1]
ffffffff8020711c:	88 10                	mov    BYTE PTR [rax],dl
ffffffff8020711e:	90                   	nop
ffffffff8020711f:	c9                   	leave  
ffffffff80207120:	c3                   	ret    

ffffffff80207121 <reverse(char*, int)>:
ffffffff80207121:	f3 0f 1e fa          	endbr64 
ffffffff80207125:	55                   	push   rbp
ffffffff80207126:	48 89 e5             	mov    rbp,rsp
ffffffff80207129:	48 83 ec 20          	sub    rsp,0x20
ffffffff8020712d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80207131:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff80207134:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff8020713b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff8020713e:	83 e8 01             	sub    eax,0x1
ffffffff80207141:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff80207144:	eb 2d                	jmp    ffffffff80207173 <reverse(char*, int)+0x52>
ffffffff80207146:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80207149:	48 63 d0             	movsxd rdx,eax
ffffffff8020714c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80207150:	48 01 c2             	add    rdx,rax
ffffffff80207153:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80207156:	48 63 c8             	movsxd rcx,eax
ffffffff80207159:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8020715d:	48 01 c8             	add    rax,rcx
ffffffff80207160:	48 89 d6             	mov    rsi,rdx
ffffffff80207163:	48 89 c7             	mov    rdi,rax
ffffffff80207166:	e8 7e ff ff ff       	call   ffffffff802070e9 <swap(char&, char&)>
ffffffff8020716b:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff8020716f:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
ffffffff80207173:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80207176:	3b 45 f8             	cmp    eax,DWORD PTR [rbp-0x8]
ffffffff80207179:	7c cb                	jl     ffffffff80207146 <reverse(char*, int)+0x25>
ffffffff8020717b:	90                   	nop
ffffffff8020717c:	90                   	nop
ffffffff8020717d:	c9                   	leave  
ffffffff8020717e:	c3                   	ret    

ffffffff8020717f <itoa(char*, unsigned long, int)>:
ffffffff8020717f:	f3 0f 1e fa          	endbr64 
ffffffff80207183:	55                   	push   rbp
ffffffff80207184:	48 89 e5             	mov    rbp,rsp
ffffffff80207187:	48 83 ec 28          	sub    rsp,0x28
ffffffff8020718b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff8020718f:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff80207193:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffffffff80207196:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff8020719a:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff8020719e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff802071a5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffffffff802071a8:	48 63 c8             	movsxd rcx,eax
ffffffff802071ab:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff802071af:	ba 00 00 00 00       	mov    edx,0x0
ffffffff802071b4:	48 f7 f1             	div    rcx
ffffffff802071b7:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffffffff802071bb:	48 83 7d f0 09       	cmp    QWORD PTR [rbp-0x10],0x9
ffffffff802071c0:	77 0b                	ja     ffffffff802071cd <itoa(char*, unsigned long, int)+0x4e>
ffffffff802071c2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff802071c6:	83 c0 30             	add    eax,0x30
ffffffff802071c9:	89 c1                	mov    ecx,eax
ffffffff802071cb:	eb 09                	jmp    ffffffff802071d6 <itoa(char*, unsigned long, int)+0x57>
ffffffff802071cd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff802071d1:	83 c0 57             	add    eax,0x57
ffffffff802071d4:	89 c1                	mov    ecx,eax
ffffffff802071d6:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffffffff802071da:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff802071dd:	8d 50 01             	lea    edx,[rax+0x1]
ffffffff802071e0:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffffffff802071e3:	48 98                	cdqe   
ffffffff802071e5:	48 01 f0             	add    rax,rsi
ffffffff802071e8:	88 08                	mov    BYTE PTR [rax],cl
ffffffff802071ea:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffffffff802071ed:	48 63 f8             	movsxd rdi,eax
ffffffff802071f0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff802071f4:	ba 00 00 00 00       	mov    edx,0x0
ffffffff802071f9:	48 f7 f7             	div    rdi
ffffffff802071fc:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80207200:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffffffff80207205:	0f 95 c0             	setne  al
ffffffff80207208:	84 c0                	test   al,al
ffffffff8020720a:	75 99                	jne    ffffffff802071a5 <itoa(char*, unsigned long, int)+0x26>
ffffffff8020720c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffffffff80207210:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80207213:	8d 50 ff             	lea    edx,[rax-0x1]
ffffffff80207216:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
ffffffff80207219:	48 98                	cdqe   
ffffffff8020721b:	48 01 c8             	add    rax,rcx
ffffffff8020721e:	c6 00 00             	mov    BYTE PTR [rax],0x0
ffffffff80207221:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffffffff80207228:	eb 52                	jmp    ffffffff8020727c <itoa(char*, unsigned long, int)+0xfd>
ffffffff8020722a:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff8020722d:	48 63 d0             	movsxd rdx,eax
ffffffff80207230:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80207234:	48 01 d0             	add    rax,rdx
ffffffff80207237:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff8020723a:	48 0f be c0          	movsx  rax,al
ffffffff8020723e:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80207242:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80207245:	48 63 d0             	movsxd rdx,eax
ffffffff80207248:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8020724c:	48 01 d0             	add    rax,rdx
ffffffff8020724f:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffffffff80207252:	48 63 ca             	movsxd rcx,edx
ffffffff80207255:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80207259:	48 01 ca             	add    rdx,rcx
ffffffff8020725c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff8020725f:	88 02                	mov    BYTE PTR [rdx],al
ffffffff80207261:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80207264:	48 63 d0             	movsxd rdx,eax
ffffffff80207267:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8020726b:	48 01 d0             	add    rax,rdx
ffffffff8020726e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80207272:	88 10                	mov    BYTE PTR [rax],dl
ffffffff80207274:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
ffffffff80207278:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffffffff8020727c:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff8020727f:	3b 45 fc             	cmp    eax,DWORD PTR [rbp-0x4]
ffffffff80207282:	7c a6                	jl     ffffffff8020722a <itoa(char*, unsigned long, int)+0xab>
ffffffff80207284:	90                   	nop
ffffffff80207285:	90                   	nop
ffffffff80207286:	c9                   	leave  
ffffffff80207287:	c3                   	ret    

ffffffff80207288 <ltoa(long, int)>:
ffffffff80207288:	f3 0f 1e fa          	endbr64 
ffffffff8020728c:	55                   	push   rbp
ffffffff8020728d:	48 89 e5             	mov    rbp,rsp
ffffffff80207290:	48 83 ec 20          	sub    rsp,0x20
ffffffff80207294:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80207298:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff8020729b:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffffffff802072a0:	75 17                	jne    ffffffff802072b9 <ltoa(long, int)+0x31>
ffffffff802072a2:	c6 05 57 39 01 00 30 	mov    BYTE PTR [rip+0x13957],0x30        # ffffffff8021ac00 <ltoa(long, int)::buf>
ffffffff802072a9:	c6 05 51 39 01 00 00 	mov    BYTE PTR [rip+0x13951],0x0        # ffffffff8021ac01 <ltoa(long, int)::buf+0x1>
ffffffff802072b0:	48 c7 c0 00 ac 21 80 	mov    rax,0xffffffff8021ac00
ffffffff802072b7:	eb 5f                	jmp    ffffffff80207318 <ltoa(long, int)+0x90>
ffffffff802072b9:	c7 45 fc 3c 00 00 00 	mov    DWORD PTR [rbp-0x4],0x3c
ffffffff802072c0:	eb 3b                	jmp    ffffffff802072fd <ltoa(long, int)+0x75>
ffffffff802072c2:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff802072c5:	48 63 c8             	movsxd rcx,eax
ffffffff802072c8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff802072cc:	48 99                	cqo    
ffffffff802072ce:	48 f7 f9             	idiv   rcx
ffffffff802072d1:	48 89 d0             	mov    rax,rdx
ffffffff802072d4:	0f b6 90 c4 14 20 80 	movzx  edx,BYTE PTR [rax-0x7fdfeb3c]
ffffffff802072db:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff802072de:	48 98                	cdqe   
ffffffff802072e0:	88 90 00 ac 21 80    	mov    BYTE PTR [rax-0x7fde5400],dl
ffffffff802072e6:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffffffff802072ea:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff802072ed:	48 63 f0             	movsxd rsi,eax
ffffffff802072f0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff802072f4:	48 99                	cqo    
ffffffff802072f6:	48 f7 fe             	idiv   rsi
ffffffff802072f9:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff802072fd:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffffffff80207302:	74 06                	je     ffffffff8020730a <ltoa(long, int)+0x82>
ffffffff80207304:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffffffff80207308:	75 b8                	jne    ffffffff802072c2 <ltoa(long, int)+0x3a>
ffffffff8020730a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8020730d:	83 c0 01             	add    eax,0x1
ffffffff80207310:	48 98                	cdqe   
ffffffff80207312:	48 05 00 ac 21 80    	add    rax,0xffffffff8021ac00
ffffffff80207318:	c9                   	leave  
ffffffff80207319:	c3                   	ret    

ffffffff8020731a <VGA::vprint_format(char const*, __va_list_tag*)>:
ffffffff8020731a:	f3 0f 1e fa          	endbr64 
ffffffff8020731e:	55                   	push   rbp
ffffffff8020731f:	48 89 e5             	mov    rbp,rsp
ffffffff80207322:	48 83 ec 50          	sub    rsp,0x50
ffffffff80207326:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffffffff8020732a:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffffffff8020732e:	e9 ed 01 00 00       	jmp    ffffffff80207520 <VGA::vprint_format(char const*, __va_list_tag*)+0x206>
ffffffff80207333:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff80207337:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff8020733a:	3c 25                	cmp    al,0x25
ffffffff8020733c:	0f 85 c5 01 00 00    	jne    ffffffff80207507 <VGA::vprint_format(char const*, __va_list_tag*)+0x1ed>
ffffffff80207342:	48 83 45 b8 01       	add    QWORD PTR [rbp-0x48],0x1
ffffffff80207347:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff8020734b:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff8020734f:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffffffff80207353:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80207356:	0f be c0             	movsx  eax,al
ffffffff80207359:	83 f8 78             	cmp    eax,0x78
ffffffff8020735c:	0f 84 af 00 00 00    	je     ffffffff80207411 <VGA::vprint_format(char const*, __va_list_tag*)+0xf7>
ffffffff80207362:	83 f8 78             	cmp    eax,0x78
ffffffff80207365:	0f 8f b5 01 00 00    	jg     ffffffff80207520 <VGA::vprint_format(char const*, __va_list_tag*)+0x206>
ffffffff8020736b:	83 f8 64             	cmp    eax,0x64
ffffffff8020736e:	74 0e                	je     ffffffff8020737e <VGA::vprint_format(char const*, __va_list_tag*)+0x64>
ffffffff80207370:	83 f8 6c             	cmp    eax,0x6c
ffffffff80207373:	0f 84 28 01 00 00    	je     ffffffff802074a1 <VGA::vprint_format(char const*, __va_list_tag*)+0x187>
ffffffff80207379:	e9 a2 01 00 00       	jmp    ffffffff80207520 <VGA::vprint_format(char const*, __va_list_tag*)+0x206>
ffffffff8020737e:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff80207382:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80207384:	83 f8 2f             	cmp    eax,0x2f
ffffffff80207387:	77 24                	ja     ffffffff802073ad <VGA::vprint_format(char const*, __va_list_tag*)+0x93>
ffffffff80207389:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff8020738d:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffffffff80207391:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff80207395:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80207397:	89 c0                	mov    eax,eax
ffffffff80207399:	48 01 d0             	add    rax,rdx
ffffffff8020739c:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffffffff802073a0:	8b 12                	mov    edx,DWORD PTR [rdx]
ffffffff802073a2:	8d 4a 08             	lea    ecx,[rdx+0x8]
ffffffff802073a5:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffffffff802073a9:	89 0a                	mov    DWORD PTR [rdx],ecx
ffffffff802073ab:	eb 14                	jmp    ffffffff802073c1 <VGA::vprint_format(char const*, __va_list_tag*)+0xa7>
ffffffff802073ad:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff802073b1:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff802073b5:	48 8d 48 08          	lea    rcx,[rax+0x8]
ffffffff802073b9:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffffffff802073bd:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
ffffffff802073c1:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff802073c3:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffffffff802073c6:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffffffff802073cd:	00 
ffffffff802073ce:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffffffff802073d5:	00 
ffffffff802073d6:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffffffff802073dd:	00 
ffffffff802073de:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffffffff802073e5:	00 
ffffffff802073e6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff802073e9:	48 63 c8             	movsxd rcx,eax
ffffffff802073ec:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffffffff802073f0:	ba 0a 00 00 00       	mov    edx,0xa
ffffffff802073f5:	48 89 ce             	mov    rsi,rcx
ffffffff802073f8:	48 89 c7             	mov    rdi,rax
ffffffff802073fb:	e8 7f fd ff ff       	call   ffffffff8020717f <itoa(char*, unsigned long, int)>
ffffffff80207400:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffffffff80207404:	48 89 c7             	mov    rdi,rax
ffffffff80207407:	e8 4d fc ff ff       	call   ffffffff80207059 <VGA::puts(char const*)>
ffffffff8020740c:	e9 0f 01 00 00       	jmp    ffffffff80207520 <VGA::vprint_format(char const*, __va_list_tag*)+0x206>
ffffffff80207411:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff80207415:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80207417:	83 f8 2f             	cmp    eax,0x2f
ffffffff8020741a:	77 24                	ja     ffffffff80207440 <VGA::vprint_format(char const*, __va_list_tag*)+0x126>
ffffffff8020741c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff80207420:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffffffff80207424:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff80207428:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff8020742a:	89 c0                	mov    eax,eax
ffffffff8020742c:	48 01 d0             	add    rax,rdx
ffffffff8020742f:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffffffff80207433:	8b 12                	mov    edx,DWORD PTR [rdx]
ffffffff80207435:	8d 4a 08             	lea    ecx,[rdx+0x8]
ffffffff80207438:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffffffff8020743c:	89 0a                	mov    DWORD PTR [rdx],ecx
ffffffff8020743e:	eb 14                	jmp    ffffffff80207454 <VGA::vprint_format(char const*, __va_list_tag*)+0x13a>
ffffffff80207440:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff80207444:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80207448:	48 8d 48 08          	lea    rcx,[rax+0x8]
ffffffff8020744c:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffffffff80207450:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
ffffffff80207454:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80207456:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80207459:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffffffff80207460:	00 
ffffffff80207461:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffffffff80207468:	00 
ffffffff80207469:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffffffff80207470:	00 
ffffffff80207471:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffffffff80207478:	00 
ffffffff80207479:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8020747c:	48 63 c8             	movsxd rcx,eax
ffffffff8020747f:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffffffff80207483:	ba 10 00 00 00       	mov    edx,0x10
ffffffff80207488:	48 89 ce             	mov    rsi,rcx
ffffffff8020748b:	48 89 c7             	mov    rdi,rax
ffffffff8020748e:	e8 ec fc ff ff       	call   ffffffff8020717f <itoa(char*, unsigned long, int)>
ffffffff80207493:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffffffff80207497:	48 89 c7             	mov    rdi,rax
ffffffff8020749a:	e8 ba fb ff ff       	call   ffffffff80207059 <VGA::puts(char const*)>
ffffffff8020749f:	eb 7f                	jmp    ffffffff80207520 <VGA::vprint_format(char const*, __va_list_tag*)+0x206>
ffffffff802074a1:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff802074a5:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff802074a7:	83 f8 2f             	cmp    eax,0x2f
ffffffff802074aa:	77 24                	ja     ffffffff802074d0 <VGA::vprint_format(char const*, __va_list_tag*)+0x1b6>
ffffffff802074ac:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff802074b0:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffffffff802074b4:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff802074b8:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff802074ba:	89 c0                	mov    eax,eax
ffffffff802074bc:	48 01 d0             	add    rax,rdx
ffffffff802074bf:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffffffff802074c3:	8b 12                	mov    edx,DWORD PTR [rdx]
ffffffff802074c5:	8d 4a 08             	lea    ecx,[rdx+0x8]
ffffffff802074c8:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffffffff802074cc:	89 0a                	mov    DWORD PTR [rdx],ecx
ffffffff802074ce:	eb 14                	jmp    ffffffff802074e4 <VGA::vprint_format(char const*, __va_list_tag*)+0x1ca>
ffffffff802074d0:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff802074d4:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff802074d8:	48 8d 48 08          	lea    rcx,[rax+0x8]
ffffffff802074dc:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffffffff802074e0:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
ffffffff802074e4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff802074e7:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff802074eb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff802074ef:	be 10 00 00 00       	mov    esi,0x10
ffffffff802074f4:	48 89 c7             	mov    rdi,rax
ffffffff802074f7:	e8 8c fd ff ff       	call   ffffffff80207288 <ltoa(long, int)>
ffffffff802074fc:	48 89 c7             	mov    rdi,rax
ffffffff802074ff:	e8 55 fb ff ff       	call   ffffffff80207059 <VGA::puts(char const*)>
ffffffff80207504:	90                   	nop
ffffffff80207505:	eb 19                	jmp    ffffffff80207520 <VGA::vprint_format(char const*, __va_list_tag*)+0x206>
ffffffff80207507:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff8020750b:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff8020750f:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffffffff80207513:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80207516:	0f be c0             	movsx  eax,al
ffffffff80207519:	89 c7                	mov    edi,eax
ffffffff8020751b:	e8 28 fa ff ff       	call   ffffffff80206f48 <VGA::putc(char)>
ffffffff80207520:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff80207524:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80207527:	84 c0                	test   al,al
ffffffff80207529:	0f 85 04 fe ff ff    	jne    ffffffff80207333 <VGA::vprint_format(char const*, __va_list_tag*)+0x19>
ffffffff8020752f:	90                   	nop
ffffffff80207530:	90                   	nop
ffffffff80207531:	c9                   	leave  
ffffffff80207532:	c3                   	ret    

ffffffff80207533 <VGA::print_format(char const*, ...)>:
ffffffff80207533:	f3 0f 1e fa          	endbr64 
ffffffff80207537:	55                   	push   rbp
ffffffff80207538:	48 89 e5             	mov    rbp,rsp
ffffffff8020753b:	48 81 ec e0 00 00 00 	sub    rsp,0xe0
ffffffff80207542:	48 89 bd 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdi
ffffffff80207549:	48 89 b5 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rsi
ffffffff80207550:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
ffffffff80207557:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
ffffffff8020755e:	4c 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r8
ffffffff80207565:	4c 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r9
ffffffff8020756c:	84 c0                	test   al,al
ffffffff8020756e:	74 20                	je     ffffffff80207590 <VGA::print_format(char const*, ...)+0x5d>
ffffffff80207570:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
ffffffff80207574:	0f 29 4d 90          	movaps XMMWORD PTR [rbp-0x70],xmm1
ffffffff80207578:	0f 29 55 a0          	movaps XMMWORD PTR [rbp-0x60],xmm2
ffffffff8020757c:	0f 29 5d b0          	movaps XMMWORD PTR [rbp-0x50],xmm3
ffffffff80207580:	0f 29 65 c0          	movaps XMMWORD PTR [rbp-0x40],xmm4
ffffffff80207584:	0f 29 6d d0          	movaps XMMWORD PTR [rbp-0x30],xmm5
ffffffff80207588:	0f 29 75 e0          	movaps XMMWORD PTR [rbp-0x20],xmm6
ffffffff8020758c:	0f 29 7d f0          	movaps XMMWORD PTR [rbp-0x10],xmm7
ffffffff80207590:	48 c7 c7 e0 ab 21 80 	mov    rdi,0xffffffff8021abe0
ffffffff80207597:	e8 7a f5 ff ff       	call   ffffffff80206b16 <Spinlock::Lock()>
ffffffff8020759c:	c7 85 38 ff ff ff 08 	mov    DWORD PTR [rbp-0xc8],0x8
ffffffff802075a3:	00 00 00 
ffffffff802075a6:	c7 85 3c ff ff ff 30 	mov    DWORD PTR [rbp-0xc4],0x30
ffffffff802075ad:	00 00 00 
ffffffff802075b0:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffffffff802075b4:	48 89 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rax
ffffffff802075bb:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
ffffffff802075c2:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
ffffffff802075c9:	48 8d 95 38 ff ff ff 	lea    rdx,[rbp-0xc8]
ffffffff802075d0:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffffffff802075d7:	48 89 d6             	mov    rsi,rdx
ffffffff802075da:	48 89 c7             	mov    rdi,rax
ffffffff802075dd:	e8 38 fd ff ff       	call   ffffffff8020731a <VGA::vprint_format(char const*, __va_list_tag*)>
ffffffff802075e2:	48 c7 c7 e0 ab 21 80 	mov    rdi,0xffffffff8021abe0
ffffffff802075e9:	e8 4c f5 ff ff       	call   ffffffff80206b3a <Spinlock::Release()>
ffffffff802075ee:	90                   	nop
ffffffff802075ef:	c9                   	leave  
ffffffff802075f0:	c3                   	ret    

ffffffff802075f1 <__static_initialization_and_destruction_0(int, int)>:
ffffffff802075f1:	f3 0f 1e fa          	endbr64 
ffffffff802075f5:	55                   	push   rbp
ffffffff802075f6:	48 89 e5             	mov    rbp,rsp
ffffffff802075f9:	48 83 ec 10          	sub    rsp,0x10
ffffffff802075fd:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80207600:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff80207603:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
ffffffff80207607:	75 15                	jne    ffffffff8020761e <__static_initialization_and_destruction_0(int, int)+0x2d>
ffffffff80207609:	81 7d f8 ff ff 00 00 	cmp    DWORD PTR [rbp-0x8],0xffff
ffffffff80207610:	75 0c                	jne    ffffffff8020761e <__static_initialization_and_destruction_0(int, int)+0x2d>
ffffffff80207612:	48 c7 c7 e0 ab 21 80 	mov    rdi,0xffffffff8021abe0
ffffffff80207619:	e8 d8 f4 ff ff       	call   ffffffff80206af6 <Spinlock::Spinlock()>
ffffffff8020761e:	90                   	nop
ffffffff8020761f:	c9                   	leave  
ffffffff80207620:	c3                   	ret    

ffffffff80207621 <_GLOBAL__sub_I_vga_spinlock>:
ffffffff80207621:	f3 0f 1e fa          	endbr64 
ffffffff80207625:	55                   	push   rbp
ffffffff80207626:	48 89 e5             	mov    rbp,rsp
ffffffff80207629:	be ff ff 00 00       	mov    esi,0xffff
ffffffff8020762e:	bf 01 00 00 00       	mov    edi,0x1
ffffffff80207633:	e8 b9 ff ff ff       	call   ffffffff802075f1 <__static_initialization_and_destruction_0(int, int)>
ffffffff80207638:	5d                   	pop    rbp
ffffffff80207639:	c3                   	ret    

ffffffff8020763a <VirtualMemory::MapPage(VirtualMemory::PageMapLevel4*, unsigned long, unsigned long, int)>:
ffffffff8020763a:	f3 0f 1e fa          	endbr64 
ffffffff8020763e:	55                   	push   rbp
ffffffff8020763f:	48 89 e5             	mov    rbp,rsp
ffffffff80207642:	48 83 ec 60          	sub    rsp,0x60
ffffffff80207646:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
ffffffff8020764a:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
ffffffff8020764e:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
ffffffff80207652:	89 4d a4             	mov    DWORD PTR [rbp-0x5c],ecx
ffffffff80207655:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
ffffffff8020765a:	75 0b                	jne    ffffffff80207667 <VirtualMemory::MapPage(VirtualMemory::PageMapLevel4*, unsigned long, unsigned long, int)+0x2d>
ffffffff8020765c:	48 8b 05 dd 35 01 00 	mov    rax,QWORD PTR [rip+0x135dd]        # ffffffff8021ac40 <top_level>
ffffffff80207663:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff80207667:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff8020766b:	48 c1 e8 27          	shr    rax,0x27
ffffffff8020766f:	25 ff 01 00 00       	and    eax,0x1ff
ffffffff80207674:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80207678:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff8020767c:	48 c1 e8 1e          	shr    rax,0x1e
ffffffff80207680:	25 ff 01 00 00       	and    eax,0x1ff
ffffffff80207685:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80207689:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff8020768d:	48 c1 e8 15          	shr    rax,0x15
ffffffff80207691:	25 ff 01 00 00       	and    eax,0x1ff
ffffffff80207696:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff8020769a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff8020769e:	48 c1 e8 0c          	shr    rax,0xc
ffffffff802076a2:	25 ff 01 00 00       	and    eax,0x1ff
ffffffff802076a7:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff802076ab:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff802076af:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff802076b3:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffffffff802076b7:	48 85 c0             	test   rax,rax
ffffffff802076ba:	75 27                	jne    ffffffff802076e3 <VirtualMemory::MapPage(VirtualMemory::PageMapLevel4*, unsigned long, unsigned long, int)+0xa9>
ffffffff802076bc:	bf 01 00 00 00       	mov    edi,0x1
ffffffff802076c1:	e8 04 ea ff ff       	call   ffffffff802060ca <PhysicalMemory::AllocPages(unsigned long)>
ffffffff802076c6:	48 89 c2             	mov    rdx,rax
ffffffff802076c9:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffffffff802076cc:	48 98                	cdqe   
ffffffff802076ce:	0f b6 c0             	movzx  eax,al
ffffffff802076d1:	48 89 d1             	mov    rcx,rdx
ffffffff802076d4:	48 09 c1             	or     rcx,rax
ffffffff802076d7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff802076db:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff802076df:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
ffffffff802076e3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff802076e7:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff802076eb:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffffffff802076ef:	b0 00                	mov    al,0x0
ffffffff802076f1:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff802076f5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff802076f9:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff802076fd:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffffffff80207701:	48 85 c0             	test   rax,rax
ffffffff80207704:	75 27                	jne    ffffffff8020772d <VirtualMemory::MapPage(VirtualMemory::PageMapLevel4*, unsigned long, unsigned long, int)+0xf3>
ffffffff80207706:	bf 01 00 00 00       	mov    edi,0x1
ffffffff8020770b:	e8 ba e9 ff ff       	call   ffffffff802060ca <PhysicalMemory::AllocPages(unsigned long)>
ffffffff80207710:	48 89 c2             	mov    rdx,rax
ffffffff80207713:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffffffff80207716:	48 98                	cdqe   
ffffffff80207718:	0f b6 c0             	movzx  eax,al
ffffffff8020771b:	48 89 d1             	mov    rcx,rdx
ffffffff8020771e:	48 09 c1             	or     rcx,rax
ffffffff80207721:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80207725:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80207729:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
ffffffff8020772d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80207731:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80207735:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffffffff80207739:	b0 00                	mov    al,0x0
ffffffff8020773b:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff8020773f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80207743:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80207747:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffffffff8020774b:	48 85 c0             	test   rax,rax
ffffffff8020774e:	75 27                	jne    ffffffff80207777 <VirtualMemory::MapPage(VirtualMemory::PageMapLevel4*, unsigned long, unsigned long, int)+0x13d>
ffffffff80207750:	bf 01 00 00 00       	mov    edi,0x1
ffffffff80207755:	e8 70 e9 ff ff       	call   ffffffff802060ca <PhysicalMemory::AllocPages(unsigned long)>
ffffffff8020775a:	48 89 c2             	mov    rdx,rax
ffffffff8020775d:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffffffff80207760:	48 98                	cdqe   
ffffffff80207762:	0f b6 c0             	movzx  eax,al
ffffffff80207765:	48 89 d1             	mov    rcx,rdx
ffffffff80207768:	48 09 c1             	or     rcx,rax
ffffffff8020776b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8020776f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80207773:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
ffffffff80207777:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8020777b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff8020777f:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffffffff80207783:	b0 00                	mov    al,0x0
ffffffff80207785:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffffffff80207789:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffffffff8020778c:	48 98                	cdqe   
ffffffff8020778e:	48 0b 45 b0          	or     rax,QWORD PTR [rbp-0x50]
ffffffff80207792:	48 89 c1             	mov    rcx,rax
ffffffff80207795:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80207799:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff8020779d:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
ffffffff802077a1:	90                   	nop
ffffffff802077a2:	c9                   	leave  
ffffffff802077a3:	c3                   	ret    

ffffffff802077a4 <VirtualMemory::CreateNewAddressSpace(unsigned long, unsigned long)>:
ffffffff802077a4:	f3 0f 1e fa          	endbr64 
ffffffff802077a8:	55                   	push   rbp
ffffffff802077a9:	48 89 e5             	mov    rbp,rsp
ffffffff802077ac:	48 83 ec 30          	sub    rsp,0x30
ffffffff802077b0:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff802077b4:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffffffff802077b8:	bf 01 00 00 00       	mov    edi,0x1
ffffffff802077bd:	e8 08 e9 ff ff       	call   ffffffff802060ca <PhysicalMemory::AllocPages(unsigned long)>
ffffffff802077c2:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff802077c6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff802077ca:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff802077d0:	b9 00 00 05 00       	mov    ecx,0x50000
ffffffff802077d5:	48 c7 c2 00 00 00 80 	mov    rdx,0xffffffff80000000
ffffffff802077dc:	be 00 00 00 00       	mov    esi,0x0
ffffffff802077e1:	48 89 c7             	mov    rdi,rax
ffffffff802077e4:	e8 d3 00 00 00       	call   ffffffff802078bc <VirtualMemory::MapPage(VirtualMemory::PageMapLevel4*, unsigned long, unsigned long, unsigned long, int)>
ffffffff802077e9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff802077ed:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff802077f3:	b9 02 00 00 00       	mov    ecx,0x2
ffffffff802077f8:	ba 00 80 0b 00       	mov    edx,0xb8000
ffffffff802077fd:	be 00 80 0b 00       	mov    esi,0xb8000
ffffffff80207802:	48 89 c7             	mov    rdi,rax
ffffffff80207805:	e8 b2 00 00 00       	call   ffffffff802078bc <VirtualMemory::MapPage(VirtualMemory::PageMapLevel4*, unsigned long, unsigned long, unsigned long, int)>
ffffffff8020780a:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffffffff80207811:	00 
ffffffff80207812:	eb 36                	jmp    ffffffff8020784a <VirtualMemory::CreateNewAddressSpace(unsigned long, unsigned long)+0xa6>
ffffffff80207814:	48 ba 00 00 00 00 00 	movabs rdx,0xffffb00000000000
ffffffff8020781b:	b0 ff ff 
ffffffff8020781e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80207822:	48 01 c2             	add    rdx,rax
ffffffff80207825:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff80207829:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8020782d:	48 8d 34 01          	lea    rsi,[rcx+rax*1]
ffffffff80207831:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80207835:	b9 07 00 00 00       	mov    ecx,0x7
ffffffff8020783a:	48 89 c7             	mov    rdi,rax
ffffffff8020783d:	e8 f8 fd ff ff       	call   ffffffff8020763a <VirtualMemory::MapPage(VirtualMemory::PageMapLevel4*, unsigned long, unsigned long, int)>
ffffffff80207842:	48 81 45 f8 00 10 00 	add    QWORD PTR [rbp-0x8],0x1000
ffffffff80207849:	00 
ffffffff8020784a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8020784e:	48 05 ff 0f 00 00    	add    rax,0xfff
ffffffff80207854:	48 25 00 f0 ff ff    	and    rax,0xfffffffffffff000
ffffffff8020785a:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
ffffffff8020785e:	72 b4                	jb     ffffffff80207814 <VirtualMemory::CreateNewAddressSpace(unsigned long, unsigned long)+0x70>
ffffffff80207860:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffffffff80207867:	eb 29                	jmp    ffffffff80207892 <VirtualMemory::CreateNewAddressSpace(unsigned long, unsigned long)+0xee>
ffffffff80207869:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffffffff8020786c:	c1 e0 0c             	shl    eax,0xc
ffffffff8020786f:	48 98                	cdqe   
ffffffff80207871:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80207875:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff80207879:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
ffffffff8020787d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80207881:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80207886:	48 89 c7             	mov    rdi,rax
ffffffff80207889:	e8 ac fd ff ff       	call   ffffffff8020763a <VirtualMemory::MapPage(VirtualMemory::PageMapLevel4*, unsigned long, unsigned long, int)>
ffffffff8020788e:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
ffffffff80207892:	81 7d f4 ff ff 04 00 	cmp    DWORD PTR [rbp-0xc],0x4ffff
ffffffff80207899:	7e ce                	jle    ffffffff80207869 <VirtualMemory::CreateNewAddressSpace(unsigned long, unsigned long)+0xc5>
ffffffff8020789b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8020789f:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff802078a4:	ba 00 00 e0 fe       	mov    edx,0xfee00000
ffffffff802078a9:	be 00 00 e0 fe       	mov    esi,0xfee00000
ffffffff802078ae:	48 89 c7             	mov    rdi,rax
ffffffff802078b1:	e8 84 fd ff ff       	call   ffffffff8020763a <VirtualMemory::MapPage(VirtualMemory::PageMapLevel4*, unsigned long, unsigned long, int)>
ffffffff802078b6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff802078ba:	c9                   	leave  
ffffffff802078bb:	c3                   	ret    

ffffffff802078bc <VirtualMemory::MapPage(VirtualMemory::PageMapLevel4*, unsigned long, unsigned long, unsigned long, int)>:
ffffffff802078bc:	f3 0f 1e fa          	endbr64 
ffffffff802078c0:	55                   	push   rbp
ffffffff802078c1:	48 89 e5             	mov    rbp,rsp
ffffffff802078c4:	48 83 ec 40          	sub    rsp,0x40
ffffffff802078c8:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff802078cc:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff802078d0:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff802078d4:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
ffffffff802078d8:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
ffffffff802078dc:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffffffff802078e3:	00 
ffffffff802078e4:	eb 3f                	jmp    ffffffff80207925 <VirtualMemory::MapPage(VirtualMemory::PageMapLevel4*, unsigned long, unsigned long, unsigned long, int)+0x69>
ffffffff802078e6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff802078ea:	48 c1 e0 0c          	shl    rax,0xc
ffffffff802078ee:	48 89 c2             	mov    rdx,rax
ffffffff802078f1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff802078f5:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
ffffffff802078f9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff802078fd:	48 c1 e0 0c          	shl    rax,0xc
ffffffff80207901:	48 89 c2             	mov    rdx,rax
ffffffff80207904:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80207908:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
ffffffff8020790c:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
ffffffff8020790f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80207913:	89 d1                	mov    ecx,edx
ffffffff80207915:	48 89 fa             	mov    rdx,rdi
ffffffff80207918:	48 89 c7             	mov    rdi,rax
ffffffff8020791b:	e8 1a fd ff ff       	call   ffffffff8020763a <VirtualMemory::MapPage(VirtualMemory::PageMapLevel4*, unsigned long, unsigned long, int)>
ffffffff80207920:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
ffffffff80207925:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80207929:	48 3b 45 d0          	cmp    rax,QWORD PTR [rbp-0x30]
ffffffff8020792d:	72 b7                	jb     ffffffff802078e6 <VirtualMemory::MapPage(VirtualMemory::PageMapLevel4*, unsigned long, unsigned long, unsigned long, int)+0x2a>
ffffffff8020792f:	90                   	nop
ffffffff80207930:	90                   	nop
ffffffff80207931:	c9                   	leave  
ffffffff80207932:	c3                   	ret    

ffffffff80207933 <VirtualMemory::Initialize()>:
ffffffff80207933:	f3 0f 1e fa          	endbr64 
ffffffff80207937:	55                   	push   rbp
ffffffff80207938:	48 89 e5             	mov    rbp,rsp
ffffffff8020793b:	48 83 ec 10          	sub    rsp,0x10
ffffffff8020793f:	bf 01 00 00 00       	mov    edi,0x1
ffffffff80207944:	e8 81 e7 ff ff       	call   ffffffff802060ca <PhysicalMemory::AllocPages(unsigned long)>
ffffffff80207949:	48 89 05 f0 32 01 00 	mov    QWORD PTR [rip+0x132f0],rax        # ffffffff8021ac40 <top_level>
ffffffff80207950:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff80207956:	b9 00 00 05 00       	mov    ecx,0x50000
ffffffff8020795b:	48 c7 c2 00 00 00 80 	mov    rdx,0xffffffff80000000
ffffffff80207962:	be 00 00 00 00       	mov    esi,0x0
ffffffff80207967:	bf 00 00 00 00       	mov    edi,0x0
ffffffff8020796c:	e8 4b ff ff ff       	call   ffffffff802078bc <VirtualMemory::MapPage(VirtualMemory::PageMapLevel4*, unsigned long, unsigned long, unsigned long, int)>
ffffffff80207971:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80207976:	ba 00 80 0b 00       	mov    edx,0xb8000
ffffffff8020797b:	be 00 80 0b 00       	mov    esi,0xb8000
ffffffff80207980:	bf 00 00 00 00       	mov    edi,0x0
ffffffff80207985:	e8 b0 fc ff ff       	call   ffffffff8020763a <VirtualMemory::MapPage(VirtualMemory::PageMapLevel4*, unsigned long, unsigned long, int)>
ffffffff8020798a:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff80207991:	eb 2a                	jmp    ffffffff802079bd <VirtualMemory::Initialize()+0x8a>
ffffffff80207993:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80207996:	c1 e0 0c             	shl    eax,0xc
ffffffff80207999:	48 98                	cdqe   
ffffffff8020799b:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff8020799f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff802079a3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff802079a7:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff802079ac:	48 89 c6             	mov    rsi,rax
ffffffff802079af:	bf 00 00 00 00       	mov    edi,0x0
ffffffff802079b4:	e8 81 fc ff ff       	call   ffffffff8020763a <VirtualMemory::MapPage(VirtualMemory::PageMapLevel4*, unsigned long, unsigned long, int)>
ffffffff802079b9:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff802079bd:	81 7d fc ff ff 04 00 	cmp    DWORD PTR [rbp-0x4],0x4ffff
ffffffff802079c4:	7e cd                	jle    ffffffff80207993 <VirtualMemory::Initialize()+0x60>
ffffffff802079c6:	bf 08 00 00 00       	mov    edi,0x8
ffffffff802079cb:	e8 fa e6 ff ff       	call   ffffffff802060ca <PhysicalMemory::AllocPages(unsigned long)>
ffffffff802079d0:	48 89 c6             	mov    rsi,rax
ffffffff802079d3:	41 b8 03 00 00 00    	mov    r8d,0x3
ffffffff802079d9:	b9 00 10 00 00       	mov    ecx,0x1000
ffffffff802079de:	48 b8 00 00 00 00 00 	movabs rax,0xffffa00000000000
ffffffff802079e5:	a0 ff ff 
ffffffff802079e8:	48 89 c2             	mov    rdx,rax
ffffffff802079eb:	bf 00 00 00 00       	mov    edi,0x0
ffffffff802079f0:	e8 c7 fe ff ff       	call   ffffffff802078bc <VirtualMemory::MapPage(VirtualMemory::PageMapLevel4*, unsigned long, unsigned long, unsigned long, int)>
ffffffff802079f5:	48 8b 05 44 32 01 00 	mov    rax,QWORD PTR [rip+0x13244]        # ffffffff8021ac40 <top_level>
ffffffff802079fc:	0f 22 d8             	mov    cr3,rax
ffffffff802079ff:	90                   	nop
ffffffff80207a00:	c9                   	leave  
ffffffff80207a01:	c3                   	ret    

ffffffff80207a02 <VirtualMemory::SwitchToKernelPageMap()>:
ffffffff80207a02:	f3 0f 1e fa          	endbr64 
ffffffff80207a06:	55                   	push   rbp
ffffffff80207a07:	48 89 e5             	mov    rbp,rsp
ffffffff80207a0a:	48 8b 05 2f 32 01 00 	mov    rax,QWORD PTR [rip+0x1322f]        # ffffffff8021ac40 <top_level>
ffffffff80207a11:	0f 22 d8             	mov    cr3,rax
ffffffff80207a14:	90                   	nop
ffffffff80207a15:	5d                   	pop    rbp
ffffffff80207a16:	c3                   	ret    
